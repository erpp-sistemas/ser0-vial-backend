
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model access
 * 
 */
export type access = $Result.DefaultSelection<Prisma.$accessPayload>
/**
 * Model attendance
 * 
 */
export type attendance = $Result.DefaultSelection<Prisma.$attendancePayload>
/**
 * Model field
 * 
 */
export type field = $Result.DefaultSelection<Prisma.$fieldPayload>
/**
 * Model form
 * 
 */
export type form = $Result.DefaultSelection<Prisma.$formPayload>
/**
 * Model form_field
 * 
 */
export type form_field = $Result.DefaultSelection<Prisma.$form_fieldPayload>
/**
 * Model form_photo_form
 * 
 */
export type form_photo_form = $Result.DefaultSelection<Prisma.$form_photo_formPayload>
/**
 * Model photo_form
 * 
 */
export type photo_form = $Result.DefaultSelection<Prisma.$photo_formPayload>
/**
 * Model place
 * 
 */
export type place = $Result.DefaultSelection<Prisma.$placePayload>
/**
 * Model place_user
 * 
 */
export type place_user = $Result.DefaultSelection<Prisma.$place_userPayload>
/**
 * Model register_form_dynamic
 * 
 */
export type register_form_dynamic = $Result.DefaultSelection<Prisma.$register_form_dynamicPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model user_contact
 * 
 */
export type user_contact = $Result.DefaultSelection<Prisma.$user_contactPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accesses
 * const accesses = await prisma.access.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accesses
   * const accesses = await prisma.access.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.access`: Exposes CRUD operations for the **access** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accesses
    * const accesses = await prisma.access.findMany()
    * ```
    */
  get access(): Prisma.accessDelegate<ExtArgs>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.attendanceDelegate<ExtArgs>;

  /**
   * `prisma.field`: Exposes CRUD operations for the **field** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fields
    * const fields = await prisma.field.findMany()
    * ```
    */
  get field(): Prisma.fieldDelegate<ExtArgs>;

  /**
   * `prisma.form`: Exposes CRUD operations for the **form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms
    * const forms = await prisma.form.findMany()
    * ```
    */
  get form(): Prisma.formDelegate<ExtArgs>;

  /**
   * `prisma.form_field`: Exposes CRUD operations for the **form_field** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Form_fields
    * const form_fields = await prisma.form_field.findMany()
    * ```
    */
  get form_field(): Prisma.form_fieldDelegate<ExtArgs>;

  /**
   * `prisma.form_photo_form`: Exposes CRUD operations for the **form_photo_form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Form_photo_forms
    * const form_photo_forms = await prisma.form_photo_form.findMany()
    * ```
    */
  get form_photo_form(): Prisma.form_photo_formDelegate<ExtArgs>;

  /**
   * `prisma.photo_form`: Exposes CRUD operations for the **photo_form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photo_forms
    * const photo_forms = await prisma.photo_form.findMany()
    * ```
    */
  get photo_form(): Prisma.photo_formDelegate<ExtArgs>;

  /**
   * `prisma.place`: Exposes CRUD operations for the **place** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Places
    * const places = await prisma.place.findMany()
    * ```
    */
  get place(): Prisma.placeDelegate<ExtArgs>;

  /**
   * `prisma.place_user`: Exposes CRUD operations for the **place_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Place_users
    * const place_users = await prisma.place_user.findMany()
    * ```
    */
  get place_user(): Prisma.place_userDelegate<ExtArgs>;

  /**
   * `prisma.register_form_dynamic`: Exposes CRUD operations for the **register_form_dynamic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Register_form_dynamics
    * const register_form_dynamics = await prisma.register_form_dynamic.findMany()
    * ```
    */
  get register_form_dynamic(): Prisma.register_form_dynamicDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.user_contact`: Exposes CRUD operations for the **user_contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_contacts
    * const user_contacts = await prisma.user_contact.findMany()
    * ```
    */
  get user_contact(): Prisma.user_contactDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    access: 'access',
    attendance: 'attendance',
    field: 'field',
    form: 'form',
    form_field: 'form_field',
    form_photo_form: 'form_photo_form',
    photo_form: 'photo_form',
    place: 'place',
    place_user: 'place_user',
    register_form_dynamic: 'register_form_dynamic',
    role: 'role',
    user: 'user',
    user_contact: 'user_contact'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "access" | "attendance" | "field" | "form" | "form_field" | "form_photo_form" | "photo_form" | "place" | "place_user" | "register_form_dynamic" | "role" | "user" | "user_contact"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      access: {
        payload: Prisma.$accessPayload<ExtArgs>
        fields: Prisma.accessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.accessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.accessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          findFirst: {
            args: Prisma.accessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.accessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          findMany: {
            args: Prisma.accessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>[]
          }
          create: {
            args: Prisma.accessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          createMany: {
            args: Prisma.accessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.accessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          update: {
            args: Prisma.accessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          deleteMany: {
            args: Prisma.accessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.accessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.accessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$accessPayload>
          }
          aggregate: {
            args: Prisma.AccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccess>
          }
          groupBy: {
            args: Prisma.accessGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.accessCountArgs<ExtArgs>
            result: $Utils.Optional<AccessCountAggregateOutputType> | number
          }
        }
      }
      attendance: {
        payload: Prisma.$attendancePayload<ExtArgs>
        fields: Prisma.attendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findFirst: {
            args: Prisma.attendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findMany: {
            args: Prisma.attendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>[]
          }
          create: {
            args: Prisma.attendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          createMany: {
            args: Prisma.attendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.attendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          update: {
            args: Prisma.attendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          deleteMany: {
            args: Prisma.attendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.attendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.attendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.attendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.attendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      field: {
        payload: Prisma.$fieldPayload<ExtArgs>
        fields: Prisma.fieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          findFirst: {
            args: Prisma.fieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          findMany: {
            args: Prisma.fieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>[]
          }
          create: {
            args: Prisma.fieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          createMany: {
            args: Prisma.fieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.fieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          update: {
            args: Prisma.fieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          deleteMany: {
            args: Prisma.fieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.fieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.fieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fieldPayload>
          }
          aggregate: {
            args: Prisma.FieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateField>
          }
          groupBy: {
            args: Prisma.fieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.fieldCountArgs<ExtArgs>
            result: $Utils.Optional<FieldCountAggregateOutputType> | number
          }
        }
      }
      form: {
        payload: Prisma.$formPayload<ExtArgs>
        fields: Prisma.formFieldRefs
        operations: {
          findUnique: {
            args: Prisma.formFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.formFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          findFirst: {
            args: Prisma.formFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.formFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          findMany: {
            args: Prisma.formFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>[]
          }
          create: {
            args: Prisma.formCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          createMany: {
            args: Prisma.formCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.formDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          update: {
            args: Prisma.formUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          deleteMany: {
            args: Prisma.formDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.formUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.formUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$formPayload>
          }
          aggregate: {
            args: Prisma.FormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm>
          }
          groupBy: {
            args: Prisma.formGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormGroupByOutputType>[]
          }
          count: {
            args: Prisma.formCountArgs<ExtArgs>
            result: $Utils.Optional<FormCountAggregateOutputType> | number
          }
        }
      }
      form_field: {
        payload: Prisma.$form_fieldPayload<ExtArgs>
        fields: Prisma.form_fieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.form_fieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.form_fieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          findFirst: {
            args: Prisma.form_fieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.form_fieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          findMany: {
            args: Prisma.form_fieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>[]
          }
          create: {
            args: Prisma.form_fieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          createMany: {
            args: Prisma.form_fieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.form_fieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          update: {
            args: Prisma.form_fieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          deleteMany: {
            args: Prisma.form_fieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.form_fieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.form_fieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_fieldPayload>
          }
          aggregate: {
            args: Prisma.Form_fieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm_field>
          }
          groupBy: {
            args: Prisma.form_fieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<Form_fieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.form_fieldCountArgs<ExtArgs>
            result: $Utils.Optional<Form_fieldCountAggregateOutputType> | number
          }
        }
      }
      form_photo_form: {
        payload: Prisma.$form_photo_formPayload<ExtArgs>
        fields: Prisma.form_photo_formFieldRefs
        operations: {
          findUnique: {
            args: Prisma.form_photo_formFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.form_photo_formFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          findFirst: {
            args: Prisma.form_photo_formFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.form_photo_formFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          findMany: {
            args: Prisma.form_photo_formFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>[]
          }
          create: {
            args: Prisma.form_photo_formCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          createMany: {
            args: Prisma.form_photo_formCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.form_photo_formDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          update: {
            args: Prisma.form_photo_formUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          deleteMany: {
            args: Prisma.form_photo_formDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.form_photo_formUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.form_photo_formUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$form_photo_formPayload>
          }
          aggregate: {
            args: Prisma.Form_photo_formAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm_photo_form>
          }
          groupBy: {
            args: Prisma.form_photo_formGroupByArgs<ExtArgs>
            result: $Utils.Optional<Form_photo_formGroupByOutputType>[]
          }
          count: {
            args: Prisma.form_photo_formCountArgs<ExtArgs>
            result: $Utils.Optional<Form_photo_formCountAggregateOutputType> | number
          }
        }
      }
      photo_form: {
        payload: Prisma.$photo_formPayload<ExtArgs>
        fields: Prisma.photo_formFieldRefs
        operations: {
          findUnique: {
            args: Prisma.photo_formFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.photo_formFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          findFirst: {
            args: Prisma.photo_formFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.photo_formFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          findMany: {
            args: Prisma.photo_formFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>[]
          }
          create: {
            args: Prisma.photo_formCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          createMany: {
            args: Prisma.photo_formCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.photo_formDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          update: {
            args: Prisma.photo_formUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          deleteMany: {
            args: Prisma.photo_formDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.photo_formUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.photo_formUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$photo_formPayload>
          }
          aggregate: {
            args: Prisma.Photo_formAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhoto_form>
          }
          groupBy: {
            args: Prisma.photo_formGroupByArgs<ExtArgs>
            result: $Utils.Optional<Photo_formGroupByOutputType>[]
          }
          count: {
            args: Prisma.photo_formCountArgs<ExtArgs>
            result: $Utils.Optional<Photo_formCountAggregateOutputType> | number
          }
        }
      }
      place: {
        payload: Prisma.$placePayload<ExtArgs>
        fields: Prisma.placeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.placeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.placeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          findFirst: {
            args: Prisma.placeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.placeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          findMany: {
            args: Prisma.placeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>[]
          }
          create: {
            args: Prisma.placeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          createMany: {
            args: Prisma.placeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.placeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          update: {
            args: Prisma.placeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          deleteMany: {
            args: Prisma.placeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.placeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.placeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$placePayload>
          }
          aggregate: {
            args: Prisma.PlaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlace>
          }
          groupBy: {
            args: Prisma.placeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.placeCountArgs<ExtArgs>
            result: $Utils.Optional<PlaceCountAggregateOutputType> | number
          }
        }
      }
      place_user: {
        payload: Prisma.$place_userPayload<ExtArgs>
        fields: Prisma.place_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.place_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.place_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          findFirst: {
            args: Prisma.place_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.place_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          findMany: {
            args: Prisma.place_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>[]
          }
          create: {
            args: Prisma.place_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          createMany: {
            args: Prisma.place_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.place_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          update: {
            args: Prisma.place_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          deleteMany: {
            args: Prisma.place_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.place_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.place_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$place_userPayload>
          }
          aggregate: {
            args: Prisma.Place_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlace_user>
          }
          groupBy: {
            args: Prisma.place_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Place_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.place_userCountArgs<ExtArgs>
            result: $Utils.Optional<Place_userCountAggregateOutputType> | number
          }
        }
      }
      register_form_dynamic: {
        payload: Prisma.$register_form_dynamicPayload<ExtArgs>
        fields: Prisma.register_form_dynamicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.register_form_dynamicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.register_form_dynamicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          findFirst: {
            args: Prisma.register_form_dynamicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.register_form_dynamicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          findMany: {
            args: Prisma.register_form_dynamicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>[]
          }
          create: {
            args: Prisma.register_form_dynamicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          createMany: {
            args: Prisma.register_form_dynamicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.register_form_dynamicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          update: {
            args: Prisma.register_form_dynamicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          deleteMany: {
            args: Prisma.register_form_dynamicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.register_form_dynamicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.register_form_dynamicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$register_form_dynamicPayload>
          }
          aggregate: {
            args: Prisma.Register_form_dynamicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegister_form_dynamic>
          }
          groupBy: {
            args: Prisma.register_form_dynamicGroupByArgs<ExtArgs>
            result: $Utils.Optional<Register_form_dynamicGroupByOutputType>[]
          }
          count: {
            args: Prisma.register_form_dynamicCountArgs<ExtArgs>
            result: $Utils.Optional<Register_form_dynamicCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      user_contact: {
        payload: Prisma.$user_contactPayload<ExtArgs>
        fields: Prisma.user_contactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_contactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_contactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          findFirst: {
            args: Prisma.user_contactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_contactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          findMany: {
            args: Prisma.user_contactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>[]
          }
          create: {
            args: Prisma.user_contactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          createMany: {
            args: Prisma.user_contactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.user_contactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          update: {
            args: Prisma.user_contactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          deleteMany: {
            args: Prisma.user_contactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_contactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_contactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_contactPayload>
          }
          aggregate: {
            args: Prisma.User_contactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_contact>
          }
          groupBy: {
            args: Prisma.user_contactGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_contactGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_contactCountArgs<ExtArgs>
            result: $Utils.Optional<User_contactCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FieldCountOutputType
   */

  export type FieldCountOutputType = {
    form_field: number
  }

  export type FieldCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_field?: boolean | FieldCountOutputTypeCountForm_fieldArgs
  }

  // Custom InputTypes
  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldCountOutputType
     */
    select?: FieldCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeCountForm_fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_fieldWhereInput
  }


  /**
   * Count Type FormCountOutputType
   */

  export type FormCountOutputType = {
    form_field: number
    form_photo_form: number
  }

  export type FormCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_field?: boolean | FormCountOutputTypeCountForm_fieldArgs
    form_photo_form?: boolean | FormCountOutputTypeCountForm_photo_formArgs
  }

  // Custom InputTypes
  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormCountOutputType
     */
    select?: FormCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountForm_fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_fieldWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountForm_photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_photo_formWhereInput
  }


  /**
   * Count Type Photo_formCountOutputType
   */

  export type Photo_formCountOutputType = {
    form_photo_form: number
  }

  export type Photo_formCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_photo_form?: boolean | Photo_formCountOutputTypeCountForm_photo_formArgs
  }

  // Custom InputTypes
  /**
   * Photo_formCountOutputType without action
   */
  export type Photo_formCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo_formCountOutputType
     */
    select?: Photo_formCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Photo_formCountOutputType without action
   */
  export type Photo_formCountOutputTypeCountForm_photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_photo_formWhereInput
  }


  /**
   * Count Type PlaceCountOutputType
   */

  export type PlaceCountOutputType = {
    place_user: number
    register_form_dynamic: number
  }

  export type PlaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place_user?: boolean | PlaceCountOutputTypeCountPlace_userArgs
    register_form_dynamic?: boolean | PlaceCountOutputTypeCountRegister_form_dynamicArgs
  }

  // Custom InputTypes
  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceCountOutputType
     */
    select?: PlaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountPlace_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: place_userWhereInput
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountRegister_form_dynamicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: register_form_dynamicWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    user: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RoleCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    access: number
    attendance: number
    place_user: number
    user_contact: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    access?: boolean | UserCountOutputTypeCountAccessArgs
    attendance?: boolean | UserCountOutputTypeCountAttendanceArgs
    place_user?: boolean | UserCountOutputTypeCountPlace_userArgs
    user_contact?: boolean | UserCountOutputTypeCountUser_contactArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: accessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlace_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: place_userWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_contactWhereInput
  }


  /**
   * Models
   */

  /**
   * Model access
   */

  export type AggregateAccess = {
    _count: AccessCountAggregateOutputType | null
    _avg: AccessAvgAggregateOutputType | null
    _sum: AccessSumAggregateOutputType | null
    _min: AccessMinAggregateOutputType | null
    _max: AccessMaxAggregateOutputType | null
  }

  export type AccessAvgAggregateOutputType = {
    access_id: number | null
    user_id: number | null
    active: number | null
  }

  export type AccessSumAggregateOutputType = {
    access_id: number | null
    user_id: number | null
    active: number | null
  }

  export type AccessMinAggregateOutputType = {
    access_id: number | null
    username: string | null
    password: string | null
    user_id: number | null
    active: number | null
  }

  export type AccessMaxAggregateOutputType = {
    access_id: number | null
    username: string | null
    password: string | null
    user_id: number | null
    active: number | null
  }

  export type AccessCountAggregateOutputType = {
    access_id: number
    username: number
    password: number
    user_id: number
    active: number
    _all: number
  }


  export type AccessAvgAggregateInputType = {
    access_id?: true
    user_id?: true
    active?: true
  }

  export type AccessSumAggregateInputType = {
    access_id?: true
    user_id?: true
    active?: true
  }

  export type AccessMinAggregateInputType = {
    access_id?: true
    username?: true
    password?: true
    user_id?: true
    active?: true
  }

  export type AccessMaxAggregateInputType = {
    access_id?: true
    username?: true
    password?: true
    user_id?: true
    active?: true
  }

  export type AccessCountAggregateInputType = {
    access_id?: true
    username?: true
    password?: true
    user_id?: true
    active?: true
    _all?: true
  }

  export type AccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which access to aggregate.
     */
    where?: accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accesses to fetch.
     */
    orderBy?: accessOrderByWithRelationInput | accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned accesses
    **/
    _count?: true | AccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessMaxAggregateInputType
  }

  export type GetAccessAggregateType<T extends AccessAggregateArgs> = {
        [P in keyof T & keyof AggregateAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccess[P]>
      : GetScalarType<T[P], AggregateAccess[P]>
  }




  export type accessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: accessWhereInput
    orderBy?: accessOrderByWithAggregationInput | accessOrderByWithAggregationInput[]
    by: AccessScalarFieldEnum[] | AccessScalarFieldEnum
    having?: accessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessCountAggregateInputType | true
    _avg?: AccessAvgAggregateInputType
    _sum?: AccessSumAggregateInputType
    _min?: AccessMinAggregateInputType
    _max?: AccessMaxAggregateInputType
  }

  export type AccessGroupByOutputType = {
    access_id: number
    username: string
    password: string
    user_id: number | null
    active: number | null
    _count: AccessCountAggregateOutputType | null
    _avg: AccessAvgAggregateOutputType | null
    _sum: AccessSumAggregateOutputType | null
    _min: AccessMinAggregateOutputType | null
    _max: AccessMaxAggregateOutputType | null
  }

  type GetAccessGroupByPayload<T extends accessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessGroupByOutputType[P]>
            : GetScalarType<T[P], AccessGroupByOutputType[P]>
        }
      >
    >


  export type accessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    access_id?: boolean
    username?: boolean
    password?: boolean
    user_id?: boolean
    active?: boolean
    user?: boolean | access$userArgs<ExtArgs>
  }, ExtArgs["result"]["access"]>


  export type accessSelectScalar = {
    access_id?: boolean
    username?: boolean
    password?: boolean
    user_id?: boolean
    active?: boolean
  }

  export type accessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | access$userArgs<ExtArgs>
  }

  export type $accessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "access"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      access_id: number
      username: string
      password: string
      user_id: number | null
      active: number | null
    }, ExtArgs["result"]["access"]>
    composites: {}
  }

  type accessGetPayload<S extends boolean | null | undefined | accessDefaultArgs> = $Result.GetResult<Prisma.$accessPayload, S>

  type accessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<accessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccessCountAggregateInputType | true
    }

  export interface accessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['access'], meta: { name: 'access' } }
    /**
     * Find zero or one Access that matches the filter.
     * @param {accessFindUniqueArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends accessFindUniqueArgs>(args: SelectSubset<T, accessFindUniqueArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Access that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {accessFindUniqueOrThrowArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends accessFindUniqueOrThrowArgs>(args: SelectSubset<T, accessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Access that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessFindFirstArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends accessFindFirstArgs>(args?: SelectSubset<T, accessFindFirstArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Access that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessFindFirstOrThrowArgs} args - Arguments to find a Access
     * @example
     * // Get one Access
     * const access = await prisma.access.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends accessFindFirstOrThrowArgs>(args?: SelectSubset<T, accessFindFirstOrThrowArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accesses
     * const accesses = await prisma.access.findMany()
     * 
     * // Get first 10 Accesses
     * const accesses = await prisma.access.findMany({ take: 10 })
     * 
     * // Only select the `access_id`
     * const accessWithAccess_idOnly = await prisma.access.findMany({ select: { access_id: true } })
     * 
     */
    findMany<T extends accessFindManyArgs>(args?: SelectSubset<T, accessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Access.
     * @param {accessCreateArgs} args - Arguments to create a Access.
     * @example
     * // Create one Access
     * const Access = await prisma.access.create({
     *   data: {
     *     // ... data to create a Access
     *   }
     * })
     * 
     */
    create<T extends accessCreateArgs>(args: SelectSubset<T, accessCreateArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accesses.
     * @param {accessCreateManyArgs} args - Arguments to create many Accesses.
     * @example
     * // Create many Accesses
     * const access = await prisma.access.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends accessCreateManyArgs>(args?: SelectSubset<T, accessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Access.
     * @param {accessDeleteArgs} args - Arguments to delete one Access.
     * @example
     * // Delete one Access
     * const Access = await prisma.access.delete({
     *   where: {
     *     // ... filter to delete one Access
     *   }
     * })
     * 
     */
    delete<T extends accessDeleteArgs>(args: SelectSubset<T, accessDeleteArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Access.
     * @param {accessUpdateArgs} args - Arguments to update one Access.
     * @example
     * // Update one Access
     * const access = await prisma.access.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends accessUpdateArgs>(args: SelectSubset<T, accessUpdateArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accesses.
     * @param {accessDeleteManyArgs} args - Arguments to filter Accesses to delete.
     * @example
     * // Delete a few Accesses
     * const { count } = await prisma.access.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends accessDeleteManyArgs>(args?: SelectSubset<T, accessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accesses
     * const access = await prisma.access.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends accessUpdateManyArgs>(args: SelectSubset<T, accessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Access.
     * @param {accessUpsertArgs} args - Arguments to update or create a Access.
     * @example
     * // Update or create a Access
     * const access = await prisma.access.upsert({
     *   create: {
     *     // ... data to create a Access
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Access we want to update
     *   }
     * })
     */
    upsert<T extends accessUpsertArgs>(args: SelectSubset<T, accessUpsertArgs<ExtArgs>>): Prisma__accessClient<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessCountArgs} args - Arguments to filter Accesses to count.
     * @example
     * // Count the number of Accesses
     * const count = await prisma.access.count({
     *   where: {
     *     // ... the filter for the Accesses we want to count
     *   }
     * })
    **/
    count<T extends accessCountArgs>(
      args?: Subset<T, accessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessAggregateArgs>(args: Subset<T, AccessAggregateArgs>): Prisma.PrismaPromise<GetAccessAggregateType<T>>

    /**
     * Group by Access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends accessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: accessGroupByArgs['orderBy'] }
        : { orderBy?: accessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, accessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the access model
   */
  readonly fields: accessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for access.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__accessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends access$userArgs<ExtArgs> = {}>(args?: Subset<T, access$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the access model
   */ 
  interface accessFieldRefs {
    readonly access_id: FieldRef<"access", 'Int'>
    readonly username: FieldRef<"access", 'String'>
    readonly password: FieldRef<"access", 'String'>
    readonly user_id: FieldRef<"access", 'Int'>
    readonly active: FieldRef<"access", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * access findUnique
   */
  export type accessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter, which access to fetch.
     */
    where: accessWhereUniqueInput
  }

  /**
   * access findUniqueOrThrow
   */
  export type accessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter, which access to fetch.
     */
    where: accessWhereUniqueInput
  }

  /**
   * access findFirst
   */
  export type accessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter, which access to fetch.
     */
    where?: accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accesses to fetch.
     */
    orderBy?: accessOrderByWithRelationInput | accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accesses.
     */
    cursor?: accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accesses.
     */
    distinct?: AccessScalarFieldEnum | AccessScalarFieldEnum[]
  }

  /**
   * access findFirstOrThrow
   */
  export type accessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter, which access to fetch.
     */
    where?: accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accesses to fetch.
     */
    orderBy?: accessOrderByWithRelationInput | accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accesses.
     */
    cursor?: accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accesses.
     */
    distinct?: AccessScalarFieldEnum | AccessScalarFieldEnum[]
  }

  /**
   * access findMany
   */
  export type accessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter, which accesses to fetch.
     */
    where?: accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accesses to fetch.
     */
    orderBy?: accessOrderByWithRelationInput | accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing accesses.
     */
    cursor?: accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accesses.
     */
    skip?: number
    distinct?: AccessScalarFieldEnum | AccessScalarFieldEnum[]
  }

  /**
   * access create
   */
  export type accessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * The data needed to create a access.
     */
    data: XOR<accessCreateInput, accessUncheckedCreateInput>
  }

  /**
   * access createMany
   */
  export type accessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many accesses.
     */
    data: accessCreateManyInput | accessCreateManyInput[]
  }

  /**
   * access update
   */
  export type accessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * The data needed to update a access.
     */
    data: XOR<accessUpdateInput, accessUncheckedUpdateInput>
    /**
     * Choose, which access to update.
     */
    where: accessWhereUniqueInput
  }

  /**
   * access updateMany
   */
  export type accessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update accesses.
     */
    data: XOR<accessUpdateManyMutationInput, accessUncheckedUpdateManyInput>
    /**
     * Filter which accesses to update
     */
    where?: accessWhereInput
  }

  /**
   * access upsert
   */
  export type accessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * The filter to search for the access to update in case it exists.
     */
    where: accessWhereUniqueInput
    /**
     * In case the access found by the `where` argument doesn't exist, create a new access with this data.
     */
    create: XOR<accessCreateInput, accessUncheckedCreateInput>
    /**
     * In case the access was found with the provided `where` argument, update it with this data.
     */
    update: XOR<accessUpdateInput, accessUncheckedUpdateInput>
  }

  /**
   * access delete
   */
  export type accessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    /**
     * Filter which access to delete.
     */
    where: accessWhereUniqueInput
  }

  /**
   * access deleteMany
   */
  export type accessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which accesses to delete
     */
    where?: accessWhereInput
  }

  /**
   * access.user
   */
  export type access$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * access without action
   */
  export type accessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
  }


  /**
   * Model attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    attendance_id: number | null
    user_id: number | null
    latitude_entry_time: Decimal | null
    longitude_entry_time: Decimal | null
    latitude_departure_time: Decimal | null
    longitude_departure_time: Decimal | null
  }

  export type AttendanceSumAggregateOutputType = {
    attendance_id: number | null
    user_id: number | null
    latitude_entry_time: Decimal | null
    longitude_entry_time: Decimal | null
    latitude_departure_time: Decimal | null
    longitude_departure_time: Decimal | null
  }

  export type AttendanceMinAggregateOutputType = {
    attendance_id: number | null
    user_id: number | null
    entry_time: Date | null
    latitude_entry_time: Decimal | null
    longitude_entry_time: Decimal | null
    photo_entry_time: string | null
    departure_time: Date | null
    latitude_departure_time: Decimal | null
    longitude_departure_time: Decimal | null
    photo_departure_time: string | null
  }

  export type AttendanceMaxAggregateOutputType = {
    attendance_id: number | null
    user_id: number | null
    entry_time: Date | null
    latitude_entry_time: Decimal | null
    longitude_entry_time: Decimal | null
    photo_entry_time: string | null
    departure_time: Date | null
    latitude_departure_time: Decimal | null
    longitude_departure_time: Decimal | null
    photo_departure_time: string | null
  }

  export type AttendanceCountAggregateOutputType = {
    attendance_id: number
    user_id: number
    entry_time: number
    latitude_entry_time: number
    longitude_entry_time: number
    photo_entry_time: number
    departure_time: number
    latitude_departure_time: number
    longitude_departure_time: number
    photo_departure_time: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    attendance_id?: true
    user_id?: true
    latitude_entry_time?: true
    longitude_entry_time?: true
    latitude_departure_time?: true
    longitude_departure_time?: true
  }

  export type AttendanceSumAggregateInputType = {
    attendance_id?: true
    user_id?: true
    latitude_entry_time?: true
    longitude_entry_time?: true
    latitude_departure_time?: true
    longitude_departure_time?: true
  }

  export type AttendanceMinAggregateInputType = {
    attendance_id?: true
    user_id?: true
    entry_time?: true
    latitude_entry_time?: true
    longitude_entry_time?: true
    photo_entry_time?: true
    departure_time?: true
    latitude_departure_time?: true
    longitude_departure_time?: true
    photo_departure_time?: true
  }

  export type AttendanceMaxAggregateInputType = {
    attendance_id?: true
    user_id?: true
    entry_time?: true
    latitude_entry_time?: true
    longitude_entry_time?: true
    photo_entry_time?: true
    departure_time?: true
    latitude_departure_time?: true
    longitude_departure_time?: true
    photo_departure_time?: true
  }

  export type AttendanceCountAggregateInputType = {
    attendance_id?: true
    user_id?: true
    entry_time?: true
    latitude_entry_time?: true
    longitude_entry_time?: true
    photo_entry_time?: true
    departure_time?: true
    latitude_departure_time?: true
    longitude_departure_time?: true
    photo_departure_time?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendance to aggregate.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type attendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithAggregationInput | attendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: attendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    attendance_id: number
    user_id: number | null
    entry_time: Date | null
    latitude_entry_time: Decimal | null
    longitude_entry_time: Decimal | null
    photo_entry_time: string | null
    departure_time: Date | null
    latitude_departure_time: Decimal | null
    longitude_departure_time: Decimal | null
    photo_departure_time: string | null
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type attendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attendance_id?: boolean
    user_id?: boolean
    entry_time?: boolean
    latitude_entry_time?: boolean
    longitude_entry_time?: boolean
    photo_entry_time?: boolean
    departure_time?: boolean
    latitude_departure_time?: boolean
    longitude_departure_time?: boolean
    photo_departure_time?: boolean
    user?: boolean | attendance$userArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>


  export type attendanceSelectScalar = {
    attendance_id?: boolean
    user_id?: boolean
    entry_time?: boolean
    latitude_entry_time?: boolean
    longitude_entry_time?: boolean
    photo_entry_time?: boolean
    departure_time?: boolean
    latitude_departure_time?: boolean
    longitude_departure_time?: boolean
    photo_departure_time?: boolean
  }

  export type attendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | attendance$userArgs<ExtArgs>
  }

  export type $attendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attendance"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      attendance_id: number
      user_id: number | null
      entry_time: Date | null
      latitude_entry_time: Prisma.Decimal | null
      longitude_entry_time: Prisma.Decimal | null
      photo_entry_time: string | null
      departure_time: Date | null
      latitude_departure_time: Prisma.Decimal | null
      longitude_departure_time: Prisma.Decimal | null
      photo_departure_time: string | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = $Result.GetResult<Prisma.$attendancePayload, S>

  type attendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface attendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends attendanceFindUniqueArgs>(args: SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends attendanceFindFirstArgs>(args?: SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `attendance_id`
     * const attendanceWithAttendance_idOnly = await prisma.attendance.findMany({ select: { attendance_id: true } })
     * 
     */
    findMany<T extends attendanceFindManyArgs>(args?: SelectSubset<T, attendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attendance.
     * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends attendanceCreateArgs>(args: SelectSubset<T, attendanceCreateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attendances.
     * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends attendanceCreateManyArgs>(args?: SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance.
     * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends attendanceDeleteArgs>(args: SelectSubset<T, attendanceDeleteArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attendance.
     * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends attendanceUpdateArgs>(args: SelectSubset<T, attendanceUpdateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attendances.
     * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends attendanceDeleteManyArgs>(args?: SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends attendanceUpdateManyArgs>(args: SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends attendanceUpsertArgs>(args: SelectSubset<T, attendanceUpsertArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends attendanceCountArgs>(
      args?: Subset<T, attendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attendanceGroupByArgs['orderBy'] }
        : { orderBy?: attendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attendance model
   */
  readonly fields: attendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends attendance$userArgs<ExtArgs> = {}>(args?: Subset<T, attendance$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the attendance model
   */ 
  interface attendanceFieldRefs {
    readonly attendance_id: FieldRef<"attendance", 'Int'>
    readonly user_id: FieldRef<"attendance", 'Int'>
    readonly entry_time: FieldRef<"attendance", 'DateTime'>
    readonly latitude_entry_time: FieldRef<"attendance", 'Decimal'>
    readonly longitude_entry_time: FieldRef<"attendance", 'Decimal'>
    readonly photo_entry_time: FieldRef<"attendance", 'String'>
    readonly departure_time: FieldRef<"attendance", 'DateTime'>
    readonly latitude_departure_time: FieldRef<"attendance", 'Decimal'>
    readonly longitude_departure_time: FieldRef<"attendance", 'Decimal'>
    readonly photo_departure_time: FieldRef<"attendance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * attendance findUnique
   */
  export type attendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findUniqueOrThrow
   */
  export type attendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findFirst
   */
  export type attendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findFirstOrThrow
   */
  export type attendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findMany
   */
  export type attendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendances to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance create
   */
  export type attendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a attendance.
     */
    data?: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
  }

  /**
   * attendance createMany
   */
  export type attendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attendances.
     */
    data: attendanceCreateManyInput | attendanceCreateManyInput[]
  }

  /**
   * attendance update
   */
  export type attendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a attendance.
     */
    data: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
    /**
     * Choose, which attendance to update.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance updateMany
   */
  export type attendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attendances.
     */
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyInput>
    /**
     * Filter which attendances to update
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance upsert
   */
  export type attendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the attendance to update in case it exists.
     */
    where: attendanceWhereUniqueInput
    /**
     * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
     */
    create: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
    /**
     * In case the attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
  }

  /**
   * attendance delete
   */
  export type attendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter which attendance to delete.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance deleteMany
   */
  export type attendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendances to delete
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance.user
   */
  export type attendance$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * attendance without action
   */
  export type attendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
  }


  /**
   * Model field
   */

  export type AggregateField = {
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  export type FieldAvgAggregateOutputType = {
    field_id: number | null
    mandatory: number | null
    parent_field_id: number | null
    order: number | null
  }

  export type FieldSumAggregateOutputType = {
    field_id: number | null
    mandatory: number | null
    parent_field_id: number | null
    order: number | null
  }

  export type FieldMinAggregateOutputType = {
    field_id: number | null
    name: string | null
    type_db: string | null
    type_field_form: string | null
    type_form: string | null
    options_select: string | null
    mandatory: number | null
    type_select: string | null
    parent_field_id: number | null
    order: number | null
  }

  export type FieldMaxAggregateOutputType = {
    field_id: number | null
    name: string | null
    type_db: string | null
    type_field_form: string | null
    type_form: string | null
    options_select: string | null
    mandatory: number | null
    type_select: string | null
    parent_field_id: number | null
    order: number | null
  }

  export type FieldCountAggregateOutputType = {
    field_id: number
    name: number
    type_db: number
    type_field_form: number
    type_form: number
    options_select: number
    mandatory: number
    type_select: number
    parent_field_id: number
    order: number
    _all: number
  }


  export type FieldAvgAggregateInputType = {
    field_id?: true
    mandatory?: true
    parent_field_id?: true
    order?: true
  }

  export type FieldSumAggregateInputType = {
    field_id?: true
    mandatory?: true
    parent_field_id?: true
    order?: true
  }

  export type FieldMinAggregateInputType = {
    field_id?: true
    name?: true
    type_db?: true
    type_field_form?: true
    type_form?: true
    options_select?: true
    mandatory?: true
    type_select?: true
    parent_field_id?: true
    order?: true
  }

  export type FieldMaxAggregateInputType = {
    field_id?: true
    name?: true
    type_db?: true
    type_field_form?: true
    type_form?: true
    options_select?: true
    mandatory?: true
    type_select?: true
    parent_field_id?: true
    order?: true
  }

  export type FieldCountAggregateInputType = {
    field_id?: true
    name?: true
    type_db?: true
    type_field_form?: true
    type_form?: true
    options_select?: true
    mandatory?: true
    type_select?: true
    parent_field_id?: true
    order?: true
    _all?: true
  }

  export type FieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which field to aggregate.
     */
    where?: fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fields to fetch.
     */
    orderBy?: fieldOrderByWithRelationInput | fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fields
    **/
    _count?: true | FieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldMaxAggregateInputType
  }

  export type GetFieldAggregateType<T extends FieldAggregateArgs> = {
        [P in keyof T & keyof AggregateField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateField[P]>
      : GetScalarType<T[P], AggregateField[P]>
  }




  export type fieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fieldWhereInput
    orderBy?: fieldOrderByWithAggregationInput | fieldOrderByWithAggregationInput[]
    by: FieldScalarFieldEnum[] | FieldScalarFieldEnum
    having?: fieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldCountAggregateInputType | true
    _avg?: FieldAvgAggregateInputType
    _sum?: FieldSumAggregateInputType
    _min?: FieldMinAggregateInputType
    _max?: FieldMaxAggregateInputType
  }

  export type FieldGroupByOutputType = {
    field_id: number
    name: string | null
    type_db: string | null
    type_field_form: string | null
    type_form: string | null
    options_select: string | null
    mandatory: number | null
    type_select: string | null
    parent_field_id: number | null
    order: number | null
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  type GetFieldGroupByPayload<T extends fieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldGroupByOutputType[P]>
            : GetScalarType<T[P], FieldGroupByOutputType[P]>
        }
      >
    >


  export type fieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    field_id?: boolean
    name?: boolean
    type_db?: boolean
    type_field_form?: boolean
    type_form?: boolean
    options_select?: boolean
    mandatory?: boolean
    type_select?: boolean
    parent_field_id?: boolean
    order?: boolean
    form_field?: boolean | field$form_fieldArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>


  export type fieldSelectScalar = {
    field_id?: boolean
    name?: boolean
    type_db?: boolean
    type_field_form?: boolean
    type_form?: boolean
    options_select?: boolean
    mandatory?: boolean
    type_select?: boolean
    parent_field_id?: boolean
    order?: boolean
  }

  export type fieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_field?: boolean | field$form_fieldArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $fieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "field"
    objects: {
      form_field: Prisma.$form_fieldPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      field_id: number
      name: string | null
      type_db: string | null
      type_field_form: string | null
      type_form: string | null
      options_select: string | null
      mandatory: number | null
      type_select: string | null
      parent_field_id: number | null
      order: number | null
    }, ExtArgs["result"]["field"]>
    composites: {}
  }

  type fieldGetPayload<S extends boolean | null | undefined | fieldDefaultArgs> = $Result.GetResult<Prisma.$fieldPayload, S>

  type fieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<fieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FieldCountAggregateInputType | true
    }

  export interface fieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['field'], meta: { name: 'field' } }
    /**
     * Find zero or one Field that matches the filter.
     * @param {fieldFindUniqueArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends fieldFindUniqueArgs>(args: SelectSubset<T, fieldFindUniqueArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Field that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {fieldFindUniqueOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends fieldFindUniqueOrThrowArgs>(args: SelectSubset<T, fieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Field that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldFindFirstArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends fieldFindFirstArgs>(args?: SelectSubset<T, fieldFindFirstArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Field that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldFindFirstOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends fieldFindFirstOrThrowArgs>(args?: SelectSubset<T, fieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fields
     * const fields = await prisma.field.findMany()
     * 
     * // Get first 10 Fields
     * const fields = await prisma.field.findMany({ take: 10 })
     * 
     * // Only select the `field_id`
     * const fieldWithField_idOnly = await prisma.field.findMany({ select: { field_id: true } })
     * 
     */
    findMany<T extends fieldFindManyArgs>(args?: SelectSubset<T, fieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Field.
     * @param {fieldCreateArgs} args - Arguments to create a Field.
     * @example
     * // Create one Field
     * const Field = await prisma.field.create({
     *   data: {
     *     // ... data to create a Field
     *   }
     * })
     * 
     */
    create<T extends fieldCreateArgs>(args: SelectSubset<T, fieldCreateArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fields.
     * @param {fieldCreateManyArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends fieldCreateManyArgs>(args?: SelectSubset<T, fieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Field.
     * @param {fieldDeleteArgs} args - Arguments to delete one Field.
     * @example
     * // Delete one Field
     * const Field = await prisma.field.delete({
     *   where: {
     *     // ... filter to delete one Field
     *   }
     * })
     * 
     */
    delete<T extends fieldDeleteArgs>(args: SelectSubset<T, fieldDeleteArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Field.
     * @param {fieldUpdateArgs} args - Arguments to update one Field.
     * @example
     * // Update one Field
     * const field = await prisma.field.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends fieldUpdateArgs>(args: SelectSubset<T, fieldUpdateArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fields.
     * @param {fieldDeleteManyArgs} args - Arguments to filter Fields to delete.
     * @example
     * // Delete a few Fields
     * const { count } = await prisma.field.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends fieldDeleteManyArgs>(args?: SelectSubset<T, fieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fields
     * const field = await prisma.field.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends fieldUpdateManyArgs>(args: SelectSubset<T, fieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Field.
     * @param {fieldUpsertArgs} args - Arguments to update or create a Field.
     * @example
     * // Update or create a Field
     * const field = await prisma.field.upsert({
     *   create: {
     *     // ... data to create a Field
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Field we want to update
     *   }
     * })
     */
    upsert<T extends fieldUpsertArgs>(args: SelectSubset<T, fieldUpsertArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldCountArgs} args - Arguments to filter Fields to count.
     * @example
     * // Count the number of Fields
     * const count = await prisma.field.count({
     *   where: {
     *     // ... the filter for the Fields we want to count
     *   }
     * })
    **/
    count<T extends fieldCountArgs>(
      args?: Subset<T, fieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldAggregateArgs>(args: Subset<T, FieldAggregateArgs>): Prisma.PrismaPromise<GetFieldAggregateType<T>>

    /**
     * Group by Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fieldGroupByArgs['orderBy'] }
        : { orderBy?: fieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the field model
   */
  readonly fields: fieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for field.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form_field<T extends field$form_fieldArgs<ExtArgs> = {}>(args?: Subset<T, field$form_fieldArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the field model
   */ 
  interface fieldFieldRefs {
    readonly field_id: FieldRef<"field", 'Int'>
    readonly name: FieldRef<"field", 'String'>
    readonly type_db: FieldRef<"field", 'String'>
    readonly type_field_form: FieldRef<"field", 'String'>
    readonly type_form: FieldRef<"field", 'String'>
    readonly options_select: FieldRef<"field", 'String'>
    readonly mandatory: FieldRef<"field", 'Int'>
    readonly type_select: FieldRef<"field", 'String'>
    readonly parent_field_id: FieldRef<"field", 'Int'>
    readonly order: FieldRef<"field", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * field findUnique
   */
  export type fieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter, which field to fetch.
     */
    where: fieldWhereUniqueInput
  }

  /**
   * field findUniqueOrThrow
   */
  export type fieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter, which field to fetch.
     */
    where: fieldWhereUniqueInput
  }

  /**
   * field findFirst
   */
  export type fieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter, which field to fetch.
     */
    where?: fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fields to fetch.
     */
    orderBy?: fieldOrderByWithRelationInput | fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fields.
     */
    cursor?: fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * field findFirstOrThrow
   */
  export type fieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter, which field to fetch.
     */
    where?: fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fields to fetch.
     */
    orderBy?: fieldOrderByWithRelationInput | fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fields.
     */
    cursor?: fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * field findMany
   */
  export type fieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter, which fields to fetch.
     */
    where?: fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fields to fetch.
     */
    orderBy?: fieldOrderByWithRelationInput | fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fields.
     */
    cursor?: fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fields.
     */
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * field create
   */
  export type fieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * The data needed to create a field.
     */
    data?: XOR<fieldCreateInput, fieldUncheckedCreateInput>
  }

  /**
   * field createMany
   */
  export type fieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fields.
     */
    data: fieldCreateManyInput | fieldCreateManyInput[]
  }

  /**
   * field update
   */
  export type fieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * The data needed to update a field.
     */
    data: XOR<fieldUpdateInput, fieldUncheckedUpdateInput>
    /**
     * Choose, which field to update.
     */
    where: fieldWhereUniqueInput
  }

  /**
   * field updateMany
   */
  export type fieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fields.
     */
    data: XOR<fieldUpdateManyMutationInput, fieldUncheckedUpdateManyInput>
    /**
     * Filter which fields to update
     */
    where?: fieldWhereInput
  }

  /**
   * field upsert
   */
  export type fieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * The filter to search for the field to update in case it exists.
     */
    where: fieldWhereUniqueInput
    /**
     * In case the field found by the `where` argument doesn't exist, create a new field with this data.
     */
    create: XOR<fieldCreateInput, fieldUncheckedCreateInput>
    /**
     * In case the field was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fieldUpdateInput, fieldUncheckedUpdateInput>
  }

  /**
   * field delete
   */
  export type fieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    /**
     * Filter which field to delete.
     */
    where: fieldWhereUniqueInput
  }

  /**
   * field deleteMany
   */
  export type fieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fields to delete
     */
    where?: fieldWhereInput
  }

  /**
   * field.form_field
   */
  export type field$form_fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    where?: form_fieldWhereInput
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    cursor?: form_fieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_fieldScalarFieldEnum | Form_fieldScalarFieldEnum[]
  }

  /**
   * field without action
   */
  export type fieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
  }


  /**
   * Model form
   */

  export type AggregateForm = {
    _count: FormCountAggregateOutputType | null
    _avg: FormAvgAggregateOutputType | null
    _sum: FormSumAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  export type FormAvgAggregateOutputType = {
    form_id: number | null
    have_signature: number | null
  }

  export type FormSumAggregateOutputType = {
    form_id: number | null
    have_signature: number | null
  }

  export type FormMinAggregateOutputType = {
    form_id: number | null
    name: string | null
    route_app_movil: string | null
    icono_app_movil: string | null
    have_signature: number | null
  }

  export type FormMaxAggregateOutputType = {
    form_id: number | null
    name: string | null
    route_app_movil: string | null
    icono_app_movil: string | null
    have_signature: number | null
  }

  export type FormCountAggregateOutputType = {
    form_id: number
    name: number
    route_app_movil: number
    icono_app_movil: number
    have_signature: number
    _all: number
  }


  export type FormAvgAggregateInputType = {
    form_id?: true
    have_signature?: true
  }

  export type FormSumAggregateInputType = {
    form_id?: true
    have_signature?: true
  }

  export type FormMinAggregateInputType = {
    form_id?: true
    name?: true
    route_app_movil?: true
    icono_app_movil?: true
    have_signature?: true
  }

  export type FormMaxAggregateInputType = {
    form_id?: true
    name?: true
    route_app_movil?: true
    icono_app_movil?: true
    have_signature?: true
  }

  export type FormCountAggregateInputType = {
    form_id?: true
    name?: true
    route_app_movil?: true
    icono_app_movil?: true
    have_signature?: true
    _all?: true
  }

  export type FormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form to aggregate.
     */
    where?: formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formOrderByWithRelationInput | formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned forms
    **/
    _count?: true | FormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormMaxAggregateInputType
  }

  export type GetFormAggregateType<T extends FormAggregateArgs> = {
        [P in keyof T & keyof AggregateForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm[P]>
      : GetScalarType<T[P], AggregateForm[P]>
  }




  export type formGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: formWhereInput
    orderBy?: formOrderByWithAggregationInput | formOrderByWithAggregationInput[]
    by: FormScalarFieldEnum[] | FormScalarFieldEnum
    having?: formScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormCountAggregateInputType | true
    _avg?: FormAvgAggregateInputType
    _sum?: FormSumAggregateInputType
    _min?: FormMinAggregateInputType
    _max?: FormMaxAggregateInputType
  }

  export type FormGroupByOutputType = {
    form_id: number
    name: string
    route_app_movil: string | null
    icono_app_movil: string | null
    have_signature: number | null
    _count: FormCountAggregateOutputType | null
    _avg: FormAvgAggregateOutputType | null
    _sum: FormSumAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  type GetFormGroupByPayload<T extends formGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormGroupByOutputType[P]>
            : GetScalarType<T[P], FormGroupByOutputType[P]>
        }
      >
    >


  export type formSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    form_id?: boolean
    name?: boolean
    route_app_movil?: boolean
    icono_app_movil?: boolean
    have_signature?: boolean
    form_field?: boolean | form$form_fieldArgs<ExtArgs>
    form_photo_form?: boolean | form$form_photo_formArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>


  export type formSelectScalar = {
    form_id?: boolean
    name?: boolean
    route_app_movil?: boolean
    icono_app_movil?: boolean
    have_signature?: boolean
  }

  export type formInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_field?: boolean | form$form_fieldArgs<ExtArgs>
    form_photo_form?: boolean | form$form_photo_formArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $formPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "form"
    objects: {
      form_field: Prisma.$form_fieldPayload<ExtArgs>[]
      form_photo_form: Prisma.$form_photo_formPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      form_id: number
      name: string
      route_app_movil: string | null
      icono_app_movil: string | null
      have_signature: number | null
    }, ExtArgs["result"]["form"]>
    composites: {}
  }

  type formGetPayload<S extends boolean | null | undefined | formDefaultArgs> = $Result.GetResult<Prisma.$formPayload, S>

  type formCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<formFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormCountAggregateInputType | true
    }

  export interface formDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['form'], meta: { name: 'form' } }
    /**
     * Find zero or one Form that matches the filter.
     * @param {formFindUniqueArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends formFindUniqueArgs>(args: SelectSubset<T, formFindUniqueArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Form that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {formFindUniqueOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends formFindUniqueOrThrowArgs>(args: SelectSubset<T, formFindUniqueOrThrowArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formFindFirstArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends formFindFirstArgs>(args?: SelectSubset<T, formFindFirstArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formFindFirstOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends formFindFirstOrThrowArgs>(args?: SelectSubset<T, formFindFirstOrThrowArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms
     * const forms = await prisma.form.findMany()
     * 
     * // Get first 10 Forms
     * const forms = await prisma.form.findMany({ take: 10 })
     * 
     * // Only select the `form_id`
     * const formWithForm_idOnly = await prisma.form.findMany({ select: { form_id: true } })
     * 
     */
    findMany<T extends formFindManyArgs>(args?: SelectSubset<T, formFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Form.
     * @param {formCreateArgs} args - Arguments to create a Form.
     * @example
     * // Create one Form
     * const Form = await prisma.form.create({
     *   data: {
     *     // ... data to create a Form
     *   }
     * })
     * 
     */
    create<T extends formCreateArgs>(args: SelectSubset<T, formCreateArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Forms.
     * @param {formCreateManyArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends formCreateManyArgs>(args?: SelectSubset<T, formCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Form.
     * @param {formDeleteArgs} args - Arguments to delete one Form.
     * @example
     * // Delete one Form
     * const Form = await prisma.form.delete({
     *   where: {
     *     // ... filter to delete one Form
     *   }
     * })
     * 
     */
    delete<T extends formDeleteArgs>(args: SelectSubset<T, formDeleteArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Form.
     * @param {formUpdateArgs} args - Arguments to update one Form.
     * @example
     * // Update one Form
     * const form = await prisma.form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends formUpdateArgs>(args: SelectSubset<T, formUpdateArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Forms.
     * @param {formDeleteManyArgs} args - Arguments to filter Forms to delete.
     * @example
     * // Delete a few Forms
     * const { count } = await prisma.form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends formDeleteManyArgs>(args?: SelectSubset<T, formDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms
     * const form = await prisma.form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends formUpdateManyArgs>(args: SelectSubset<T, formUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form.
     * @param {formUpsertArgs} args - Arguments to update or create a Form.
     * @example
     * // Update or create a Form
     * const form = await prisma.form.upsert({
     *   create: {
     *     // ... data to create a Form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form we want to update
     *   }
     * })
     */
    upsert<T extends formUpsertArgs>(args: SelectSubset<T, formUpsertArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formCountArgs} args - Arguments to filter Forms to count.
     * @example
     * // Count the number of Forms
     * const count = await prisma.form.count({
     *   where: {
     *     // ... the filter for the Forms we want to count
     *   }
     * })
    **/
    count<T extends formCountArgs>(
      args?: Subset<T, formCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormAggregateArgs>(args: Subset<T, FormAggregateArgs>): Prisma.PrismaPromise<GetFormAggregateType<T>>

    /**
     * Group by Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends formGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: formGroupByArgs['orderBy'] }
        : { orderBy?: formGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, formGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the form model
   */
  readonly fields: formFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__formClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form_field<T extends form$form_fieldArgs<ExtArgs> = {}>(args?: Subset<T, form$form_fieldArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findMany"> | Null>
    form_photo_form<T extends form$form_photo_formArgs<ExtArgs> = {}>(args?: Subset<T, form$form_photo_formArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the form model
   */ 
  interface formFieldRefs {
    readonly form_id: FieldRef<"form", 'Int'>
    readonly name: FieldRef<"form", 'String'>
    readonly route_app_movil: FieldRef<"form", 'String'>
    readonly icono_app_movil: FieldRef<"form", 'String'>
    readonly have_signature: FieldRef<"form", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * form findUnique
   */
  export type formFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter, which form to fetch.
     */
    where: formWhereUniqueInput
  }

  /**
   * form findUniqueOrThrow
   */
  export type formFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter, which form to fetch.
     */
    where: formWhereUniqueInput
  }

  /**
   * form findFirst
   */
  export type formFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter, which form to fetch.
     */
    where?: formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formOrderByWithRelationInput | formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms.
     */
    cursor?: formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * form findFirstOrThrow
   */
  export type formFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter, which form to fetch.
     */
    where?: formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formOrderByWithRelationInput | formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms.
     */
    cursor?: formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * form findMany
   */
  export type formFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where?: formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formOrderByWithRelationInput | formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing forms.
     */
    cursor?: formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * form create
   */
  export type formCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * The data needed to create a form.
     */
    data: XOR<formCreateInput, formUncheckedCreateInput>
  }

  /**
   * form createMany
   */
  export type formCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many forms.
     */
    data: formCreateManyInput | formCreateManyInput[]
  }

  /**
   * form update
   */
  export type formUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * The data needed to update a form.
     */
    data: XOR<formUpdateInput, formUncheckedUpdateInput>
    /**
     * Choose, which form to update.
     */
    where: formWhereUniqueInput
  }

  /**
   * form updateMany
   */
  export type formUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update forms.
     */
    data: XOR<formUpdateManyMutationInput, formUncheckedUpdateManyInput>
    /**
     * Filter which forms to update
     */
    where?: formWhereInput
  }

  /**
   * form upsert
   */
  export type formUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * The filter to search for the form to update in case it exists.
     */
    where: formWhereUniqueInput
    /**
     * In case the form found by the `where` argument doesn't exist, create a new form with this data.
     */
    create: XOR<formCreateInput, formUncheckedCreateInput>
    /**
     * In case the form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<formUpdateInput, formUncheckedUpdateInput>
  }

  /**
   * form delete
   */
  export type formDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    /**
     * Filter which form to delete.
     */
    where: formWhereUniqueInput
  }

  /**
   * form deleteMany
   */
  export type formDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which forms to delete
     */
    where?: formWhereInput
  }

  /**
   * form.form_field
   */
  export type form$form_fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    where?: form_fieldWhereInput
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    cursor?: form_fieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_fieldScalarFieldEnum | Form_fieldScalarFieldEnum[]
  }

  /**
   * form.form_photo_form
   */
  export type form$form_photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    where?: form_photo_formWhereInput
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    cursor?: form_photo_formWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_photo_formScalarFieldEnum | Form_photo_formScalarFieldEnum[]
  }

  /**
   * form without action
   */
  export type formDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
  }


  /**
   * Model form_field
   */

  export type AggregateForm_field = {
    _count: Form_fieldCountAggregateOutputType | null
    _avg: Form_fieldAvgAggregateOutputType | null
    _sum: Form_fieldSumAggregateOutputType | null
    _min: Form_fieldMinAggregateOutputType | null
    _max: Form_fieldMaxAggregateOutputType | null
  }

  export type Form_fieldAvgAggregateOutputType = {
    id: number | null
    form_id: number | null
    field_id: number | null
  }

  export type Form_fieldSumAggregateOutputType = {
    id: number | null
    form_id: number | null
    field_id: number | null
  }

  export type Form_fieldMinAggregateOutputType = {
    id: number | null
    form_id: number | null
    field_id: number | null
    joined_at: Date | null
  }

  export type Form_fieldMaxAggregateOutputType = {
    id: number | null
    form_id: number | null
    field_id: number | null
    joined_at: Date | null
  }

  export type Form_fieldCountAggregateOutputType = {
    id: number
    form_id: number
    field_id: number
    joined_at: number
    _all: number
  }


  export type Form_fieldAvgAggregateInputType = {
    id?: true
    form_id?: true
    field_id?: true
  }

  export type Form_fieldSumAggregateInputType = {
    id?: true
    form_id?: true
    field_id?: true
  }

  export type Form_fieldMinAggregateInputType = {
    id?: true
    form_id?: true
    field_id?: true
    joined_at?: true
  }

  export type Form_fieldMaxAggregateInputType = {
    id?: true
    form_id?: true
    field_id?: true
    joined_at?: true
  }

  export type Form_fieldCountAggregateInputType = {
    id?: true
    form_id?: true
    field_id?: true
    joined_at?: true
    _all?: true
  }

  export type Form_fieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_field to aggregate.
     */
    where?: form_fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_fields to fetch.
     */
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: form_fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned form_fields
    **/
    _count?: true | Form_fieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Form_fieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Form_fieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Form_fieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Form_fieldMaxAggregateInputType
  }

  export type GetForm_fieldAggregateType<T extends Form_fieldAggregateArgs> = {
        [P in keyof T & keyof AggregateForm_field]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm_field[P]>
      : GetScalarType<T[P], AggregateForm_field[P]>
  }




  export type form_fieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_fieldWhereInput
    orderBy?: form_fieldOrderByWithAggregationInput | form_fieldOrderByWithAggregationInput[]
    by: Form_fieldScalarFieldEnum[] | Form_fieldScalarFieldEnum
    having?: form_fieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Form_fieldCountAggregateInputType | true
    _avg?: Form_fieldAvgAggregateInputType
    _sum?: Form_fieldSumAggregateInputType
    _min?: Form_fieldMinAggregateInputType
    _max?: Form_fieldMaxAggregateInputType
  }

  export type Form_fieldGroupByOutputType = {
    id: number
    form_id: number | null
    field_id: number | null
    joined_at: Date | null
    _count: Form_fieldCountAggregateOutputType | null
    _avg: Form_fieldAvgAggregateOutputType | null
    _sum: Form_fieldSumAggregateOutputType | null
    _min: Form_fieldMinAggregateOutputType | null
    _max: Form_fieldMaxAggregateOutputType | null
  }

  type GetForm_fieldGroupByPayload<T extends form_fieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Form_fieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Form_fieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Form_fieldGroupByOutputType[P]>
            : GetScalarType<T[P], Form_fieldGroupByOutputType[P]>
        }
      >
    >


  export type form_fieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    field_id?: boolean
    joined_at?: boolean
    field?: boolean | form_field$fieldArgs<ExtArgs>
    form?: boolean | form_field$formArgs<ExtArgs>
  }, ExtArgs["result"]["form_field"]>


  export type form_fieldSelectScalar = {
    id?: boolean
    form_id?: boolean
    field_id?: boolean
    joined_at?: boolean
  }

  export type form_fieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | form_field$fieldArgs<ExtArgs>
    form?: boolean | form_field$formArgs<ExtArgs>
  }

  export type $form_fieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "form_field"
    objects: {
      field: Prisma.$fieldPayload<ExtArgs> | null
      form: Prisma.$formPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      form_id: number | null
      field_id: number | null
      joined_at: Date | null
    }, ExtArgs["result"]["form_field"]>
    composites: {}
  }

  type form_fieldGetPayload<S extends boolean | null | undefined | form_fieldDefaultArgs> = $Result.GetResult<Prisma.$form_fieldPayload, S>

  type form_fieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<form_fieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Form_fieldCountAggregateInputType | true
    }

  export interface form_fieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['form_field'], meta: { name: 'form_field' } }
    /**
     * Find zero or one Form_field that matches the filter.
     * @param {form_fieldFindUniqueArgs} args - Arguments to find a Form_field
     * @example
     * // Get one Form_field
     * const form_field = await prisma.form_field.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends form_fieldFindUniqueArgs>(args: SelectSubset<T, form_fieldFindUniqueArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Form_field that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {form_fieldFindUniqueOrThrowArgs} args - Arguments to find a Form_field
     * @example
     * // Get one Form_field
     * const form_field = await prisma.form_field.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends form_fieldFindUniqueOrThrowArgs>(args: SelectSubset<T, form_fieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Form_field that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldFindFirstArgs} args - Arguments to find a Form_field
     * @example
     * // Get one Form_field
     * const form_field = await prisma.form_field.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends form_fieldFindFirstArgs>(args?: SelectSubset<T, form_fieldFindFirstArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Form_field that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldFindFirstOrThrowArgs} args - Arguments to find a Form_field
     * @example
     * // Get one Form_field
     * const form_field = await prisma.form_field.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends form_fieldFindFirstOrThrowArgs>(args?: SelectSubset<T, form_fieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Form_fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Form_fields
     * const form_fields = await prisma.form_field.findMany()
     * 
     * // Get first 10 Form_fields
     * const form_fields = await prisma.form_field.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const form_fieldWithIdOnly = await prisma.form_field.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends form_fieldFindManyArgs>(args?: SelectSubset<T, form_fieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Form_field.
     * @param {form_fieldCreateArgs} args - Arguments to create a Form_field.
     * @example
     * // Create one Form_field
     * const Form_field = await prisma.form_field.create({
     *   data: {
     *     // ... data to create a Form_field
     *   }
     * })
     * 
     */
    create<T extends form_fieldCreateArgs>(args: SelectSubset<T, form_fieldCreateArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Form_fields.
     * @param {form_fieldCreateManyArgs} args - Arguments to create many Form_fields.
     * @example
     * // Create many Form_fields
     * const form_field = await prisma.form_field.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends form_fieldCreateManyArgs>(args?: SelectSubset<T, form_fieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Form_field.
     * @param {form_fieldDeleteArgs} args - Arguments to delete one Form_field.
     * @example
     * // Delete one Form_field
     * const Form_field = await prisma.form_field.delete({
     *   where: {
     *     // ... filter to delete one Form_field
     *   }
     * })
     * 
     */
    delete<T extends form_fieldDeleteArgs>(args: SelectSubset<T, form_fieldDeleteArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Form_field.
     * @param {form_fieldUpdateArgs} args - Arguments to update one Form_field.
     * @example
     * // Update one Form_field
     * const form_field = await prisma.form_field.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends form_fieldUpdateArgs>(args: SelectSubset<T, form_fieldUpdateArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Form_fields.
     * @param {form_fieldDeleteManyArgs} args - Arguments to filter Form_fields to delete.
     * @example
     * // Delete a few Form_fields
     * const { count } = await prisma.form_field.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends form_fieldDeleteManyArgs>(args?: SelectSubset<T, form_fieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Form_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Form_fields
     * const form_field = await prisma.form_field.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends form_fieldUpdateManyArgs>(args: SelectSubset<T, form_fieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form_field.
     * @param {form_fieldUpsertArgs} args - Arguments to update or create a Form_field.
     * @example
     * // Update or create a Form_field
     * const form_field = await prisma.form_field.upsert({
     *   create: {
     *     // ... data to create a Form_field
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form_field we want to update
     *   }
     * })
     */
    upsert<T extends form_fieldUpsertArgs>(args: SelectSubset<T, form_fieldUpsertArgs<ExtArgs>>): Prisma__form_fieldClient<$Result.GetResult<Prisma.$form_fieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Form_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldCountArgs} args - Arguments to filter Form_fields to count.
     * @example
     * // Count the number of Form_fields
     * const count = await prisma.form_field.count({
     *   where: {
     *     // ... the filter for the Form_fields we want to count
     *   }
     * })
    **/
    count<T extends form_fieldCountArgs>(
      args?: Subset<T, form_fieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Form_fieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form_field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Form_fieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Form_fieldAggregateArgs>(args: Subset<T, Form_fieldAggregateArgs>): Prisma.PrismaPromise<GetForm_fieldAggregateType<T>>

    /**
     * Group by Form_field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_fieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends form_fieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: form_fieldGroupByArgs['orderBy'] }
        : { orderBy?: form_fieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, form_fieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForm_fieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the form_field model
   */
  readonly fields: form_fieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for form_field.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__form_fieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    field<T extends form_field$fieldArgs<ExtArgs> = {}>(args?: Subset<T, form_field$fieldArgs<ExtArgs>>): Prisma__fieldClient<$Result.GetResult<Prisma.$fieldPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    form<T extends form_field$formArgs<ExtArgs> = {}>(args?: Subset<T, form_field$formArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the form_field model
   */ 
  interface form_fieldFieldRefs {
    readonly id: FieldRef<"form_field", 'Int'>
    readonly form_id: FieldRef<"form_field", 'Int'>
    readonly field_id: FieldRef<"form_field", 'Int'>
    readonly joined_at: FieldRef<"form_field", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * form_field findUnique
   */
  export type form_fieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter, which form_field to fetch.
     */
    where: form_fieldWhereUniqueInput
  }

  /**
   * form_field findUniqueOrThrow
   */
  export type form_fieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter, which form_field to fetch.
     */
    where: form_fieldWhereUniqueInput
  }

  /**
   * form_field findFirst
   */
  export type form_fieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter, which form_field to fetch.
     */
    where?: form_fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_fields to fetch.
     */
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_fields.
     */
    cursor?: form_fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_fields.
     */
    distinct?: Form_fieldScalarFieldEnum | Form_fieldScalarFieldEnum[]
  }

  /**
   * form_field findFirstOrThrow
   */
  export type form_fieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter, which form_field to fetch.
     */
    where?: form_fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_fields to fetch.
     */
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_fields.
     */
    cursor?: form_fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_fields.
     */
    distinct?: Form_fieldScalarFieldEnum | Form_fieldScalarFieldEnum[]
  }

  /**
   * form_field findMany
   */
  export type form_fieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter, which form_fields to fetch.
     */
    where?: form_fieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_fields to fetch.
     */
    orderBy?: form_fieldOrderByWithRelationInput | form_fieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing form_fields.
     */
    cursor?: form_fieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_fields.
     */
    skip?: number
    distinct?: Form_fieldScalarFieldEnum | Form_fieldScalarFieldEnum[]
  }

  /**
   * form_field create
   */
  export type form_fieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * The data needed to create a form_field.
     */
    data?: XOR<form_fieldCreateInput, form_fieldUncheckedCreateInput>
  }

  /**
   * form_field createMany
   */
  export type form_fieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many form_fields.
     */
    data: form_fieldCreateManyInput | form_fieldCreateManyInput[]
  }

  /**
   * form_field update
   */
  export type form_fieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * The data needed to update a form_field.
     */
    data: XOR<form_fieldUpdateInput, form_fieldUncheckedUpdateInput>
    /**
     * Choose, which form_field to update.
     */
    where: form_fieldWhereUniqueInput
  }

  /**
   * form_field updateMany
   */
  export type form_fieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update form_fields.
     */
    data: XOR<form_fieldUpdateManyMutationInput, form_fieldUncheckedUpdateManyInput>
    /**
     * Filter which form_fields to update
     */
    where?: form_fieldWhereInput
  }

  /**
   * form_field upsert
   */
  export type form_fieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * The filter to search for the form_field to update in case it exists.
     */
    where: form_fieldWhereUniqueInput
    /**
     * In case the form_field found by the `where` argument doesn't exist, create a new form_field with this data.
     */
    create: XOR<form_fieldCreateInput, form_fieldUncheckedCreateInput>
    /**
     * In case the form_field was found with the provided `where` argument, update it with this data.
     */
    update: XOR<form_fieldUpdateInput, form_fieldUncheckedUpdateInput>
  }

  /**
   * form_field delete
   */
  export type form_fieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
    /**
     * Filter which form_field to delete.
     */
    where: form_fieldWhereUniqueInput
  }

  /**
   * form_field deleteMany
   */
  export type form_fieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_fields to delete
     */
    where?: form_fieldWhereInput
  }

  /**
   * form_field.field
   */
  export type form_field$fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the field
     */
    select?: fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fieldInclude<ExtArgs> | null
    where?: fieldWhereInput
  }

  /**
   * form_field.form
   */
  export type form_field$formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    where?: formWhereInput
  }

  /**
   * form_field without action
   */
  export type form_fieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_field
     */
    select?: form_fieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_fieldInclude<ExtArgs> | null
  }


  /**
   * Model form_photo_form
   */

  export type AggregateForm_photo_form = {
    _count: Form_photo_formCountAggregateOutputType | null
    _avg: Form_photo_formAvgAggregateOutputType | null
    _sum: Form_photo_formSumAggregateOutputType | null
    _min: Form_photo_formMinAggregateOutputType | null
    _max: Form_photo_formMaxAggregateOutputType | null
  }

  export type Form_photo_formAvgAggregateOutputType = {
    id: number | null
    form_id: number | null
    photo_form_id: number | null
  }

  export type Form_photo_formSumAggregateOutputType = {
    id: number | null
    form_id: number | null
    photo_form_id: number | null
  }

  export type Form_photo_formMinAggregateOutputType = {
    id: number | null
    form_id: number | null
    photo_form_id: number | null
  }

  export type Form_photo_formMaxAggregateOutputType = {
    id: number | null
    form_id: number | null
    photo_form_id: number | null
  }

  export type Form_photo_formCountAggregateOutputType = {
    id: number
    form_id: number
    photo_form_id: number
    _all: number
  }


  export type Form_photo_formAvgAggregateInputType = {
    id?: true
    form_id?: true
    photo_form_id?: true
  }

  export type Form_photo_formSumAggregateInputType = {
    id?: true
    form_id?: true
    photo_form_id?: true
  }

  export type Form_photo_formMinAggregateInputType = {
    id?: true
    form_id?: true
    photo_form_id?: true
  }

  export type Form_photo_formMaxAggregateInputType = {
    id?: true
    form_id?: true
    photo_form_id?: true
  }

  export type Form_photo_formCountAggregateInputType = {
    id?: true
    form_id?: true
    photo_form_id?: true
    _all?: true
  }

  export type Form_photo_formAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_photo_form to aggregate.
     */
    where?: form_photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_photo_forms to fetch.
     */
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: form_photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned form_photo_forms
    **/
    _count?: true | Form_photo_formCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Form_photo_formAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Form_photo_formSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Form_photo_formMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Form_photo_formMaxAggregateInputType
  }

  export type GetForm_photo_formAggregateType<T extends Form_photo_formAggregateArgs> = {
        [P in keyof T & keyof AggregateForm_photo_form]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm_photo_form[P]>
      : GetScalarType<T[P], AggregateForm_photo_form[P]>
  }




  export type form_photo_formGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_photo_formWhereInput
    orderBy?: form_photo_formOrderByWithAggregationInput | form_photo_formOrderByWithAggregationInput[]
    by: Form_photo_formScalarFieldEnum[] | Form_photo_formScalarFieldEnum
    having?: form_photo_formScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Form_photo_formCountAggregateInputType | true
    _avg?: Form_photo_formAvgAggregateInputType
    _sum?: Form_photo_formSumAggregateInputType
    _min?: Form_photo_formMinAggregateInputType
    _max?: Form_photo_formMaxAggregateInputType
  }

  export type Form_photo_formGroupByOutputType = {
    id: number
    form_id: number | null
    photo_form_id: number | null
    _count: Form_photo_formCountAggregateOutputType | null
    _avg: Form_photo_formAvgAggregateOutputType | null
    _sum: Form_photo_formSumAggregateOutputType | null
    _min: Form_photo_formMinAggregateOutputType | null
    _max: Form_photo_formMaxAggregateOutputType | null
  }

  type GetForm_photo_formGroupByPayload<T extends form_photo_formGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Form_photo_formGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Form_photo_formGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Form_photo_formGroupByOutputType[P]>
            : GetScalarType<T[P], Form_photo_formGroupByOutputType[P]>
        }
      >
    >


  export type form_photo_formSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    photo_form_id?: boolean
    form?: boolean | form_photo_form$formArgs<ExtArgs>
    photo_form?: boolean | form_photo_form$photo_formArgs<ExtArgs>
  }, ExtArgs["result"]["form_photo_form"]>


  export type form_photo_formSelectScalar = {
    id?: boolean
    form_id?: boolean
    photo_form_id?: boolean
  }

  export type form_photo_formInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | form_photo_form$formArgs<ExtArgs>
    photo_form?: boolean | form_photo_form$photo_formArgs<ExtArgs>
  }

  export type $form_photo_formPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "form_photo_form"
    objects: {
      form: Prisma.$formPayload<ExtArgs> | null
      photo_form: Prisma.$photo_formPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      form_id: number | null
      photo_form_id: number | null
    }, ExtArgs["result"]["form_photo_form"]>
    composites: {}
  }

  type form_photo_formGetPayload<S extends boolean | null | undefined | form_photo_formDefaultArgs> = $Result.GetResult<Prisma.$form_photo_formPayload, S>

  type form_photo_formCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<form_photo_formFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Form_photo_formCountAggregateInputType | true
    }

  export interface form_photo_formDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['form_photo_form'], meta: { name: 'form_photo_form' } }
    /**
     * Find zero or one Form_photo_form that matches the filter.
     * @param {form_photo_formFindUniqueArgs} args - Arguments to find a Form_photo_form
     * @example
     * // Get one Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends form_photo_formFindUniqueArgs>(args: SelectSubset<T, form_photo_formFindUniqueArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Form_photo_form that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {form_photo_formFindUniqueOrThrowArgs} args - Arguments to find a Form_photo_form
     * @example
     * // Get one Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends form_photo_formFindUniqueOrThrowArgs>(args: SelectSubset<T, form_photo_formFindUniqueOrThrowArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Form_photo_form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formFindFirstArgs} args - Arguments to find a Form_photo_form
     * @example
     * // Get one Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends form_photo_formFindFirstArgs>(args?: SelectSubset<T, form_photo_formFindFirstArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Form_photo_form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formFindFirstOrThrowArgs} args - Arguments to find a Form_photo_form
     * @example
     * // Get one Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends form_photo_formFindFirstOrThrowArgs>(args?: SelectSubset<T, form_photo_formFindFirstOrThrowArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Form_photo_forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Form_photo_forms
     * const form_photo_forms = await prisma.form_photo_form.findMany()
     * 
     * // Get first 10 Form_photo_forms
     * const form_photo_forms = await prisma.form_photo_form.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const form_photo_formWithIdOnly = await prisma.form_photo_form.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends form_photo_formFindManyArgs>(args?: SelectSubset<T, form_photo_formFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Form_photo_form.
     * @param {form_photo_formCreateArgs} args - Arguments to create a Form_photo_form.
     * @example
     * // Create one Form_photo_form
     * const Form_photo_form = await prisma.form_photo_form.create({
     *   data: {
     *     // ... data to create a Form_photo_form
     *   }
     * })
     * 
     */
    create<T extends form_photo_formCreateArgs>(args: SelectSubset<T, form_photo_formCreateArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Form_photo_forms.
     * @param {form_photo_formCreateManyArgs} args - Arguments to create many Form_photo_forms.
     * @example
     * // Create many Form_photo_forms
     * const form_photo_form = await prisma.form_photo_form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends form_photo_formCreateManyArgs>(args?: SelectSubset<T, form_photo_formCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Form_photo_form.
     * @param {form_photo_formDeleteArgs} args - Arguments to delete one Form_photo_form.
     * @example
     * // Delete one Form_photo_form
     * const Form_photo_form = await prisma.form_photo_form.delete({
     *   where: {
     *     // ... filter to delete one Form_photo_form
     *   }
     * })
     * 
     */
    delete<T extends form_photo_formDeleteArgs>(args: SelectSubset<T, form_photo_formDeleteArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Form_photo_form.
     * @param {form_photo_formUpdateArgs} args - Arguments to update one Form_photo_form.
     * @example
     * // Update one Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends form_photo_formUpdateArgs>(args: SelectSubset<T, form_photo_formUpdateArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Form_photo_forms.
     * @param {form_photo_formDeleteManyArgs} args - Arguments to filter Form_photo_forms to delete.
     * @example
     * // Delete a few Form_photo_forms
     * const { count } = await prisma.form_photo_form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends form_photo_formDeleteManyArgs>(args?: SelectSubset<T, form_photo_formDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Form_photo_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Form_photo_forms
     * const form_photo_form = await prisma.form_photo_form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends form_photo_formUpdateManyArgs>(args: SelectSubset<T, form_photo_formUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form_photo_form.
     * @param {form_photo_formUpsertArgs} args - Arguments to update or create a Form_photo_form.
     * @example
     * // Update or create a Form_photo_form
     * const form_photo_form = await prisma.form_photo_form.upsert({
     *   create: {
     *     // ... data to create a Form_photo_form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form_photo_form we want to update
     *   }
     * })
     */
    upsert<T extends form_photo_formUpsertArgs>(args: SelectSubset<T, form_photo_formUpsertArgs<ExtArgs>>): Prisma__form_photo_formClient<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Form_photo_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formCountArgs} args - Arguments to filter Form_photo_forms to count.
     * @example
     * // Count the number of Form_photo_forms
     * const count = await prisma.form_photo_form.count({
     *   where: {
     *     // ... the filter for the Form_photo_forms we want to count
     *   }
     * })
    **/
    count<T extends form_photo_formCountArgs>(
      args?: Subset<T, form_photo_formCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Form_photo_formCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form_photo_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Form_photo_formAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Form_photo_formAggregateArgs>(args: Subset<T, Form_photo_formAggregateArgs>): Prisma.PrismaPromise<GetForm_photo_formAggregateType<T>>

    /**
     * Group by Form_photo_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_photo_formGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends form_photo_formGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: form_photo_formGroupByArgs['orderBy'] }
        : { orderBy?: form_photo_formGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, form_photo_formGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForm_photo_formGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the form_photo_form model
   */
  readonly fields: form_photo_formFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for form_photo_form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__form_photo_formClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends form_photo_form$formArgs<ExtArgs> = {}>(args?: Subset<T, form_photo_form$formArgs<ExtArgs>>): Prisma__formClient<$Result.GetResult<Prisma.$formPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    photo_form<T extends form_photo_form$photo_formArgs<ExtArgs> = {}>(args?: Subset<T, form_photo_form$photo_formArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the form_photo_form model
   */ 
  interface form_photo_formFieldRefs {
    readonly id: FieldRef<"form_photo_form", 'Int'>
    readonly form_id: FieldRef<"form_photo_form", 'Int'>
    readonly photo_form_id: FieldRef<"form_photo_form", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * form_photo_form findUnique
   */
  export type form_photo_formFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter, which form_photo_form to fetch.
     */
    where: form_photo_formWhereUniqueInput
  }

  /**
   * form_photo_form findUniqueOrThrow
   */
  export type form_photo_formFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter, which form_photo_form to fetch.
     */
    where: form_photo_formWhereUniqueInput
  }

  /**
   * form_photo_form findFirst
   */
  export type form_photo_formFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter, which form_photo_form to fetch.
     */
    where?: form_photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_photo_forms to fetch.
     */
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_photo_forms.
     */
    cursor?: form_photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_photo_forms.
     */
    distinct?: Form_photo_formScalarFieldEnum | Form_photo_formScalarFieldEnum[]
  }

  /**
   * form_photo_form findFirstOrThrow
   */
  export type form_photo_formFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter, which form_photo_form to fetch.
     */
    where?: form_photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_photo_forms to fetch.
     */
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_photo_forms.
     */
    cursor?: form_photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_photo_forms.
     */
    distinct?: Form_photo_formScalarFieldEnum | Form_photo_formScalarFieldEnum[]
  }

  /**
   * form_photo_form findMany
   */
  export type form_photo_formFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter, which form_photo_forms to fetch.
     */
    where?: form_photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_photo_forms to fetch.
     */
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing form_photo_forms.
     */
    cursor?: form_photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_photo_forms.
     */
    skip?: number
    distinct?: Form_photo_formScalarFieldEnum | Form_photo_formScalarFieldEnum[]
  }

  /**
   * form_photo_form create
   */
  export type form_photo_formCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * The data needed to create a form_photo_form.
     */
    data?: XOR<form_photo_formCreateInput, form_photo_formUncheckedCreateInput>
  }

  /**
   * form_photo_form createMany
   */
  export type form_photo_formCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many form_photo_forms.
     */
    data: form_photo_formCreateManyInput | form_photo_formCreateManyInput[]
  }

  /**
   * form_photo_form update
   */
  export type form_photo_formUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * The data needed to update a form_photo_form.
     */
    data: XOR<form_photo_formUpdateInput, form_photo_formUncheckedUpdateInput>
    /**
     * Choose, which form_photo_form to update.
     */
    where: form_photo_formWhereUniqueInput
  }

  /**
   * form_photo_form updateMany
   */
  export type form_photo_formUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update form_photo_forms.
     */
    data: XOR<form_photo_formUpdateManyMutationInput, form_photo_formUncheckedUpdateManyInput>
    /**
     * Filter which form_photo_forms to update
     */
    where?: form_photo_formWhereInput
  }

  /**
   * form_photo_form upsert
   */
  export type form_photo_formUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * The filter to search for the form_photo_form to update in case it exists.
     */
    where: form_photo_formWhereUniqueInput
    /**
     * In case the form_photo_form found by the `where` argument doesn't exist, create a new form_photo_form with this data.
     */
    create: XOR<form_photo_formCreateInput, form_photo_formUncheckedCreateInput>
    /**
     * In case the form_photo_form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<form_photo_formUpdateInput, form_photo_formUncheckedUpdateInput>
  }

  /**
   * form_photo_form delete
   */
  export type form_photo_formDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    /**
     * Filter which form_photo_form to delete.
     */
    where: form_photo_formWhereUniqueInput
  }

  /**
   * form_photo_form deleteMany
   */
  export type form_photo_formDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_photo_forms to delete
     */
    where?: form_photo_formWhereInput
  }

  /**
   * form_photo_form.form
   */
  export type form_photo_form$formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form
     */
    select?: formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: formInclude<ExtArgs> | null
    where?: formWhereInput
  }

  /**
   * form_photo_form.photo_form
   */
  export type form_photo_form$photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    where?: photo_formWhereInput
  }

  /**
   * form_photo_form without action
   */
  export type form_photo_formDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
  }


  /**
   * Model photo_form
   */

  export type AggregatePhoto_form = {
    _count: Photo_formCountAggregateOutputType | null
    _avg: Photo_formAvgAggregateOutputType | null
    _sum: Photo_formSumAggregateOutputType | null
    _min: Photo_formMinAggregateOutputType | null
    _max: Photo_formMaxAggregateOutputType | null
  }

  export type Photo_formAvgAggregateOutputType = {
    photo_form_id: number | null
  }

  export type Photo_formSumAggregateOutputType = {
    photo_form_id: number | null
  }

  export type Photo_formMinAggregateOutputType = {
    photo_form_id: number | null
    name: string | null
  }

  export type Photo_formMaxAggregateOutputType = {
    photo_form_id: number | null
    name: string | null
  }

  export type Photo_formCountAggregateOutputType = {
    photo_form_id: number
    name: number
    _all: number
  }


  export type Photo_formAvgAggregateInputType = {
    photo_form_id?: true
  }

  export type Photo_formSumAggregateInputType = {
    photo_form_id?: true
  }

  export type Photo_formMinAggregateInputType = {
    photo_form_id?: true
    name?: true
  }

  export type Photo_formMaxAggregateInputType = {
    photo_form_id?: true
    name?: true
  }

  export type Photo_formCountAggregateInputType = {
    photo_form_id?: true
    name?: true
    _all?: true
  }

  export type Photo_formAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which photo_form to aggregate.
     */
    where?: photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photo_forms to fetch.
     */
    orderBy?: photo_formOrderByWithRelationInput | photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned photo_forms
    **/
    _count?: true | Photo_formCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Photo_formAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Photo_formSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Photo_formMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Photo_formMaxAggregateInputType
  }

  export type GetPhoto_formAggregateType<T extends Photo_formAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoto_form]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoto_form[P]>
      : GetScalarType<T[P], AggregatePhoto_form[P]>
  }




  export type photo_formGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: photo_formWhereInput
    orderBy?: photo_formOrderByWithAggregationInput | photo_formOrderByWithAggregationInput[]
    by: Photo_formScalarFieldEnum[] | Photo_formScalarFieldEnum
    having?: photo_formScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Photo_formCountAggregateInputType | true
    _avg?: Photo_formAvgAggregateInputType
    _sum?: Photo_formSumAggregateInputType
    _min?: Photo_formMinAggregateInputType
    _max?: Photo_formMaxAggregateInputType
  }

  export type Photo_formGroupByOutputType = {
    photo_form_id: number
    name: string | null
    _count: Photo_formCountAggregateOutputType | null
    _avg: Photo_formAvgAggregateOutputType | null
    _sum: Photo_formSumAggregateOutputType | null
    _min: Photo_formMinAggregateOutputType | null
    _max: Photo_formMaxAggregateOutputType | null
  }

  type GetPhoto_formGroupByPayload<T extends photo_formGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Photo_formGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Photo_formGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Photo_formGroupByOutputType[P]>
            : GetScalarType<T[P], Photo_formGroupByOutputType[P]>
        }
      >
    >


  export type photo_formSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    photo_form_id?: boolean
    name?: boolean
    form_photo_form?: boolean | photo_form$form_photo_formArgs<ExtArgs>
    _count?: boolean | Photo_formCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["photo_form"]>


  export type photo_formSelectScalar = {
    photo_form_id?: boolean
    name?: boolean
  }

  export type photo_formInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form_photo_form?: boolean | photo_form$form_photo_formArgs<ExtArgs>
    _count?: boolean | Photo_formCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $photo_formPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "photo_form"
    objects: {
      form_photo_form: Prisma.$form_photo_formPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      photo_form_id: number
      name: string | null
    }, ExtArgs["result"]["photo_form"]>
    composites: {}
  }

  type photo_formGetPayload<S extends boolean | null | undefined | photo_formDefaultArgs> = $Result.GetResult<Prisma.$photo_formPayload, S>

  type photo_formCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<photo_formFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Photo_formCountAggregateInputType | true
    }

  export interface photo_formDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['photo_form'], meta: { name: 'photo_form' } }
    /**
     * Find zero or one Photo_form that matches the filter.
     * @param {photo_formFindUniqueArgs} args - Arguments to find a Photo_form
     * @example
     * // Get one Photo_form
     * const photo_form = await prisma.photo_form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends photo_formFindUniqueArgs>(args: SelectSubset<T, photo_formFindUniqueArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Photo_form that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {photo_formFindUniqueOrThrowArgs} args - Arguments to find a Photo_form
     * @example
     * // Get one Photo_form
     * const photo_form = await prisma.photo_form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends photo_formFindUniqueOrThrowArgs>(args: SelectSubset<T, photo_formFindUniqueOrThrowArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Photo_form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formFindFirstArgs} args - Arguments to find a Photo_form
     * @example
     * // Get one Photo_form
     * const photo_form = await prisma.photo_form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends photo_formFindFirstArgs>(args?: SelectSubset<T, photo_formFindFirstArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Photo_form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formFindFirstOrThrowArgs} args - Arguments to find a Photo_form
     * @example
     * // Get one Photo_form
     * const photo_form = await prisma.photo_form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends photo_formFindFirstOrThrowArgs>(args?: SelectSubset<T, photo_formFindFirstOrThrowArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Photo_forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photo_forms
     * const photo_forms = await prisma.photo_form.findMany()
     * 
     * // Get first 10 Photo_forms
     * const photo_forms = await prisma.photo_form.findMany({ take: 10 })
     * 
     * // Only select the `photo_form_id`
     * const photo_formWithPhoto_form_idOnly = await prisma.photo_form.findMany({ select: { photo_form_id: true } })
     * 
     */
    findMany<T extends photo_formFindManyArgs>(args?: SelectSubset<T, photo_formFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Photo_form.
     * @param {photo_formCreateArgs} args - Arguments to create a Photo_form.
     * @example
     * // Create one Photo_form
     * const Photo_form = await prisma.photo_form.create({
     *   data: {
     *     // ... data to create a Photo_form
     *   }
     * })
     * 
     */
    create<T extends photo_formCreateArgs>(args: SelectSubset<T, photo_formCreateArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Photo_forms.
     * @param {photo_formCreateManyArgs} args - Arguments to create many Photo_forms.
     * @example
     * // Create many Photo_forms
     * const photo_form = await prisma.photo_form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends photo_formCreateManyArgs>(args?: SelectSubset<T, photo_formCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Photo_form.
     * @param {photo_formDeleteArgs} args - Arguments to delete one Photo_form.
     * @example
     * // Delete one Photo_form
     * const Photo_form = await prisma.photo_form.delete({
     *   where: {
     *     // ... filter to delete one Photo_form
     *   }
     * })
     * 
     */
    delete<T extends photo_formDeleteArgs>(args: SelectSubset<T, photo_formDeleteArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Photo_form.
     * @param {photo_formUpdateArgs} args - Arguments to update one Photo_form.
     * @example
     * // Update one Photo_form
     * const photo_form = await prisma.photo_form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends photo_formUpdateArgs>(args: SelectSubset<T, photo_formUpdateArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Photo_forms.
     * @param {photo_formDeleteManyArgs} args - Arguments to filter Photo_forms to delete.
     * @example
     * // Delete a few Photo_forms
     * const { count } = await prisma.photo_form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends photo_formDeleteManyArgs>(args?: SelectSubset<T, photo_formDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photo_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photo_forms
     * const photo_form = await prisma.photo_form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends photo_formUpdateManyArgs>(args: SelectSubset<T, photo_formUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photo_form.
     * @param {photo_formUpsertArgs} args - Arguments to update or create a Photo_form.
     * @example
     * // Update or create a Photo_form
     * const photo_form = await prisma.photo_form.upsert({
     *   create: {
     *     // ... data to create a Photo_form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo_form we want to update
     *   }
     * })
     */
    upsert<T extends photo_formUpsertArgs>(args: SelectSubset<T, photo_formUpsertArgs<ExtArgs>>): Prisma__photo_formClient<$Result.GetResult<Prisma.$photo_formPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Photo_forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formCountArgs} args - Arguments to filter Photo_forms to count.
     * @example
     * // Count the number of Photo_forms
     * const count = await prisma.photo_form.count({
     *   where: {
     *     // ... the filter for the Photo_forms we want to count
     *   }
     * })
    **/
    count<T extends photo_formCountArgs>(
      args?: Subset<T, photo_formCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Photo_formCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photo_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Photo_formAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Photo_formAggregateArgs>(args: Subset<T, Photo_formAggregateArgs>): Prisma.PrismaPromise<GetPhoto_formAggregateType<T>>

    /**
     * Group by Photo_form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {photo_formGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends photo_formGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: photo_formGroupByArgs['orderBy'] }
        : { orderBy?: photo_formGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, photo_formGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoto_formGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the photo_form model
   */
  readonly fields: photo_formFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for photo_form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__photo_formClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form_photo_form<T extends photo_form$form_photo_formArgs<ExtArgs> = {}>(args?: Subset<T, photo_form$form_photo_formArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_photo_formPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the photo_form model
   */ 
  interface photo_formFieldRefs {
    readonly photo_form_id: FieldRef<"photo_form", 'Int'>
    readonly name: FieldRef<"photo_form", 'String'>
  }
    

  // Custom InputTypes
  /**
   * photo_form findUnique
   */
  export type photo_formFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter, which photo_form to fetch.
     */
    where: photo_formWhereUniqueInput
  }

  /**
   * photo_form findUniqueOrThrow
   */
  export type photo_formFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter, which photo_form to fetch.
     */
    where: photo_formWhereUniqueInput
  }

  /**
   * photo_form findFirst
   */
  export type photo_formFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter, which photo_form to fetch.
     */
    where?: photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photo_forms to fetch.
     */
    orderBy?: photo_formOrderByWithRelationInput | photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photo_forms.
     */
    cursor?: photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photo_forms.
     */
    distinct?: Photo_formScalarFieldEnum | Photo_formScalarFieldEnum[]
  }

  /**
   * photo_form findFirstOrThrow
   */
  export type photo_formFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter, which photo_form to fetch.
     */
    where?: photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photo_forms to fetch.
     */
    orderBy?: photo_formOrderByWithRelationInput | photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for photo_forms.
     */
    cursor?: photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photo_forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of photo_forms.
     */
    distinct?: Photo_formScalarFieldEnum | Photo_formScalarFieldEnum[]
  }

  /**
   * photo_form findMany
   */
  export type photo_formFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter, which photo_forms to fetch.
     */
    where?: photo_formWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of photo_forms to fetch.
     */
    orderBy?: photo_formOrderByWithRelationInput | photo_formOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing photo_forms.
     */
    cursor?: photo_formWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` photo_forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` photo_forms.
     */
    skip?: number
    distinct?: Photo_formScalarFieldEnum | Photo_formScalarFieldEnum[]
  }

  /**
   * photo_form create
   */
  export type photo_formCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * The data needed to create a photo_form.
     */
    data?: XOR<photo_formCreateInput, photo_formUncheckedCreateInput>
  }

  /**
   * photo_form createMany
   */
  export type photo_formCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many photo_forms.
     */
    data: photo_formCreateManyInput | photo_formCreateManyInput[]
  }

  /**
   * photo_form update
   */
  export type photo_formUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * The data needed to update a photo_form.
     */
    data: XOR<photo_formUpdateInput, photo_formUncheckedUpdateInput>
    /**
     * Choose, which photo_form to update.
     */
    where: photo_formWhereUniqueInput
  }

  /**
   * photo_form updateMany
   */
  export type photo_formUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update photo_forms.
     */
    data: XOR<photo_formUpdateManyMutationInput, photo_formUncheckedUpdateManyInput>
    /**
     * Filter which photo_forms to update
     */
    where?: photo_formWhereInput
  }

  /**
   * photo_form upsert
   */
  export type photo_formUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * The filter to search for the photo_form to update in case it exists.
     */
    where: photo_formWhereUniqueInput
    /**
     * In case the photo_form found by the `where` argument doesn't exist, create a new photo_form with this data.
     */
    create: XOR<photo_formCreateInput, photo_formUncheckedCreateInput>
    /**
     * In case the photo_form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<photo_formUpdateInput, photo_formUncheckedUpdateInput>
  }

  /**
   * photo_form delete
   */
  export type photo_formDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
    /**
     * Filter which photo_form to delete.
     */
    where: photo_formWhereUniqueInput
  }

  /**
   * photo_form deleteMany
   */
  export type photo_formDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which photo_forms to delete
     */
    where?: photo_formWhereInput
  }

  /**
   * photo_form.form_photo_form
   */
  export type photo_form$form_photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_photo_form
     */
    select?: form_photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: form_photo_formInclude<ExtArgs> | null
    where?: form_photo_formWhereInput
    orderBy?: form_photo_formOrderByWithRelationInput | form_photo_formOrderByWithRelationInput[]
    cursor?: form_photo_formWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_photo_formScalarFieldEnum | Form_photo_formScalarFieldEnum[]
  }

  /**
   * photo_form without action
   */
  export type photo_formDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the photo_form
     */
    select?: photo_formSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: photo_formInclude<ExtArgs> | null
  }


  /**
   * Model place
   */

  export type AggregatePlace = {
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  export type PlaceAvgAggregateOutputType = {
    place_id: number | null
    latitude: Decimal | null
    longitude: Decimal | null
    active: number | null
  }

  export type PlaceSumAggregateOutputType = {
    place_id: number | null
    latitude: Decimal | null
    longitude: Decimal | null
    active: number | null
  }

  export type PlaceMinAggregateOutputType = {
    place_id: number | null
    name: string | null
    logo: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    active: number | null
  }

  export type PlaceMaxAggregateOutputType = {
    place_id: number | null
    name: string | null
    logo: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    active: number | null
  }

  export type PlaceCountAggregateOutputType = {
    place_id: number
    name: number
    logo: number
    latitude: number
    longitude: number
    active: number
    _all: number
  }


  export type PlaceAvgAggregateInputType = {
    place_id?: true
    latitude?: true
    longitude?: true
    active?: true
  }

  export type PlaceSumAggregateInputType = {
    place_id?: true
    latitude?: true
    longitude?: true
    active?: true
  }

  export type PlaceMinAggregateInputType = {
    place_id?: true
    name?: true
    logo?: true
    latitude?: true
    longitude?: true
    active?: true
  }

  export type PlaceMaxAggregateInputType = {
    place_id?: true
    name?: true
    logo?: true
    latitude?: true
    longitude?: true
    active?: true
  }

  export type PlaceCountAggregateInputType = {
    place_id?: true
    name?: true
    logo?: true
    latitude?: true
    longitude?: true
    active?: true
    _all?: true
  }

  export type PlaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which place to aggregate.
     */
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     */
    orderBy?: placeOrderByWithRelationInput | placeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned places
    **/
    _count?: true | PlaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaceMaxAggregateInputType
  }

  export type GetPlaceAggregateType<T extends PlaceAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace[P]>
      : GetScalarType<T[P], AggregatePlace[P]>
  }




  export type placeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: placeWhereInput
    orderBy?: placeOrderByWithAggregationInput | placeOrderByWithAggregationInput[]
    by: PlaceScalarFieldEnum[] | PlaceScalarFieldEnum
    having?: placeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaceCountAggregateInputType | true
    _avg?: PlaceAvgAggregateInputType
    _sum?: PlaceSumAggregateInputType
    _min?: PlaceMinAggregateInputType
    _max?: PlaceMaxAggregateInputType
  }

  export type PlaceGroupByOutputType = {
    place_id: number
    name: string | null
    logo: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    active: number | null
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  type GetPlaceGroupByPayload<T extends placeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaceGroupByOutputType[P]>
            : GetScalarType<T[P], PlaceGroupByOutputType[P]>
        }
      >
    >


  export type placeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    place_id?: boolean
    name?: boolean
    logo?: boolean
    latitude?: boolean
    longitude?: boolean
    active?: boolean
    place_user?: boolean | place$place_userArgs<ExtArgs>
    register_form_dynamic?: boolean | place$register_form_dynamicArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["place"]>


  export type placeSelectScalar = {
    place_id?: boolean
    name?: boolean
    logo?: boolean
    latitude?: boolean
    longitude?: boolean
    active?: boolean
  }

  export type placeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place_user?: boolean | place$place_userArgs<ExtArgs>
    register_form_dynamic?: boolean | place$register_form_dynamicArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $placePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "place"
    objects: {
      place_user: Prisma.$place_userPayload<ExtArgs>[]
      register_form_dynamic: Prisma.$register_form_dynamicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      place_id: number
      name: string | null
      logo: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      active: number | null
    }, ExtArgs["result"]["place"]>
    composites: {}
  }

  type placeGetPayload<S extends boolean | null | undefined | placeDefaultArgs> = $Result.GetResult<Prisma.$placePayload, S>

  type placeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<placeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaceCountAggregateInputType | true
    }

  export interface placeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['place'], meta: { name: 'place' } }
    /**
     * Find zero or one Place that matches the filter.
     * @param {placeFindUniqueArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends placeFindUniqueArgs>(args: SelectSubset<T, placeFindUniqueArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Place that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {placeFindUniqueOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends placeFindUniqueOrThrowArgs>(args: SelectSubset<T, placeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Place that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeFindFirstArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends placeFindFirstArgs>(args?: SelectSubset<T, placeFindFirstArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Place that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeFindFirstOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends placeFindFirstOrThrowArgs>(args?: SelectSubset<T, placeFindFirstOrThrowArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Places
     * const places = await prisma.place.findMany()
     * 
     * // Get first 10 Places
     * const places = await prisma.place.findMany({ take: 10 })
     * 
     * // Only select the `place_id`
     * const placeWithPlace_idOnly = await prisma.place.findMany({ select: { place_id: true } })
     * 
     */
    findMany<T extends placeFindManyArgs>(args?: SelectSubset<T, placeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Place.
     * @param {placeCreateArgs} args - Arguments to create a Place.
     * @example
     * // Create one Place
     * const Place = await prisma.place.create({
     *   data: {
     *     // ... data to create a Place
     *   }
     * })
     * 
     */
    create<T extends placeCreateArgs>(args: SelectSubset<T, placeCreateArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Places.
     * @param {placeCreateManyArgs} args - Arguments to create many Places.
     * @example
     * // Create many Places
     * const place = await prisma.place.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends placeCreateManyArgs>(args?: SelectSubset<T, placeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Place.
     * @param {placeDeleteArgs} args - Arguments to delete one Place.
     * @example
     * // Delete one Place
     * const Place = await prisma.place.delete({
     *   where: {
     *     // ... filter to delete one Place
     *   }
     * })
     * 
     */
    delete<T extends placeDeleteArgs>(args: SelectSubset<T, placeDeleteArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Place.
     * @param {placeUpdateArgs} args - Arguments to update one Place.
     * @example
     * // Update one Place
     * const place = await prisma.place.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends placeUpdateArgs>(args: SelectSubset<T, placeUpdateArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Places.
     * @param {placeDeleteManyArgs} args - Arguments to filter Places to delete.
     * @example
     * // Delete a few Places
     * const { count } = await prisma.place.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends placeDeleteManyArgs>(args?: SelectSubset<T, placeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Places
     * const place = await prisma.place.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends placeUpdateManyArgs>(args: SelectSubset<T, placeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Place.
     * @param {placeUpsertArgs} args - Arguments to update or create a Place.
     * @example
     * // Update or create a Place
     * const place = await prisma.place.upsert({
     *   create: {
     *     // ... data to create a Place
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place we want to update
     *   }
     * })
     */
    upsert<T extends placeUpsertArgs>(args: SelectSubset<T, placeUpsertArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeCountArgs} args - Arguments to filter Places to count.
     * @example
     * // Count the number of Places
     * const count = await prisma.place.count({
     *   where: {
     *     // ... the filter for the Places we want to count
     *   }
     * })
    **/
    count<T extends placeCountArgs>(
      args?: Subset<T, placeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaceAggregateArgs>(args: Subset<T, PlaceAggregateArgs>): Prisma.PrismaPromise<GetPlaceAggregateType<T>>

    /**
     * Group by Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {placeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends placeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: placeGroupByArgs['orderBy'] }
        : { orderBy?: placeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, placeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the place model
   */
  readonly fields: placeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for place.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__placeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place_user<T extends place$place_userArgs<ExtArgs> = {}>(args?: Subset<T, place$place_userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findMany"> | Null>
    register_form_dynamic<T extends place$register_form_dynamicArgs<ExtArgs> = {}>(args?: Subset<T, place$register_form_dynamicArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the place model
   */ 
  interface placeFieldRefs {
    readonly place_id: FieldRef<"place", 'Int'>
    readonly name: FieldRef<"place", 'String'>
    readonly logo: FieldRef<"place", 'String'>
    readonly latitude: FieldRef<"place", 'Decimal'>
    readonly longitude: FieldRef<"place", 'Decimal'>
    readonly active: FieldRef<"place", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * place findUnique
   */
  export type placeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter, which place to fetch.
     */
    where: placeWhereUniqueInput
  }

  /**
   * place findUniqueOrThrow
   */
  export type placeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter, which place to fetch.
     */
    where: placeWhereUniqueInput
  }

  /**
   * place findFirst
   */
  export type placeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter, which place to fetch.
     */
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     */
    orderBy?: placeOrderByWithRelationInput | placeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for places.
     */
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * place findFirstOrThrow
   */
  export type placeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter, which place to fetch.
     */
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     */
    orderBy?: placeOrderByWithRelationInput | placeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for places.
     */
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * place findMany
   */
  export type placeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter, which places to fetch.
     */
    where?: placeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of places to fetch.
     */
    orderBy?: placeOrderByWithRelationInput | placeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing places.
     */
    cursor?: placeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` places.
     */
    skip?: number
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * place create
   */
  export type placeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * The data needed to create a place.
     */
    data?: XOR<placeCreateInput, placeUncheckedCreateInput>
  }

  /**
   * place createMany
   */
  export type placeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many places.
     */
    data: placeCreateManyInput | placeCreateManyInput[]
  }

  /**
   * place update
   */
  export type placeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * The data needed to update a place.
     */
    data: XOR<placeUpdateInput, placeUncheckedUpdateInput>
    /**
     * Choose, which place to update.
     */
    where: placeWhereUniqueInput
  }

  /**
   * place updateMany
   */
  export type placeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update places.
     */
    data: XOR<placeUpdateManyMutationInput, placeUncheckedUpdateManyInput>
    /**
     * Filter which places to update
     */
    where?: placeWhereInput
  }

  /**
   * place upsert
   */
  export type placeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * The filter to search for the place to update in case it exists.
     */
    where: placeWhereUniqueInput
    /**
     * In case the place found by the `where` argument doesn't exist, create a new place with this data.
     */
    create: XOR<placeCreateInput, placeUncheckedCreateInput>
    /**
     * In case the place was found with the provided `where` argument, update it with this data.
     */
    update: XOR<placeUpdateInput, placeUncheckedUpdateInput>
  }

  /**
   * place delete
   */
  export type placeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    /**
     * Filter which place to delete.
     */
    where: placeWhereUniqueInput
  }

  /**
   * place deleteMany
   */
  export type placeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which places to delete
     */
    where?: placeWhereInput
  }

  /**
   * place.place_user
   */
  export type place$place_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    where?: place_userWhereInput
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    cursor?: place_userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Place_userScalarFieldEnum | Place_userScalarFieldEnum[]
  }

  /**
   * place.register_form_dynamic
   */
  export type place$register_form_dynamicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    where?: register_form_dynamicWhereInput
    orderBy?: register_form_dynamicOrderByWithRelationInput | register_form_dynamicOrderByWithRelationInput[]
    cursor?: register_form_dynamicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Register_form_dynamicScalarFieldEnum | Register_form_dynamicScalarFieldEnum[]
  }

  /**
   * place without action
   */
  export type placeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
  }


  /**
   * Model place_user
   */

  export type AggregatePlace_user = {
    _count: Place_userCountAggregateOutputType | null
    _avg: Place_userAvgAggregateOutputType | null
    _sum: Place_userSumAggregateOutputType | null
    _min: Place_userMinAggregateOutputType | null
    _max: Place_userMaxAggregateOutputType | null
  }

  export type Place_userAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    place_id: number | null
  }

  export type Place_userSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    place_id: number | null
  }

  export type Place_userMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    place_id: number | null
    joined_at: Date | null
  }

  export type Place_userMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    place_id: number | null
    joined_at: Date | null
  }

  export type Place_userCountAggregateOutputType = {
    id: number
    user_id: number
    place_id: number
    joined_at: number
    _all: number
  }


  export type Place_userAvgAggregateInputType = {
    id?: true
    user_id?: true
    place_id?: true
  }

  export type Place_userSumAggregateInputType = {
    id?: true
    user_id?: true
    place_id?: true
  }

  export type Place_userMinAggregateInputType = {
    id?: true
    user_id?: true
    place_id?: true
    joined_at?: true
  }

  export type Place_userMaxAggregateInputType = {
    id?: true
    user_id?: true
    place_id?: true
    joined_at?: true
  }

  export type Place_userCountAggregateInputType = {
    id?: true
    user_id?: true
    place_id?: true
    joined_at?: true
    _all?: true
  }

  export type Place_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which place_user to aggregate.
     */
    where?: place_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_users to fetch.
     */
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: place_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned place_users
    **/
    _count?: true | Place_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Place_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Place_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Place_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Place_userMaxAggregateInputType
  }

  export type GetPlace_userAggregateType<T extends Place_userAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace_user[P]>
      : GetScalarType<T[P], AggregatePlace_user[P]>
  }




  export type place_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: place_userWhereInput
    orderBy?: place_userOrderByWithAggregationInput | place_userOrderByWithAggregationInput[]
    by: Place_userScalarFieldEnum[] | Place_userScalarFieldEnum
    having?: place_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Place_userCountAggregateInputType | true
    _avg?: Place_userAvgAggregateInputType
    _sum?: Place_userSumAggregateInputType
    _min?: Place_userMinAggregateInputType
    _max?: Place_userMaxAggregateInputType
  }

  export type Place_userGroupByOutputType = {
    id: number
    user_id: number | null
    place_id: number | null
    joined_at: Date | null
    _count: Place_userCountAggregateOutputType | null
    _avg: Place_userAvgAggregateOutputType | null
    _sum: Place_userSumAggregateOutputType | null
    _min: Place_userMinAggregateOutputType | null
    _max: Place_userMaxAggregateOutputType | null
  }

  type GetPlace_userGroupByPayload<T extends place_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Place_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Place_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Place_userGroupByOutputType[P]>
            : GetScalarType<T[P], Place_userGroupByOutputType[P]>
        }
      >
    >


  export type place_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    place_id?: boolean
    joined_at?: boolean
    place?: boolean | place_user$placeArgs<ExtArgs>
    user?: boolean | place_user$userArgs<ExtArgs>
  }, ExtArgs["result"]["place_user"]>


  export type place_userSelectScalar = {
    id?: boolean
    user_id?: boolean
    place_id?: boolean
    joined_at?: boolean
  }

  export type place_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | place_user$placeArgs<ExtArgs>
    user?: boolean | place_user$userArgs<ExtArgs>
  }

  export type $place_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "place_user"
    objects: {
      place: Prisma.$placePayload<ExtArgs> | null
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      place_id: number | null
      joined_at: Date | null
    }, ExtArgs["result"]["place_user"]>
    composites: {}
  }

  type place_userGetPayload<S extends boolean | null | undefined | place_userDefaultArgs> = $Result.GetResult<Prisma.$place_userPayload, S>

  type place_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<place_userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Place_userCountAggregateInputType | true
    }

  export interface place_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['place_user'], meta: { name: 'place_user' } }
    /**
     * Find zero or one Place_user that matches the filter.
     * @param {place_userFindUniqueArgs} args - Arguments to find a Place_user
     * @example
     * // Get one Place_user
     * const place_user = await prisma.place_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends place_userFindUniqueArgs>(args: SelectSubset<T, place_userFindUniqueArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Place_user that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {place_userFindUniqueOrThrowArgs} args - Arguments to find a Place_user
     * @example
     * // Get one Place_user
     * const place_user = await prisma.place_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends place_userFindUniqueOrThrowArgs>(args: SelectSubset<T, place_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Place_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userFindFirstArgs} args - Arguments to find a Place_user
     * @example
     * // Get one Place_user
     * const place_user = await prisma.place_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends place_userFindFirstArgs>(args?: SelectSubset<T, place_userFindFirstArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Place_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userFindFirstOrThrowArgs} args - Arguments to find a Place_user
     * @example
     * // Get one Place_user
     * const place_user = await prisma.place_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends place_userFindFirstOrThrowArgs>(args?: SelectSubset<T, place_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Place_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Place_users
     * const place_users = await prisma.place_user.findMany()
     * 
     * // Get first 10 Place_users
     * const place_users = await prisma.place_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const place_userWithIdOnly = await prisma.place_user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends place_userFindManyArgs>(args?: SelectSubset<T, place_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Place_user.
     * @param {place_userCreateArgs} args - Arguments to create a Place_user.
     * @example
     * // Create one Place_user
     * const Place_user = await prisma.place_user.create({
     *   data: {
     *     // ... data to create a Place_user
     *   }
     * })
     * 
     */
    create<T extends place_userCreateArgs>(args: SelectSubset<T, place_userCreateArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Place_users.
     * @param {place_userCreateManyArgs} args - Arguments to create many Place_users.
     * @example
     * // Create many Place_users
     * const place_user = await prisma.place_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends place_userCreateManyArgs>(args?: SelectSubset<T, place_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Place_user.
     * @param {place_userDeleteArgs} args - Arguments to delete one Place_user.
     * @example
     * // Delete one Place_user
     * const Place_user = await prisma.place_user.delete({
     *   where: {
     *     // ... filter to delete one Place_user
     *   }
     * })
     * 
     */
    delete<T extends place_userDeleteArgs>(args: SelectSubset<T, place_userDeleteArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Place_user.
     * @param {place_userUpdateArgs} args - Arguments to update one Place_user.
     * @example
     * // Update one Place_user
     * const place_user = await prisma.place_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends place_userUpdateArgs>(args: SelectSubset<T, place_userUpdateArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Place_users.
     * @param {place_userDeleteManyArgs} args - Arguments to filter Place_users to delete.
     * @example
     * // Delete a few Place_users
     * const { count } = await prisma.place_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends place_userDeleteManyArgs>(args?: SelectSubset<T, place_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Place_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Place_users
     * const place_user = await prisma.place_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends place_userUpdateManyArgs>(args: SelectSubset<T, place_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Place_user.
     * @param {place_userUpsertArgs} args - Arguments to update or create a Place_user.
     * @example
     * // Update or create a Place_user
     * const place_user = await prisma.place_user.upsert({
     *   create: {
     *     // ... data to create a Place_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place_user we want to update
     *   }
     * })
     */
    upsert<T extends place_userUpsertArgs>(args: SelectSubset<T, place_userUpsertArgs<ExtArgs>>): Prisma__place_userClient<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Place_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userCountArgs} args - Arguments to filter Place_users to count.
     * @example
     * // Count the number of Place_users
     * const count = await prisma.place_user.count({
     *   where: {
     *     // ... the filter for the Place_users we want to count
     *   }
     * })
    **/
    count<T extends place_userCountArgs>(
      args?: Subset<T, place_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Place_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Place_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Place_userAggregateArgs>(args: Subset<T, Place_userAggregateArgs>): Prisma.PrismaPromise<GetPlace_userAggregateType<T>>

    /**
     * Group by Place_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {place_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends place_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: place_userGroupByArgs['orderBy'] }
        : { orderBy?: place_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, place_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlace_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the place_user model
   */
  readonly fields: place_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for place_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__place_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends place_user$placeArgs<ExtArgs> = {}>(args?: Subset<T, place_user$placeArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends place_user$userArgs<ExtArgs> = {}>(args?: Subset<T, place_user$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the place_user model
   */ 
  interface place_userFieldRefs {
    readonly id: FieldRef<"place_user", 'Int'>
    readonly user_id: FieldRef<"place_user", 'Int'>
    readonly place_id: FieldRef<"place_user", 'Int'>
    readonly joined_at: FieldRef<"place_user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * place_user findUnique
   */
  export type place_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter, which place_user to fetch.
     */
    where: place_userWhereUniqueInput
  }

  /**
   * place_user findUniqueOrThrow
   */
  export type place_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter, which place_user to fetch.
     */
    where: place_userWhereUniqueInput
  }

  /**
   * place_user findFirst
   */
  export type place_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter, which place_user to fetch.
     */
    where?: place_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_users to fetch.
     */
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for place_users.
     */
    cursor?: place_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of place_users.
     */
    distinct?: Place_userScalarFieldEnum | Place_userScalarFieldEnum[]
  }

  /**
   * place_user findFirstOrThrow
   */
  export type place_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter, which place_user to fetch.
     */
    where?: place_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_users to fetch.
     */
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for place_users.
     */
    cursor?: place_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of place_users.
     */
    distinct?: Place_userScalarFieldEnum | Place_userScalarFieldEnum[]
  }

  /**
   * place_user findMany
   */
  export type place_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter, which place_users to fetch.
     */
    where?: place_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of place_users to fetch.
     */
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing place_users.
     */
    cursor?: place_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` place_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` place_users.
     */
    skip?: number
    distinct?: Place_userScalarFieldEnum | Place_userScalarFieldEnum[]
  }

  /**
   * place_user create
   */
  export type place_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * The data needed to create a place_user.
     */
    data?: XOR<place_userCreateInput, place_userUncheckedCreateInput>
  }

  /**
   * place_user createMany
   */
  export type place_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many place_users.
     */
    data: place_userCreateManyInput | place_userCreateManyInput[]
  }

  /**
   * place_user update
   */
  export type place_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * The data needed to update a place_user.
     */
    data: XOR<place_userUpdateInput, place_userUncheckedUpdateInput>
    /**
     * Choose, which place_user to update.
     */
    where: place_userWhereUniqueInput
  }

  /**
   * place_user updateMany
   */
  export type place_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update place_users.
     */
    data: XOR<place_userUpdateManyMutationInput, place_userUncheckedUpdateManyInput>
    /**
     * Filter which place_users to update
     */
    where?: place_userWhereInput
  }

  /**
   * place_user upsert
   */
  export type place_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * The filter to search for the place_user to update in case it exists.
     */
    where: place_userWhereUniqueInput
    /**
     * In case the place_user found by the `where` argument doesn't exist, create a new place_user with this data.
     */
    create: XOR<place_userCreateInput, place_userUncheckedCreateInput>
    /**
     * In case the place_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<place_userUpdateInput, place_userUncheckedUpdateInput>
  }

  /**
   * place_user delete
   */
  export type place_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    /**
     * Filter which place_user to delete.
     */
    where: place_userWhereUniqueInput
  }

  /**
   * place_user deleteMany
   */
  export type place_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which place_users to delete
     */
    where?: place_userWhereInput
  }

  /**
   * place_user.place
   */
  export type place_user$placeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    where?: placeWhereInput
  }

  /**
   * place_user.user
   */
  export type place_user$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * place_user without action
   */
  export type place_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
  }


  /**
   * Model register_form_dynamic
   */

  export type AggregateRegister_form_dynamic = {
    _count: Register_form_dynamicCountAggregateOutputType | null
    _avg: Register_form_dynamicAvgAggregateOutputType | null
    _sum: Register_form_dynamicSumAggregateOutputType | null
    _min: Register_form_dynamicMinAggregateOutputType | null
    _max: Register_form_dynamicMaxAggregateOutputType | null
  }

  export type Register_form_dynamicAvgAggregateOutputType = {
    id: number | null
    place_id: number | null
  }

  export type Register_form_dynamicSumAggregateOutputType = {
    id: number | null
    place_id: number | null
  }

  export type Register_form_dynamicMinAggregateOutputType = {
    id: number | null
    place_id: number | null
    data_json: string | null
    registration_date: Date | null
  }

  export type Register_form_dynamicMaxAggregateOutputType = {
    id: number | null
    place_id: number | null
    data_json: string | null
    registration_date: Date | null
  }

  export type Register_form_dynamicCountAggregateOutputType = {
    id: number
    place_id: number
    data_json: number
    registration_date: number
    _all: number
  }


  export type Register_form_dynamicAvgAggregateInputType = {
    id?: true
    place_id?: true
  }

  export type Register_form_dynamicSumAggregateInputType = {
    id?: true
    place_id?: true
  }

  export type Register_form_dynamicMinAggregateInputType = {
    id?: true
    place_id?: true
    data_json?: true
    registration_date?: true
  }

  export type Register_form_dynamicMaxAggregateInputType = {
    id?: true
    place_id?: true
    data_json?: true
    registration_date?: true
  }

  export type Register_form_dynamicCountAggregateInputType = {
    id?: true
    place_id?: true
    data_json?: true
    registration_date?: true
    _all?: true
  }

  export type Register_form_dynamicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which register_form_dynamic to aggregate.
     */
    where?: register_form_dynamicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of register_form_dynamics to fetch.
     */
    orderBy?: register_form_dynamicOrderByWithRelationInput | register_form_dynamicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: register_form_dynamicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` register_form_dynamics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` register_form_dynamics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned register_form_dynamics
    **/
    _count?: true | Register_form_dynamicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Register_form_dynamicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Register_form_dynamicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Register_form_dynamicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Register_form_dynamicMaxAggregateInputType
  }

  export type GetRegister_form_dynamicAggregateType<T extends Register_form_dynamicAggregateArgs> = {
        [P in keyof T & keyof AggregateRegister_form_dynamic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegister_form_dynamic[P]>
      : GetScalarType<T[P], AggregateRegister_form_dynamic[P]>
  }




  export type register_form_dynamicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: register_form_dynamicWhereInput
    orderBy?: register_form_dynamicOrderByWithAggregationInput | register_form_dynamicOrderByWithAggregationInput[]
    by: Register_form_dynamicScalarFieldEnum[] | Register_form_dynamicScalarFieldEnum
    having?: register_form_dynamicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Register_form_dynamicCountAggregateInputType | true
    _avg?: Register_form_dynamicAvgAggregateInputType
    _sum?: Register_form_dynamicSumAggregateInputType
    _min?: Register_form_dynamicMinAggregateInputType
    _max?: Register_form_dynamicMaxAggregateInputType
  }

  export type Register_form_dynamicGroupByOutputType = {
    id: number
    place_id: number | null
    data_json: string | null
    registration_date: Date | null
    _count: Register_form_dynamicCountAggregateOutputType | null
    _avg: Register_form_dynamicAvgAggregateOutputType | null
    _sum: Register_form_dynamicSumAggregateOutputType | null
    _min: Register_form_dynamicMinAggregateOutputType | null
    _max: Register_form_dynamicMaxAggregateOutputType | null
  }

  type GetRegister_form_dynamicGroupByPayload<T extends register_form_dynamicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Register_form_dynamicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Register_form_dynamicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Register_form_dynamicGroupByOutputType[P]>
            : GetScalarType<T[P], Register_form_dynamicGroupByOutputType[P]>
        }
      >
    >


  export type register_form_dynamicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    place_id?: boolean
    data_json?: boolean
    registration_date?: boolean
    place?: boolean | register_form_dynamic$placeArgs<ExtArgs>
  }, ExtArgs["result"]["register_form_dynamic"]>


  export type register_form_dynamicSelectScalar = {
    id?: boolean
    place_id?: boolean
    data_json?: boolean
    registration_date?: boolean
  }

  export type register_form_dynamicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | register_form_dynamic$placeArgs<ExtArgs>
  }

  export type $register_form_dynamicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "register_form_dynamic"
    objects: {
      place: Prisma.$placePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      place_id: number | null
      data_json: string | null
      registration_date: Date | null
    }, ExtArgs["result"]["register_form_dynamic"]>
    composites: {}
  }

  type register_form_dynamicGetPayload<S extends boolean | null | undefined | register_form_dynamicDefaultArgs> = $Result.GetResult<Prisma.$register_form_dynamicPayload, S>

  type register_form_dynamicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<register_form_dynamicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Register_form_dynamicCountAggregateInputType | true
    }

  export interface register_form_dynamicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['register_form_dynamic'], meta: { name: 'register_form_dynamic' } }
    /**
     * Find zero or one Register_form_dynamic that matches the filter.
     * @param {register_form_dynamicFindUniqueArgs} args - Arguments to find a Register_form_dynamic
     * @example
     * // Get one Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends register_form_dynamicFindUniqueArgs>(args: SelectSubset<T, register_form_dynamicFindUniqueArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Register_form_dynamic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {register_form_dynamicFindUniqueOrThrowArgs} args - Arguments to find a Register_form_dynamic
     * @example
     * // Get one Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends register_form_dynamicFindUniqueOrThrowArgs>(args: SelectSubset<T, register_form_dynamicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Register_form_dynamic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicFindFirstArgs} args - Arguments to find a Register_form_dynamic
     * @example
     * // Get one Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends register_form_dynamicFindFirstArgs>(args?: SelectSubset<T, register_form_dynamicFindFirstArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Register_form_dynamic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicFindFirstOrThrowArgs} args - Arguments to find a Register_form_dynamic
     * @example
     * // Get one Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends register_form_dynamicFindFirstOrThrowArgs>(args?: SelectSubset<T, register_form_dynamicFindFirstOrThrowArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Register_form_dynamics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Register_form_dynamics
     * const register_form_dynamics = await prisma.register_form_dynamic.findMany()
     * 
     * // Get first 10 Register_form_dynamics
     * const register_form_dynamics = await prisma.register_form_dynamic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const register_form_dynamicWithIdOnly = await prisma.register_form_dynamic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends register_form_dynamicFindManyArgs>(args?: SelectSubset<T, register_form_dynamicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Register_form_dynamic.
     * @param {register_form_dynamicCreateArgs} args - Arguments to create a Register_form_dynamic.
     * @example
     * // Create one Register_form_dynamic
     * const Register_form_dynamic = await prisma.register_form_dynamic.create({
     *   data: {
     *     // ... data to create a Register_form_dynamic
     *   }
     * })
     * 
     */
    create<T extends register_form_dynamicCreateArgs>(args: SelectSubset<T, register_form_dynamicCreateArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Register_form_dynamics.
     * @param {register_form_dynamicCreateManyArgs} args - Arguments to create many Register_form_dynamics.
     * @example
     * // Create many Register_form_dynamics
     * const register_form_dynamic = await prisma.register_form_dynamic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends register_form_dynamicCreateManyArgs>(args?: SelectSubset<T, register_form_dynamicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Register_form_dynamic.
     * @param {register_form_dynamicDeleteArgs} args - Arguments to delete one Register_form_dynamic.
     * @example
     * // Delete one Register_form_dynamic
     * const Register_form_dynamic = await prisma.register_form_dynamic.delete({
     *   where: {
     *     // ... filter to delete one Register_form_dynamic
     *   }
     * })
     * 
     */
    delete<T extends register_form_dynamicDeleteArgs>(args: SelectSubset<T, register_form_dynamicDeleteArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Register_form_dynamic.
     * @param {register_form_dynamicUpdateArgs} args - Arguments to update one Register_form_dynamic.
     * @example
     * // Update one Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends register_form_dynamicUpdateArgs>(args: SelectSubset<T, register_form_dynamicUpdateArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Register_form_dynamics.
     * @param {register_form_dynamicDeleteManyArgs} args - Arguments to filter Register_form_dynamics to delete.
     * @example
     * // Delete a few Register_form_dynamics
     * const { count } = await prisma.register_form_dynamic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends register_form_dynamicDeleteManyArgs>(args?: SelectSubset<T, register_form_dynamicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Register_form_dynamics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Register_form_dynamics
     * const register_form_dynamic = await prisma.register_form_dynamic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends register_form_dynamicUpdateManyArgs>(args: SelectSubset<T, register_form_dynamicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Register_form_dynamic.
     * @param {register_form_dynamicUpsertArgs} args - Arguments to update or create a Register_form_dynamic.
     * @example
     * // Update or create a Register_form_dynamic
     * const register_form_dynamic = await prisma.register_form_dynamic.upsert({
     *   create: {
     *     // ... data to create a Register_form_dynamic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Register_form_dynamic we want to update
     *   }
     * })
     */
    upsert<T extends register_form_dynamicUpsertArgs>(args: SelectSubset<T, register_form_dynamicUpsertArgs<ExtArgs>>): Prisma__register_form_dynamicClient<$Result.GetResult<Prisma.$register_form_dynamicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Register_form_dynamics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicCountArgs} args - Arguments to filter Register_form_dynamics to count.
     * @example
     * // Count the number of Register_form_dynamics
     * const count = await prisma.register_form_dynamic.count({
     *   where: {
     *     // ... the filter for the Register_form_dynamics we want to count
     *   }
     * })
    **/
    count<T extends register_form_dynamicCountArgs>(
      args?: Subset<T, register_form_dynamicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Register_form_dynamicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Register_form_dynamic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_form_dynamicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Register_form_dynamicAggregateArgs>(args: Subset<T, Register_form_dynamicAggregateArgs>): Prisma.PrismaPromise<GetRegister_form_dynamicAggregateType<T>>

    /**
     * Group by Register_form_dynamic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {register_form_dynamicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends register_form_dynamicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: register_form_dynamicGroupByArgs['orderBy'] }
        : { orderBy?: register_form_dynamicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, register_form_dynamicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegister_form_dynamicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the register_form_dynamic model
   */
  readonly fields: register_form_dynamicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for register_form_dynamic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__register_form_dynamicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends register_form_dynamic$placeArgs<ExtArgs> = {}>(args?: Subset<T, register_form_dynamic$placeArgs<ExtArgs>>): Prisma__placeClient<$Result.GetResult<Prisma.$placePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the register_form_dynamic model
   */ 
  interface register_form_dynamicFieldRefs {
    readonly id: FieldRef<"register_form_dynamic", 'Int'>
    readonly place_id: FieldRef<"register_form_dynamic", 'Int'>
    readonly data_json: FieldRef<"register_form_dynamic", 'String'>
    readonly registration_date: FieldRef<"register_form_dynamic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * register_form_dynamic findUnique
   */
  export type register_form_dynamicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter, which register_form_dynamic to fetch.
     */
    where: register_form_dynamicWhereUniqueInput
  }

  /**
   * register_form_dynamic findUniqueOrThrow
   */
  export type register_form_dynamicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter, which register_form_dynamic to fetch.
     */
    where: register_form_dynamicWhereUniqueInput
  }

  /**
   * register_form_dynamic findFirst
   */
  export type register_form_dynamicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter, which register_form_dynamic to fetch.
     */
    where?: register_form_dynamicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of register_form_dynamics to fetch.
     */
    orderBy?: register_form_dynamicOrderByWithRelationInput | register_form_dynamicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for register_form_dynamics.
     */
    cursor?: register_form_dynamicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` register_form_dynamics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` register_form_dynamics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of register_form_dynamics.
     */
    distinct?: Register_form_dynamicScalarFieldEnum | Register_form_dynamicScalarFieldEnum[]
  }

  /**
   * register_form_dynamic findFirstOrThrow
   */
  export type register_form_dynamicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter, which register_form_dynamic to fetch.
     */
    where?: register_form_dynamicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of register_form_dynamics to fetch.
     */
    orderBy?: register_form_dynamicOrderByWithRelationInput | register_form_dynamicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for register_form_dynamics.
     */
    cursor?: register_form_dynamicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` register_form_dynamics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` register_form_dynamics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of register_form_dynamics.
     */
    distinct?: Register_form_dynamicScalarFieldEnum | Register_form_dynamicScalarFieldEnum[]
  }

  /**
   * register_form_dynamic findMany
   */
  export type register_form_dynamicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter, which register_form_dynamics to fetch.
     */
    where?: register_form_dynamicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of register_form_dynamics to fetch.
     */
    orderBy?: register_form_dynamicOrderByWithRelationInput | register_form_dynamicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing register_form_dynamics.
     */
    cursor?: register_form_dynamicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` register_form_dynamics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` register_form_dynamics.
     */
    skip?: number
    distinct?: Register_form_dynamicScalarFieldEnum | Register_form_dynamicScalarFieldEnum[]
  }

  /**
   * register_form_dynamic create
   */
  export type register_form_dynamicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * The data needed to create a register_form_dynamic.
     */
    data?: XOR<register_form_dynamicCreateInput, register_form_dynamicUncheckedCreateInput>
  }

  /**
   * register_form_dynamic createMany
   */
  export type register_form_dynamicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many register_form_dynamics.
     */
    data: register_form_dynamicCreateManyInput | register_form_dynamicCreateManyInput[]
  }

  /**
   * register_form_dynamic update
   */
  export type register_form_dynamicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * The data needed to update a register_form_dynamic.
     */
    data: XOR<register_form_dynamicUpdateInput, register_form_dynamicUncheckedUpdateInput>
    /**
     * Choose, which register_form_dynamic to update.
     */
    where: register_form_dynamicWhereUniqueInput
  }

  /**
   * register_form_dynamic updateMany
   */
  export type register_form_dynamicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update register_form_dynamics.
     */
    data: XOR<register_form_dynamicUpdateManyMutationInput, register_form_dynamicUncheckedUpdateManyInput>
    /**
     * Filter which register_form_dynamics to update
     */
    where?: register_form_dynamicWhereInput
  }

  /**
   * register_form_dynamic upsert
   */
  export type register_form_dynamicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * The filter to search for the register_form_dynamic to update in case it exists.
     */
    where: register_form_dynamicWhereUniqueInput
    /**
     * In case the register_form_dynamic found by the `where` argument doesn't exist, create a new register_form_dynamic with this data.
     */
    create: XOR<register_form_dynamicCreateInput, register_form_dynamicUncheckedCreateInput>
    /**
     * In case the register_form_dynamic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<register_form_dynamicUpdateInput, register_form_dynamicUncheckedUpdateInput>
  }

  /**
   * register_form_dynamic delete
   */
  export type register_form_dynamicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
    /**
     * Filter which register_form_dynamic to delete.
     */
    where: register_form_dynamicWhereUniqueInput
  }

  /**
   * register_form_dynamic deleteMany
   */
  export type register_form_dynamicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which register_form_dynamics to delete
     */
    where?: register_form_dynamicWhereInput
  }

  /**
   * register_form_dynamic.place
   */
  export type register_form_dynamic$placeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place
     */
    select?: placeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: placeInclude<ExtArgs> | null
    where?: placeWhereInput
  }

  /**
   * register_form_dynamic without action
   */
  export type register_form_dynamicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the register_form_dynamic
     */
    select?: register_form_dynamicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: register_form_dynamicInclude<ExtArgs> | null
  }


  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    role_id: number | null
    active: number | null
  }

  export type RoleSumAggregateOutputType = {
    role_id: number | null
    active: number | null
  }

  export type RoleMinAggregateOutputType = {
    role_id: number | null
    name: string | null
    active: number | null
    created_at: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    role_id: number | null
    name: string | null
    active: number | null
    created_at: Date | null
  }

  export type RoleCountAggregateOutputType = {
    role_id: number
    name: number
    active: number
    created_at: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    role_id?: true
    active?: true
  }

  export type RoleSumAggregateInputType = {
    role_id?: true
    active?: true
  }

  export type RoleMinAggregateInputType = {
    role_id?: true
    name?: true
    active?: true
    created_at?: true
  }

  export type RoleMaxAggregateInputType = {
    role_id?: true
    name?: true
    active?: true
    created_at?: true
  }

  export type RoleCountAggregateInputType = {
    role_id?: true
    name?: true
    active?: true
    created_at?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    role_id: number
    name: string | null
    active: number | null
    created_at: Date | null
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    user?: boolean | role$userArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>


  export type roleSelectScalar = {
    role_id?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
  }

  export type roleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | role$userArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {
      user: Prisma.$userPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      role_id: number
      name: string | null
      active: number | null
      created_at: Date | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<roleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends roleFindUniqueArgs>(args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs>(args: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends roleFindFirstArgs>(args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs>(args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `role_id`
     * const roleWithRole_idOnly = await prisma.role.findMany({ select: { role_id: true } })
     * 
     */
    findMany<T extends roleFindManyArgs>(args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends roleCreateArgs>(args: SelectSubset<T, roleCreateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {roleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends roleCreateManyArgs>(args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends roleDeleteArgs>(args: SelectSubset<T, roleDeleteArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends roleUpdateArgs>(args: SelectSubset<T, roleUpdateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends roleDeleteManyArgs>(args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends roleUpdateManyArgs>(args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends roleUpsertArgs>(args: SelectSubset<T, roleUpsertArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends role$userArgs<ExtArgs> = {}>(args?: Subset<T, role$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the role model
   */ 
  interface roleFieldRefs {
    readonly role_id: FieldRef<"role", 'Int'>
    readonly name: FieldRef<"role", 'String'>
    readonly active: FieldRef<"role", 'Int'>
    readonly created_at: FieldRef<"role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data?: XOR<roleCreateInput, roleUncheckedCreateInput>
  }

  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
  }

  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
  }

  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }

  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
  }

  /**
   * role.user
   */
  export type role$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
    active: number | null
    access_web: number | null
    access_movil: number | null
    role_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
    active: number | null
    access_web: number | null
    access_movil: number | null
    role_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    first_name: string | null
    middle_name: string | null
    maternal_surname: string | null
    paternal_surname: string | null
    birthdate: Date | null
    photo_url: string | null
    entry_date: Date | null
    low_date: Date | null
    active: number | null
    access_web: number | null
    access_movil: number | null
    role_id: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    first_name: string | null
    middle_name: string | null
    maternal_surname: string | null
    paternal_surname: string | null
    birthdate: Date | null
    photo_url: string | null
    entry_date: Date | null
    low_date: Date | null
    active: number | null
    access_web: number | null
    access_movil: number | null
    role_id: number | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    first_name: number
    middle_name: number
    maternal_surname: number
    paternal_surname: number
    birthdate: number
    photo_url: number
    entry_date: number
    low_date: number
    active: number
    access_web: number
    access_movil: number
    role_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
    active?: true
    access_web?: true
    access_movil?: true
    role_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
    active?: true
    access_web?: true
    access_movil?: true
    role_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    first_name?: true
    middle_name?: true
    maternal_surname?: true
    paternal_surname?: true
    birthdate?: true
    photo_url?: true
    entry_date?: true
    low_date?: true
    active?: true
    access_web?: true
    access_movil?: true
    role_id?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    first_name?: true
    middle_name?: true
    maternal_surname?: true
    paternal_surname?: true
    birthdate?: true
    photo_url?: true
    entry_date?: true
    low_date?: true
    active?: true
    access_web?: true
    access_movil?: true
    role_id?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    first_name?: true
    middle_name?: true
    maternal_surname?: true
    paternal_surname?: true
    birthdate?: true
    photo_url?: true
    entry_date?: true
    low_date?: true
    active?: true
    access_web?: true
    access_movil?: true
    role_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    first_name: string
    middle_name: string | null
    maternal_surname: string | null
    paternal_surname: string
    birthdate: Date | null
    photo_url: string | null
    entry_date: Date | null
    low_date: Date | null
    active: number | null
    access_web: number | null
    access_movil: number | null
    role_id: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    middle_name?: boolean
    maternal_surname?: boolean
    paternal_surname?: boolean
    birthdate?: boolean
    photo_url?: boolean
    entry_date?: boolean
    low_date?: boolean
    active?: boolean
    access_web?: boolean
    access_movil?: boolean
    role_id?: boolean
    access?: boolean | user$accessArgs<ExtArgs>
    attendance?: boolean | user$attendanceArgs<ExtArgs>
    place_user?: boolean | user$place_userArgs<ExtArgs>
    role?: boolean | user$roleArgs<ExtArgs>
    user_contact?: boolean | user$user_contactArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    user_id?: boolean
    first_name?: boolean
    middle_name?: boolean
    maternal_surname?: boolean
    paternal_surname?: boolean
    birthdate?: boolean
    photo_url?: boolean
    entry_date?: boolean
    low_date?: boolean
    active?: boolean
    access_web?: boolean
    access_movil?: boolean
    role_id?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    access?: boolean | user$accessArgs<ExtArgs>
    attendance?: boolean | user$attendanceArgs<ExtArgs>
    place_user?: boolean | user$place_userArgs<ExtArgs>
    role?: boolean | user$roleArgs<ExtArgs>
    user_contact?: boolean | user$user_contactArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      access: Prisma.$accessPayload<ExtArgs>[]
      attendance: Prisma.$attendancePayload<ExtArgs>[]
      place_user: Prisma.$place_userPayload<ExtArgs>[]
      role: Prisma.$rolePayload<ExtArgs> | null
      user_contact: Prisma.$user_contactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      first_name: string
      middle_name: string | null
      maternal_surname: string | null
      paternal_surname: string
      birthdate: Date | null
      photo_url: string | null
      entry_date: Date | null
      low_date: Date | null
      active: number | null
      access_web: number | null
      access_movil: number | null
      role_id: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    access<T extends user$accessArgs<ExtArgs> = {}>(args?: Subset<T, user$accessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$accessPayload<ExtArgs>, T, "findMany"> | Null>
    attendance<T extends user$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, user$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany"> | Null>
    place_user<T extends user$place_userArgs<ExtArgs> = {}>(args?: Subset<T, user$place_userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$place_userPayload<ExtArgs>, T, "findMany"> | Null>
    role<T extends user$roleArgs<ExtArgs> = {}>(args?: Subset<T, user$roleArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_contact<T extends user$user_contactArgs<ExtArgs> = {}>(args?: Subset<T, user$user_contactArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly user_id: FieldRef<"user", 'Int'>
    readonly first_name: FieldRef<"user", 'String'>
    readonly middle_name: FieldRef<"user", 'String'>
    readonly maternal_surname: FieldRef<"user", 'String'>
    readonly paternal_surname: FieldRef<"user", 'String'>
    readonly birthdate: FieldRef<"user", 'DateTime'>
    readonly photo_url: FieldRef<"user", 'String'>
    readonly entry_date: FieldRef<"user", 'DateTime'>
    readonly low_date: FieldRef<"user", 'DateTime'>
    readonly active: FieldRef<"user", 'Int'>
    readonly access_web: FieldRef<"user", 'Int'>
    readonly access_movil: FieldRef<"user", 'Int'>
    readonly role_id: FieldRef<"user", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.access
   */
  export type user$accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the access
     */
    select?: accessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: accessInclude<ExtArgs> | null
    where?: accessWhereInput
    orderBy?: accessOrderByWithRelationInput | accessOrderByWithRelationInput[]
    cursor?: accessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccessScalarFieldEnum | AccessScalarFieldEnum[]
  }

  /**
   * user.attendance
   */
  export type user$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    cursor?: attendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * user.place_user
   */
  export type user$place_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the place_user
     */
    select?: place_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: place_userInclude<ExtArgs> | null
    where?: place_userWhereInput
    orderBy?: place_userOrderByWithRelationInput | place_userOrderByWithRelationInput[]
    cursor?: place_userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Place_userScalarFieldEnum | Place_userScalarFieldEnum[]
  }

  /**
   * user.role
   */
  export type user$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    where?: roleWhereInput
  }

  /**
   * user.user_contact
   */
  export type user$user_contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    where?: user_contactWhereInput
    orderBy?: user_contactOrderByWithRelationInput | user_contactOrderByWithRelationInput[]
    cursor?: user_contactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_contactScalarFieldEnum | User_contactScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model user_contact
   */

  export type AggregateUser_contact = {
    _count: User_contactCountAggregateOutputType | null
    _avg: User_contactAvgAggregateOutputType | null
    _sum: User_contactSumAggregateOutputType | null
    _min: User_contactMinAggregateOutputType | null
    _max: User_contactMaxAggregateOutputType | null
  }

  export type User_contactAvgAggregateOutputType = {
    id: number | null
    cp: number | null
    user_id: number | null
  }

  export type User_contactSumAggregateOutputType = {
    id: number | null
    cp: number | null
    user_id: number | null
  }

  export type User_contactMinAggregateOutputType = {
    id: number | null
    street: string | null
    outer_number: string | null
    interior_number: string | null
    cologne: string | null
    municipality: string | null
    cp: number | null
    phone_number: string | null
    email: string | null
    user_id: number | null
  }

  export type User_contactMaxAggregateOutputType = {
    id: number | null
    street: string | null
    outer_number: string | null
    interior_number: string | null
    cologne: string | null
    municipality: string | null
    cp: number | null
    phone_number: string | null
    email: string | null
    user_id: number | null
  }

  export type User_contactCountAggregateOutputType = {
    id: number
    street: number
    outer_number: number
    interior_number: number
    cologne: number
    municipality: number
    cp: number
    phone_number: number
    email: number
    user_id: number
    _all: number
  }


  export type User_contactAvgAggregateInputType = {
    id?: true
    cp?: true
    user_id?: true
  }

  export type User_contactSumAggregateInputType = {
    id?: true
    cp?: true
    user_id?: true
  }

  export type User_contactMinAggregateInputType = {
    id?: true
    street?: true
    outer_number?: true
    interior_number?: true
    cologne?: true
    municipality?: true
    cp?: true
    phone_number?: true
    email?: true
    user_id?: true
  }

  export type User_contactMaxAggregateInputType = {
    id?: true
    street?: true
    outer_number?: true
    interior_number?: true
    cologne?: true
    municipality?: true
    cp?: true
    phone_number?: true
    email?: true
    user_id?: true
  }

  export type User_contactCountAggregateInputType = {
    id?: true
    street?: true
    outer_number?: true
    interior_number?: true
    cologne?: true
    municipality?: true
    cp?: true
    phone_number?: true
    email?: true
    user_id?: true
    _all?: true
  }

  export type User_contactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_contact to aggregate.
     */
    where?: user_contactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_contacts to fetch.
     */
    orderBy?: user_contactOrderByWithRelationInput | user_contactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_contactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_contacts
    **/
    _count?: true | User_contactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_contactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_contactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_contactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_contactMaxAggregateInputType
  }

  export type GetUser_contactAggregateType<T extends User_contactAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_contact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_contact[P]>
      : GetScalarType<T[P], AggregateUser_contact[P]>
  }




  export type user_contactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_contactWhereInput
    orderBy?: user_contactOrderByWithAggregationInput | user_contactOrderByWithAggregationInput[]
    by: User_contactScalarFieldEnum[] | User_contactScalarFieldEnum
    having?: user_contactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_contactCountAggregateInputType | true
    _avg?: User_contactAvgAggregateInputType
    _sum?: User_contactSumAggregateInputType
    _min?: User_contactMinAggregateInputType
    _max?: User_contactMaxAggregateInputType
  }

  export type User_contactGroupByOutputType = {
    id: number
    street: string | null
    outer_number: string | null
    interior_number: string | null
    cologne: string | null
    municipality: string | null
    cp: number | null
    phone_number: string | null
    email: string | null
    user_id: number | null
    _count: User_contactCountAggregateOutputType | null
    _avg: User_contactAvgAggregateOutputType | null
    _sum: User_contactSumAggregateOutputType | null
    _min: User_contactMinAggregateOutputType | null
    _max: User_contactMaxAggregateOutputType | null
  }

  type GetUser_contactGroupByPayload<T extends user_contactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_contactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_contactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_contactGroupByOutputType[P]>
            : GetScalarType<T[P], User_contactGroupByOutputType[P]>
        }
      >
    >


  export type user_contactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    outer_number?: boolean
    interior_number?: boolean
    cologne?: boolean
    municipality?: boolean
    cp?: boolean
    phone_number?: boolean
    email?: boolean
    user_id?: boolean
    user?: boolean | user_contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["user_contact"]>


  export type user_contactSelectScalar = {
    id?: boolean
    street?: boolean
    outer_number?: boolean
    interior_number?: boolean
    cologne?: boolean
    municipality?: boolean
    cp?: boolean
    phone_number?: boolean
    email?: boolean
    user_id?: boolean
  }

  export type user_contactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_contact$userArgs<ExtArgs>
  }

  export type $user_contactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_contact"
    objects: {
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      street: string | null
      outer_number: string | null
      interior_number: string | null
      cologne: string | null
      municipality: string | null
      cp: number | null
      phone_number: string | null
      email: string | null
      user_id: number | null
    }, ExtArgs["result"]["user_contact"]>
    composites: {}
  }

  type user_contactGetPayload<S extends boolean | null | undefined | user_contactDefaultArgs> = $Result.GetResult<Prisma.$user_contactPayload, S>

  type user_contactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_contactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_contactCountAggregateInputType | true
    }

  export interface user_contactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_contact'], meta: { name: 'user_contact' } }
    /**
     * Find zero or one User_contact that matches the filter.
     * @param {user_contactFindUniqueArgs} args - Arguments to find a User_contact
     * @example
     * // Get one User_contact
     * const user_contact = await prisma.user_contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_contactFindUniqueArgs>(args: SelectSubset<T, user_contactFindUniqueArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_contact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_contactFindUniqueOrThrowArgs} args - Arguments to find a User_contact
     * @example
     * // Get one User_contact
     * const user_contact = await prisma.user_contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_contactFindUniqueOrThrowArgs>(args: SelectSubset<T, user_contactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactFindFirstArgs} args - Arguments to find a User_contact
     * @example
     * // Get one User_contact
     * const user_contact = await prisma.user_contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_contactFindFirstArgs>(args?: SelectSubset<T, user_contactFindFirstArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactFindFirstOrThrowArgs} args - Arguments to find a User_contact
     * @example
     * // Get one User_contact
     * const user_contact = await prisma.user_contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_contactFindFirstOrThrowArgs>(args?: SelectSubset<T, user_contactFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_contacts
     * const user_contacts = await prisma.user_contact.findMany()
     * 
     * // Get first 10 User_contacts
     * const user_contacts = await prisma.user_contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_contactWithIdOnly = await prisma.user_contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_contactFindManyArgs>(args?: SelectSubset<T, user_contactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_contact.
     * @param {user_contactCreateArgs} args - Arguments to create a User_contact.
     * @example
     * // Create one User_contact
     * const User_contact = await prisma.user_contact.create({
     *   data: {
     *     // ... data to create a User_contact
     *   }
     * })
     * 
     */
    create<T extends user_contactCreateArgs>(args: SelectSubset<T, user_contactCreateArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_contacts.
     * @param {user_contactCreateManyArgs} args - Arguments to create many User_contacts.
     * @example
     * // Create many User_contacts
     * const user_contact = await prisma.user_contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_contactCreateManyArgs>(args?: SelectSubset<T, user_contactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_contact.
     * @param {user_contactDeleteArgs} args - Arguments to delete one User_contact.
     * @example
     * // Delete one User_contact
     * const User_contact = await prisma.user_contact.delete({
     *   where: {
     *     // ... filter to delete one User_contact
     *   }
     * })
     * 
     */
    delete<T extends user_contactDeleteArgs>(args: SelectSubset<T, user_contactDeleteArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_contact.
     * @param {user_contactUpdateArgs} args - Arguments to update one User_contact.
     * @example
     * // Update one User_contact
     * const user_contact = await prisma.user_contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_contactUpdateArgs>(args: SelectSubset<T, user_contactUpdateArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_contacts.
     * @param {user_contactDeleteManyArgs} args - Arguments to filter User_contacts to delete.
     * @example
     * // Delete a few User_contacts
     * const { count } = await prisma.user_contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_contactDeleteManyArgs>(args?: SelectSubset<T, user_contactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_contacts
     * const user_contact = await prisma.user_contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_contactUpdateManyArgs>(args: SelectSubset<T, user_contactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_contact.
     * @param {user_contactUpsertArgs} args - Arguments to update or create a User_contact.
     * @example
     * // Update or create a User_contact
     * const user_contact = await prisma.user_contact.upsert({
     *   create: {
     *     // ... data to create a User_contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_contact we want to update
     *   }
     * })
     */
    upsert<T extends user_contactUpsertArgs>(args: SelectSubset<T, user_contactUpsertArgs<ExtArgs>>): Prisma__user_contactClient<$Result.GetResult<Prisma.$user_contactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactCountArgs} args - Arguments to filter User_contacts to count.
     * @example
     * // Count the number of User_contacts
     * const count = await prisma.user_contact.count({
     *   where: {
     *     // ... the filter for the User_contacts we want to count
     *   }
     * })
    **/
    count<T extends user_contactCountArgs>(
      args?: Subset<T, user_contactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_contactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_contactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_contactAggregateArgs>(args: Subset<T, User_contactAggregateArgs>): Prisma.PrismaPromise<GetUser_contactAggregateType<T>>

    /**
     * Group by User_contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_contactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_contactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_contactGroupByArgs['orderBy'] }
        : { orderBy?: user_contactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_contactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_contactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_contact model
   */
  readonly fields: user_contactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_contactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_contact$userArgs<ExtArgs> = {}>(args?: Subset<T, user_contact$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_contact model
   */ 
  interface user_contactFieldRefs {
    readonly id: FieldRef<"user_contact", 'Int'>
    readonly street: FieldRef<"user_contact", 'String'>
    readonly outer_number: FieldRef<"user_contact", 'String'>
    readonly interior_number: FieldRef<"user_contact", 'String'>
    readonly cologne: FieldRef<"user_contact", 'String'>
    readonly municipality: FieldRef<"user_contact", 'String'>
    readonly cp: FieldRef<"user_contact", 'Int'>
    readonly phone_number: FieldRef<"user_contact", 'String'>
    readonly email: FieldRef<"user_contact", 'String'>
    readonly user_id: FieldRef<"user_contact", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_contact findUnique
   */
  export type user_contactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter, which user_contact to fetch.
     */
    where: user_contactWhereUniqueInput
  }

  /**
   * user_contact findUniqueOrThrow
   */
  export type user_contactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter, which user_contact to fetch.
     */
    where: user_contactWhereUniqueInput
  }

  /**
   * user_contact findFirst
   */
  export type user_contactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter, which user_contact to fetch.
     */
    where?: user_contactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_contacts to fetch.
     */
    orderBy?: user_contactOrderByWithRelationInput | user_contactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_contacts.
     */
    cursor?: user_contactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_contacts.
     */
    distinct?: User_contactScalarFieldEnum | User_contactScalarFieldEnum[]
  }

  /**
   * user_contact findFirstOrThrow
   */
  export type user_contactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter, which user_contact to fetch.
     */
    where?: user_contactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_contacts to fetch.
     */
    orderBy?: user_contactOrderByWithRelationInput | user_contactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_contacts.
     */
    cursor?: user_contactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_contacts.
     */
    distinct?: User_contactScalarFieldEnum | User_contactScalarFieldEnum[]
  }

  /**
   * user_contact findMany
   */
  export type user_contactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter, which user_contacts to fetch.
     */
    where?: user_contactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_contacts to fetch.
     */
    orderBy?: user_contactOrderByWithRelationInput | user_contactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_contacts.
     */
    cursor?: user_contactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_contacts.
     */
    skip?: number
    distinct?: User_contactScalarFieldEnum | User_contactScalarFieldEnum[]
  }

  /**
   * user_contact create
   */
  export type user_contactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * The data needed to create a user_contact.
     */
    data?: XOR<user_contactCreateInput, user_contactUncheckedCreateInput>
  }

  /**
   * user_contact createMany
   */
  export type user_contactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_contacts.
     */
    data: user_contactCreateManyInput | user_contactCreateManyInput[]
  }

  /**
   * user_contact update
   */
  export type user_contactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * The data needed to update a user_contact.
     */
    data: XOR<user_contactUpdateInput, user_contactUncheckedUpdateInput>
    /**
     * Choose, which user_contact to update.
     */
    where: user_contactWhereUniqueInput
  }

  /**
   * user_contact updateMany
   */
  export type user_contactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_contacts.
     */
    data: XOR<user_contactUpdateManyMutationInput, user_contactUncheckedUpdateManyInput>
    /**
     * Filter which user_contacts to update
     */
    where?: user_contactWhereInput
  }

  /**
   * user_contact upsert
   */
  export type user_contactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * The filter to search for the user_contact to update in case it exists.
     */
    where: user_contactWhereUniqueInput
    /**
     * In case the user_contact found by the `where` argument doesn't exist, create a new user_contact with this data.
     */
    create: XOR<user_contactCreateInput, user_contactUncheckedCreateInput>
    /**
     * In case the user_contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_contactUpdateInput, user_contactUncheckedUpdateInput>
  }

  /**
   * user_contact delete
   */
  export type user_contactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
    /**
     * Filter which user_contact to delete.
     */
    where: user_contactWhereUniqueInput
  }

  /**
   * user_contact deleteMany
   */
  export type user_contactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_contacts to delete
     */
    where?: user_contactWhereInput
  }

  /**
   * user_contact.user
   */
  export type user_contact$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * user_contact without action
   */
  export type user_contactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_contact
     */
    select?: user_contactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_contactInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccessScalarFieldEnum: {
    access_id: 'access_id',
    username: 'username',
    password: 'password',
    user_id: 'user_id',
    active: 'active'
  };

  export type AccessScalarFieldEnum = (typeof AccessScalarFieldEnum)[keyof typeof AccessScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    attendance_id: 'attendance_id',
    user_id: 'user_id',
    entry_time: 'entry_time',
    latitude_entry_time: 'latitude_entry_time',
    longitude_entry_time: 'longitude_entry_time',
    photo_entry_time: 'photo_entry_time',
    departure_time: 'departure_time',
    latitude_departure_time: 'latitude_departure_time',
    longitude_departure_time: 'longitude_departure_time',
    photo_departure_time: 'photo_departure_time'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const FieldScalarFieldEnum: {
    field_id: 'field_id',
    name: 'name',
    type_db: 'type_db',
    type_field_form: 'type_field_form',
    type_form: 'type_form',
    options_select: 'options_select',
    mandatory: 'mandatory',
    type_select: 'type_select',
    parent_field_id: 'parent_field_id',
    order: 'order'
  };

  export type FieldScalarFieldEnum = (typeof FieldScalarFieldEnum)[keyof typeof FieldScalarFieldEnum]


  export const FormScalarFieldEnum: {
    form_id: 'form_id',
    name: 'name',
    route_app_movil: 'route_app_movil',
    icono_app_movil: 'icono_app_movil',
    have_signature: 'have_signature'
  };

  export type FormScalarFieldEnum = (typeof FormScalarFieldEnum)[keyof typeof FormScalarFieldEnum]


  export const Form_fieldScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    field_id: 'field_id',
    joined_at: 'joined_at'
  };

  export type Form_fieldScalarFieldEnum = (typeof Form_fieldScalarFieldEnum)[keyof typeof Form_fieldScalarFieldEnum]


  export const Form_photo_formScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    photo_form_id: 'photo_form_id'
  };

  export type Form_photo_formScalarFieldEnum = (typeof Form_photo_formScalarFieldEnum)[keyof typeof Form_photo_formScalarFieldEnum]


  export const Photo_formScalarFieldEnum: {
    photo_form_id: 'photo_form_id',
    name: 'name'
  };

  export type Photo_formScalarFieldEnum = (typeof Photo_formScalarFieldEnum)[keyof typeof Photo_formScalarFieldEnum]


  export const PlaceScalarFieldEnum: {
    place_id: 'place_id',
    name: 'name',
    logo: 'logo',
    latitude: 'latitude',
    longitude: 'longitude',
    active: 'active'
  };

  export type PlaceScalarFieldEnum = (typeof PlaceScalarFieldEnum)[keyof typeof PlaceScalarFieldEnum]


  export const Place_userScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    place_id: 'place_id',
    joined_at: 'joined_at'
  };

  export type Place_userScalarFieldEnum = (typeof Place_userScalarFieldEnum)[keyof typeof Place_userScalarFieldEnum]


  export const Register_form_dynamicScalarFieldEnum: {
    id: 'id',
    place_id: 'place_id',
    data_json: 'data_json',
    registration_date: 'registration_date'
  };

  export type Register_form_dynamicScalarFieldEnum = (typeof Register_form_dynamicScalarFieldEnum)[keyof typeof Register_form_dynamicScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    role_id: 'role_id',
    name: 'name',
    active: 'active',
    created_at: 'created_at'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    first_name: 'first_name',
    middle_name: 'middle_name',
    maternal_surname: 'maternal_surname',
    paternal_surname: 'paternal_surname',
    birthdate: 'birthdate',
    photo_url: 'photo_url',
    entry_date: 'entry_date',
    low_date: 'low_date',
    active: 'active',
    access_web: 'access_web',
    access_movil: 'access_movil',
    role_id: 'role_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_contactScalarFieldEnum: {
    id: 'id',
    street: 'street',
    outer_number: 'outer_number',
    interior_number: 'interior_number',
    cologne: 'cologne',
    municipality: 'municipality',
    cp: 'cp',
    phone_number: 'phone_number',
    email: 'email',
    user_id: 'user_id'
  };

  export type User_contactScalarFieldEnum = (typeof User_contactScalarFieldEnum)[keyof typeof User_contactScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type accessWhereInput = {
    AND?: accessWhereInput | accessWhereInput[]
    OR?: accessWhereInput[]
    NOT?: accessWhereInput | accessWhereInput[]
    access_id?: IntFilter<"access"> | number
    username?: StringFilter<"access"> | string
    password?: StringFilter<"access"> | string
    user_id?: IntNullableFilter<"access"> | number | null
    active?: IntNullableFilter<"access"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type accessOrderByWithRelationInput = {
    access_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    user_id?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type accessWhereUniqueInput = Prisma.AtLeast<{
    access_id?: number
    AND?: accessWhereInput | accessWhereInput[]
    OR?: accessWhereInput[]
    NOT?: accessWhereInput | accessWhereInput[]
    username?: StringFilter<"access"> | string
    password?: StringFilter<"access"> | string
    user_id?: IntNullableFilter<"access"> | number | null
    active?: IntNullableFilter<"access"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "access_id">

  export type accessOrderByWithAggregationInput = {
    access_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    user_id?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    _count?: accessCountOrderByAggregateInput
    _avg?: accessAvgOrderByAggregateInput
    _max?: accessMaxOrderByAggregateInput
    _min?: accessMinOrderByAggregateInput
    _sum?: accessSumOrderByAggregateInput
  }

  export type accessScalarWhereWithAggregatesInput = {
    AND?: accessScalarWhereWithAggregatesInput | accessScalarWhereWithAggregatesInput[]
    OR?: accessScalarWhereWithAggregatesInput[]
    NOT?: accessScalarWhereWithAggregatesInput | accessScalarWhereWithAggregatesInput[]
    access_id?: IntWithAggregatesFilter<"access"> | number
    username?: StringWithAggregatesFilter<"access"> | string
    password?: StringWithAggregatesFilter<"access"> | string
    user_id?: IntNullableWithAggregatesFilter<"access"> | number | null
    active?: IntNullableWithAggregatesFilter<"access"> | number | null
  }

  export type attendanceWhereInput = {
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    attendance_id?: IntFilter<"attendance"> | number
    user_id?: IntNullableFilter<"attendance"> | number | null
    entry_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: StringNullableFilter<"attendance"> | string | null
    departure_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: StringNullableFilter<"attendance"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type attendanceOrderByWithRelationInput = {
    attendance_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    entry_time?: SortOrderInput | SortOrder
    latitude_entry_time?: SortOrderInput | SortOrder
    longitude_entry_time?: SortOrderInput | SortOrder
    photo_entry_time?: SortOrderInput | SortOrder
    departure_time?: SortOrderInput | SortOrder
    latitude_departure_time?: SortOrderInput | SortOrder
    longitude_departure_time?: SortOrderInput | SortOrder
    photo_departure_time?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type attendanceWhereUniqueInput = Prisma.AtLeast<{
    attendance_id?: number
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    user_id?: IntNullableFilter<"attendance"> | number | null
    entry_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: StringNullableFilter<"attendance"> | string | null
    departure_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: StringNullableFilter<"attendance"> | string | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "attendance_id">

  export type attendanceOrderByWithAggregationInput = {
    attendance_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    entry_time?: SortOrderInput | SortOrder
    latitude_entry_time?: SortOrderInput | SortOrder
    longitude_entry_time?: SortOrderInput | SortOrder
    photo_entry_time?: SortOrderInput | SortOrder
    departure_time?: SortOrderInput | SortOrder
    latitude_departure_time?: SortOrderInput | SortOrder
    longitude_departure_time?: SortOrderInput | SortOrder
    photo_departure_time?: SortOrderInput | SortOrder
    _count?: attendanceCountOrderByAggregateInput
    _avg?: attendanceAvgOrderByAggregateInput
    _max?: attendanceMaxOrderByAggregateInput
    _min?: attendanceMinOrderByAggregateInput
    _sum?: attendanceSumOrderByAggregateInput
  }

  export type attendanceScalarWhereWithAggregatesInput = {
    AND?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    OR?: attendanceScalarWhereWithAggregatesInput[]
    NOT?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    attendance_id?: IntWithAggregatesFilter<"attendance"> | number
    user_id?: IntNullableWithAggregatesFilter<"attendance"> | number | null
    entry_time?: DateTimeNullableWithAggregatesFilter<"attendance"> | Date | string | null
    latitude_entry_time?: DecimalNullableWithAggregatesFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: DecimalNullableWithAggregatesFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: StringNullableWithAggregatesFilter<"attendance"> | string | null
    departure_time?: DateTimeNullableWithAggregatesFilter<"attendance"> | Date | string | null
    latitude_departure_time?: DecimalNullableWithAggregatesFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: DecimalNullableWithAggregatesFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: StringNullableWithAggregatesFilter<"attendance"> | string | null
  }

  export type fieldWhereInput = {
    AND?: fieldWhereInput | fieldWhereInput[]
    OR?: fieldWhereInput[]
    NOT?: fieldWhereInput | fieldWhereInput[]
    field_id?: IntFilter<"field"> | number
    name?: StringNullableFilter<"field"> | string | null
    type_db?: StringNullableFilter<"field"> | string | null
    type_field_form?: StringNullableFilter<"field"> | string | null
    type_form?: StringNullableFilter<"field"> | string | null
    options_select?: StringNullableFilter<"field"> | string | null
    mandatory?: IntNullableFilter<"field"> | number | null
    type_select?: StringNullableFilter<"field"> | string | null
    parent_field_id?: IntNullableFilter<"field"> | number | null
    order?: IntNullableFilter<"field"> | number | null
    form_field?: Form_fieldListRelationFilter
  }

  export type fieldOrderByWithRelationInput = {
    field_id?: SortOrder
    name?: SortOrderInput | SortOrder
    type_db?: SortOrderInput | SortOrder
    type_field_form?: SortOrderInput | SortOrder
    type_form?: SortOrderInput | SortOrder
    options_select?: SortOrderInput | SortOrder
    mandatory?: SortOrderInput | SortOrder
    type_select?: SortOrderInput | SortOrder
    parent_field_id?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    form_field?: form_fieldOrderByRelationAggregateInput
  }

  export type fieldWhereUniqueInput = Prisma.AtLeast<{
    field_id?: number
    AND?: fieldWhereInput | fieldWhereInput[]
    OR?: fieldWhereInput[]
    NOT?: fieldWhereInput | fieldWhereInput[]
    name?: StringNullableFilter<"field"> | string | null
    type_db?: StringNullableFilter<"field"> | string | null
    type_field_form?: StringNullableFilter<"field"> | string | null
    type_form?: StringNullableFilter<"field"> | string | null
    options_select?: StringNullableFilter<"field"> | string | null
    mandatory?: IntNullableFilter<"field"> | number | null
    type_select?: StringNullableFilter<"field"> | string | null
    parent_field_id?: IntNullableFilter<"field"> | number | null
    order?: IntNullableFilter<"field"> | number | null
    form_field?: Form_fieldListRelationFilter
  }, "field_id">

  export type fieldOrderByWithAggregationInput = {
    field_id?: SortOrder
    name?: SortOrderInput | SortOrder
    type_db?: SortOrderInput | SortOrder
    type_field_form?: SortOrderInput | SortOrder
    type_form?: SortOrderInput | SortOrder
    options_select?: SortOrderInput | SortOrder
    mandatory?: SortOrderInput | SortOrder
    type_select?: SortOrderInput | SortOrder
    parent_field_id?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    _count?: fieldCountOrderByAggregateInput
    _avg?: fieldAvgOrderByAggregateInput
    _max?: fieldMaxOrderByAggregateInput
    _min?: fieldMinOrderByAggregateInput
    _sum?: fieldSumOrderByAggregateInput
  }

  export type fieldScalarWhereWithAggregatesInput = {
    AND?: fieldScalarWhereWithAggregatesInput | fieldScalarWhereWithAggregatesInput[]
    OR?: fieldScalarWhereWithAggregatesInput[]
    NOT?: fieldScalarWhereWithAggregatesInput | fieldScalarWhereWithAggregatesInput[]
    field_id?: IntWithAggregatesFilter<"field"> | number
    name?: StringNullableWithAggregatesFilter<"field"> | string | null
    type_db?: StringNullableWithAggregatesFilter<"field"> | string | null
    type_field_form?: StringNullableWithAggregatesFilter<"field"> | string | null
    type_form?: StringNullableWithAggregatesFilter<"field"> | string | null
    options_select?: StringNullableWithAggregatesFilter<"field"> | string | null
    mandatory?: IntNullableWithAggregatesFilter<"field"> | number | null
    type_select?: StringNullableWithAggregatesFilter<"field"> | string | null
    parent_field_id?: IntNullableWithAggregatesFilter<"field"> | number | null
    order?: IntNullableWithAggregatesFilter<"field"> | number | null
  }

  export type formWhereInput = {
    AND?: formWhereInput | formWhereInput[]
    OR?: formWhereInput[]
    NOT?: formWhereInput | formWhereInput[]
    form_id?: IntFilter<"form"> | number
    name?: StringFilter<"form"> | string
    route_app_movil?: StringNullableFilter<"form"> | string | null
    icono_app_movil?: StringNullableFilter<"form"> | string | null
    have_signature?: IntNullableFilter<"form"> | number | null
    form_field?: Form_fieldListRelationFilter
    form_photo_form?: Form_photo_formListRelationFilter
  }

  export type formOrderByWithRelationInput = {
    form_id?: SortOrder
    name?: SortOrder
    route_app_movil?: SortOrderInput | SortOrder
    icono_app_movil?: SortOrderInput | SortOrder
    have_signature?: SortOrderInput | SortOrder
    form_field?: form_fieldOrderByRelationAggregateInput
    form_photo_form?: form_photo_formOrderByRelationAggregateInput
  }

  export type formWhereUniqueInput = Prisma.AtLeast<{
    form_id?: number
    AND?: formWhereInput | formWhereInput[]
    OR?: formWhereInput[]
    NOT?: formWhereInput | formWhereInput[]
    name?: StringFilter<"form"> | string
    route_app_movil?: StringNullableFilter<"form"> | string | null
    icono_app_movil?: StringNullableFilter<"form"> | string | null
    have_signature?: IntNullableFilter<"form"> | number | null
    form_field?: Form_fieldListRelationFilter
    form_photo_form?: Form_photo_formListRelationFilter
  }, "form_id">

  export type formOrderByWithAggregationInput = {
    form_id?: SortOrder
    name?: SortOrder
    route_app_movil?: SortOrderInput | SortOrder
    icono_app_movil?: SortOrderInput | SortOrder
    have_signature?: SortOrderInput | SortOrder
    _count?: formCountOrderByAggregateInput
    _avg?: formAvgOrderByAggregateInput
    _max?: formMaxOrderByAggregateInput
    _min?: formMinOrderByAggregateInput
    _sum?: formSumOrderByAggregateInput
  }

  export type formScalarWhereWithAggregatesInput = {
    AND?: formScalarWhereWithAggregatesInput | formScalarWhereWithAggregatesInput[]
    OR?: formScalarWhereWithAggregatesInput[]
    NOT?: formScalarWhereWithAggregatesInput | formScalarWhereWithAggregatesInput[]
    form_id?: IntWithAggregatesFilter<"form"> | number
    name?: StringWithAggregatesFilter<"form"> | string
    route_app_movil?: StringNullableWithAggregatesFilter<"form"> | string | null
    icono_app_movil?: StringNullableWithAggregatesFilter<"form"> | string | null
    have_signature?: IntNullableWithAggregatesFilter<"form"> | number | null
  }

  export type form_fieldWhereInput = {
    AND?: form_fieldWhereInput | form_fieldWhereInput[]
    OR?: form_fieldWhereInput[]
    NOT?: form_fieldWhereInput | form_fieldWhereInput[]
    id?: IntFilter<"form_field"> | number
    form_id?: IntNullableFilter<"form_field"> | number | null
    field_id?: IntNullableFilter<"form_field"> | number | null
    joined_at?: DateTimeNullableFilter<"form_field"> | Date | string | null
    field?: XOR<FieldNullableRelationFilter, fieldWhereInput> | null
    form?: XOR<FormNullableRelationFilter, formWhereInput> | null
  }

  export type form_fieldOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrderInput | SortOrder
    field_id?: SortOrderInput | SortOrder
    joined_at?: SortOrderInput | SortOrder
    field?: fieldOrderByWithRelationInput
    form?: formOrderByWithRelationInput
  }

  export type form_fieldWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: form_fieldWhereInput | form_fieldWhereInput[]
    OR?: form_fieldWhereInput[]
    NOT?: form_fieldWhereInput | form_fieldWhereInput[]
    form_id?: IntNullableFilter<"form_field"> | number | null
    field_id?: IntNullableFilter<"form_field"> | number | null
    joined_at?: DateTimeNullableFilter<"form_field"> | Date | string | null
    field?: XOR<FieldNullableRelationFilter, fieldWhereInput> | null
    form?: XOR<FormNullableRelationFilter, formWhereInput> | null
  }, "id">

  export type form_fieldOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrderInput | SortOrder
    field_id?: SortOrderInput | SortOrder
    joined_at?: SortOrderInput | SortOrder
    _count?: form_fieldCountOrderByAggregateInput
    _avg?: form_fieldAvgOrderByAggregateInput
    _max?: form_fieldMaxOrderByAggregateInput
    _min?: form_fieldMinOrderByAggregateInput
    _sum?: form_fieldSumOrderByAggregateInput
  }

  export type form_fieldScalarWhereWithAggregatesInput = {
    AND?: form_fieldScalarWhereWithAggregatesInput | form_fieldScalarWhereWithAggregatesInput[]
    OR?: form_fieldScalarWhereWithAggregatesInput[]
    NOT?: form_fieldScalarWhereWithAggregatesInput | form_fieldScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"form_field"> | number
    form_id?: IntNullableWithAggregatesFilter<"form_field"> | number | null
    field_id?: IntNullableWithAggregatesFilter<"form_field"> | number | null
    joined_at?: DateTimeNullableWithAggregatesFilter<"form_field"> | Date | string | null
  }

  export type form_photo_formWhereInput = {
    AND?: form_photo_formWhereInput | form_photo_formWhereInput[]
    OR?: form_photo_formWhereInput[]
    NOT?: form_photo_formWhereInput | form_photo_formWhereInput[]
    id?: IntFilter<"form_photo_form"> | number
    form_id?: IntNullableFilter<"form_photo_form"> | number | null
    photo_form_id?: IntNullableFilter<"form_photo_form"> | number | null
    form?: XOR<FormNullableRelationFilter, formWhereInput> | null
    photo_form?: XOR<Photo_formNullableRelationFilter, photo_formWhereInput> | null
  }

  export type form_photo_formOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrderInput | SortOrder
    photo_form_id?: SortOrderInput | SortOrder
    form?: formOrderByWithRelationInput
    photo_form?: photo_formOrderByWithRelationInput
  }

  export type form_photo_formWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: form_photo_formWhereInput | form_photo_formWhereInput[]
    OR?: form_photo_formWhereInput[]
    NOT?: form_photo_formWhereInput | form_photo_formWhereInput[]
    form_id?: IntNullableFilter<"form_photo_form"> | number | null
    photo_form_id?: IntNullableFilter<"form_photo_form"> | number | null
    form?: XOR<FormNullableRelationFilter, formWhereInput> | null
    photo_form?: XOR<Photo_formNullableRelationFilter, photo_formWhereInput> | null
  }, "id">

  export type form_photo_formOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrderInput | SortOrder
    photo_form_id?: SortOrderInput | SortOrder
    _count?: form_photo_formCountOrderByAggregateInput
    _avg?: form_photo_formAvgOrderByAggregateInput
    _max?: form_photo_formMaxOrderByAggregateInput
    _min?: form_photo_formMinOrderByAggregateInput
    _sum?: form_photo_formSumOrderByAggregateInput
  }

  export type form_photo_formScalarWhereWithAggregatesInput = {
    AND?: form_photo_formScalarWhereWithAggregatesInput | form_photo_formScalarWhereWithAggregatesInput[]
    OR?: form_photo_formScalarWhereWithAggregatesInput[]
    NOT?: form_photo_formScalarWhereWithAggregatesInput | form_photo_formScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"form_photo_form"> | number
    form_id?: IntNullableWithAggregatesFilter<"form_photo_form"> | number | null
    photo_form_id?: IntNullableWithAggregatesFilter<"form_photo_form"> | number | null
  }

  export type photo_formWhereInput = {
    AND?: photo_formWhereInput | photo_formWhereInput[]
    OR?: photo_formWhereInput[]
    NOT?: photo_formWhereInput | photo_formWhereInput[]
    photo_form_id?: IntFilter<"photo_form"> | number
    name?: StringNullableFilter<"photo_form"> | string | null
    form_photo_form?: Form_photo_formListRelationFilter
  }

  export type photo_formOrderByWithRelationInput = {
    photo_form_id?: SortOrder
    name?: SortOrderInput | SortOrder
    form_photo_form?: form_photo_formOrderByRelationAggregateInput
  }

  export type photo_formWhereUniqueInput = Prisma.AtLeast<{
    photo_form_id?: number
    AND?: photo_formWhereInput | photo_formWhereInput[]
    OR?: photo_formWhereInput[]
    NOT?: photo_formWhereInput | photo_formWhereInput[]
    name?: StringNullableFilter<"photo_form"> | string | null
    form_photo_form?: Form_photo_formListRelationFilter
  }, "photo_form_id">

  export type photo_formOrderByWithAggregationInput = {
    photo_form_id?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: photo_formCountOrderByAggregateInput
    _avg?: photo_formAvgOrderByAggregateInput
    _max?: photo_formMaxOrderByAggregateInput
    _min?: photo_formMinOrderByAggregateInput
    _sum?: photo_formSumOrderByAggregateInput
  }

  export type photo_formScalarWhereWithAggregatesInput = {
    AND?: photo_formScalarWhereWithAggregatesInput | photo_formScalarWhereWithAggregatesInput[]
    OR?: photo_formScalarWhereWithAggregatesInput[]
    NOT?: photo_formScalarWhereWithAggregatesInput | photo_formScalarWhereWithAggregatesInput[]
    photo_form_id?: IntWithAggregatesFilter<"photo_form"> | number
    name?: StringNullableWithAggregatesFilter<"photo_form"> | string | null
  }

  export type placeWhereInput = {
    AND?: placeWhereInput | placeWhereInput[]
    OR?: placeWhereInput[]
    NOT?: placeWhereInput | placeWhereInput[]
    place_id?: IntFilter<"place"> | number
    name?: StringNullableFilter<"place"> | string | null
    logo?: StringNullableFilter<"place"> | string | null
    latitude?: DecimalNullableFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    active?: IntNullableFilter<"place"> | number | null
    place_user?: Place_userListRelationFilter
    register_form_dynamic?: Register_form_dynamicListRelationFilter
  }

  export type placeOrderByWithRelationInput = {
    place_id?: SortOrder
    name?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    place_user?: place_userOrderByRelationAggregateInput
    register_form_dynamic?: register_form_dynamicOrderByRelationAggregateInput
  }

  export type placeWhereUniqueInput = Prisma.AtLeast<{
    place_id?: number
    AND?: placeWhereInput | placeWhereInput[]
    OR?: placeWhereInput[]
    NOT?: placeWhereInput | placeWhereInput[]
    name?: StringNullableFilter<"place"> | string | null
    logo?: StringNullableFilter<"place"> | string | null
    latitude?: DecimalNullableFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    active?: IntNullableFilter<"place"> | number | null
    place_user?: Place_userListRelationFilter
    register_form_dynamic?: Register_form_dynamicListRelationFilter
  }, "place_id">

  export type placeOrderByWithAggregationInput = {
    place_id?: SortOrder
    name?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    _count?: placeCountOrderByAggregateInput
    _avg?: placeAvgOrderByAggregateInput
    _max?: placeMaxOrderByAggregateInput
    _min?: placeMinOrderByAggregateInput
    _sum?: placeSumOrderByAggregateInput
  }

  export type placeScalarWhereWithAggregatesInput = {
    AND?: placeScalarWhereWithAggregatesInput | placeScalarWhereWithAggregatesInput[]
    OR?: placeScalarWhereWithAggregatesInput[]
    NOT?: placeScalarWhereWithAggregatesInput | placeScalarWhereWithAggregatesInput[]
    place_id?: IntWithAggregatesFilter<"place"> | number
    name?: StringNullableWithAggregatesFilter<"place"> | string | null
    logo?: StringNullableWithAggregatesFilter<"place"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"place"> | Decimal | DecimalJsLike | number | string | null
    active?: IntNullableWithAggregatesFilter<"place"> | number | null
  }

  export type place_userWhereInput = {
    AND?: place_userWhereInput | place_userWhereInput[]
    OR?: place_userWhereInput[]
    NOT?: place_userWhereInput | place_userWhereInput[]
    id?: IntFilter<"place_user"> | number
    user_id?: IntNullableFilter<"place_user"> | number | null
    place_id?: IntNullableFilter<"place_user"> | number | null
    joined_at?: DateTimeNullableFilter<"place_user"> | Date | string | null
    place?: XOR<PlaceNullableRelationFilter, placeWhereInput> | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type place_userOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    place_id?: SortOrderInput | SortOrder
    joined_at?: SortOrderInput | SortOrder
    place?: placeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type place_userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_place_id?: place_userUser_idPlace_idCompoundUniqueInput
    AND?: place_userWhereInput | place_userWhereInput[]
    OR?: place_userWhereInput[]
    NOT?: place_userWhereInput | place_userWhereInput[]
    user_id?: IntNullableFilter<"place_user"> | number | null
    place_id?: IntNullableFilter<"place_user"> | number | null
    joined_at?: DateTimeNullableFilter<"place_user"> | Date | string | null
    place?: XOR<PlaceNullableRelationFilter, placeWhereInput> | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "id" | "user_id_place_id">

  export type place_userOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    place_id?: SortOrderInput | SortOrder
    joined_at?: SortOrderInput | SortOrder
    _count?: place_userCountOrderByAggregateInput
    _avg?: place_userAvgOrderByAggregateInput
    _max?: place_userMaxOrderByAggregateInput
    _min?: place_userMinOrderByAggregateInput
    _sum?: place_userSumOrderByAggregateInput
  }

  export type place_userScalarWhereWithAggregatesInput = {
    AND?: place_userScalarWhereWithAggregatesInput | place_userScalarWhereWithAggregatesInput[]
    OR?: place_userScalarWhereWithAggregatesInput[]
    NOT?: place_userScalarWhereWithAggregatesInput | place_userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"place_user"> | number
    user_id?: IntNullableWithAggregatesFilter<"place_user"> | number | null
    place_id?: IntNullableWithAggregatesFilter<"place_user"> | number | null
    joined_at?: DateTimeNullableWithAggregatesFilter<"place_user"> | Date | string | null
  }

  export type register_form_dynamicWhereInput = {
    AND?: register_form_dynamicWhereInput | register_form_dynamicWhereInput[]
    OR?: register_form_dynamicWhereInput[]
    NOT?: register_form_dynamicWhereInput | register_form_dynamicWhereInput[]
    id?: IntFilter<"register_form_dynamic"> | number
    place_id?: IntNullableFilter<"register_form_dynamic"> | number | null
    data_json?: StringNullableFilter<"register_form_dynamic"> | string | null
    registration_date?: DateTimeNullableFilter<"register_form_dynamic"> | Date | string | null
    place?: XOR<PlaceNullableRelationFilter, placeWhereInput> | null
  }

  export type register_form_dynamicOrderByWithRelationInput = {
    id?: SortOrder
    place_id?: SortOrderInput | SortOrder
    data_json?: SortOrderInput | SortOrder
    registration_date?: SortOrderInput | SortOrder
    place?: placeOrderByWithRelationInput
  }

  export type register_form_dynamicWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: register_form_dynamicWhereInput | register_form_dynamicWhereInput[]
    OR?: register_form_dynamicWhereInput[]
    NOT?: register_form_dynamicWhereInput | register_form_dynamicWhereInput[]
    place_id?: IntNullableFilter<"register_form_dynamic"> | number | null
    data_json?: StringNullableFilter<"register_form_dynamic"> | string | null
    registration_date?: DateTimeNullableFilter<"register_form_dynamic"> | Date | string | null
    place?: XOR<PlaceNullableRelationFilter, placeWhereInput> | null
  }, "id">

  export type register_form_dynamicOrderByWithAggregationInput = {
    id?: SortOrder
    place_id?: SortOrderInput | SortOrder
    data_json?: SortOrderInput | SortOrder
    registration_date?: SortOrderInput | SortOrder
    _count?: register_form_dynamicCountOrderByAggregateInput
    _avg?: register_form_dynamicAvgOrderByAggregateInput
    _max?: register_form_dynamicMaxOrderByAggregateInput
    _min?: register_form_dynamicMinOrderByAggregateInput
    _sum?: register_form_dynamicSumOrderByAggregateInput
  }

  export type register_form_dynamicScalarWhereWithAggregatesInput = {
    AND?: register_form_dynamicScalarWhereWithAggregatesInput | register_form_dynamicScalarWhereWithAggregatesInput[]
    OR?: register_form_dynamicScalarWhereWithAggregatesInput[]
    NOT?: register_form_dynamicScalarWhereWithAggregatesInput | register_form_dynamicScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"register_form_dynamic"> | number
    place_id?: IntNullableWithAggregatesFilter<"register_form_dynamic"> | number | null
    data_json?: StringNullableWithAggregatesFilter<"register_form_dynamic"> | string | null
    registration_date?: DateTimeNullableWithAggregatesFilter<"register_form_dynamic"> | Date | string | null
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    role_id?: IntFilter<"role"> | number
    name?: StringNullableFilter<"role"> | string | null
    active?: IntNullableFilter<"role"> | number | null
    created_at?: DateTimeNullableFilter<"role"> | Date | string | null
    user?: UserListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    role_id?: SortOrder
    name?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    user?: userOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    role_id?: number
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    name?: StringNullableFilter<"role"> | string | null
    active?: IntNullableFilter<"role"> | number | null
    created_at?: DateTimeNullableFilter<"role"> | Date | string | null
    user?: UserListRelationFilter
  }, "role_id">

  export type roleOrderByWithAggregationInput = {
    role_id?: SortOrder
    name?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    role_id?: IntWithAggregatesFilter<"role"> | number
    name?: StringNullableWithAggregatesFilter<"role"> | string | null
    active?: IntNullableWithAggregatesFilter<"role"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"role"> | Date | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    user_id?: IntFilter<"user"> | number
    first_name?: StringFilter<"user"> | string
    middle_name?: StringNullableFilter<"user"> | string | null
    maternal_surname?: StringNullableFilter<"user"> | string | null
    paternal_surname?: StringFilter<"user"> | string
    birthdate?: DateTimeNullableFilter<"user"> | Date | string | null
    photo_url?: StringNullableFilter<"user"> | string | null
    entry_date?: DateTimeNullableFilter<"user"> | Date | string | null
    low_date?: DateTimeNullableFilter<"user"> | Date | string | null
    active?: IntNullableFilter<"user"> | number | null
    access_web?: IntNullableFilter<"user"> | number | null
    access_movil?: IntNullableFilter<"user"> | number | null
    role_id?: IntNullableFilter<"user"> | number | null
    access?: AccessListRelationFilter
    attendance?: AttendanceListRelationFilter
    place_user?: Place_userListRelationFilter
    role?: XOR<RoleNullableRelationFilter, roleWhereInput> | null
    user_contact?: User_contactListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    maternal_surname?: SortOrderInput | SortOrder
    paternal_surname?: SortOrder
    birthdate?: SortOrderInput | SortOrder
    photo_url?: SortOrderInput | SortOrder
    entry_date?: SortOrderInput | SortOrder
    low_date?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    access_web?: SortOrderInput | SortOrder
    access_movil?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    access?: accessOrderByRelationAggregateInput
    attendance?: attendanceOrderByRelationAggregateInput
    place_user?: place_userOrderByRelationAggregateInput
    role?: roleOrderByWithRelationInput
    user_contact?: user_contactOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    first_name?: StringFilter<"user"> | string
    middle_name?: StringNullableFilter<"user"> | string | null
    maternal_surname?: StringNullableFilter<"user"> | string | null
    paternal_surname?: StringFilter<"user"> | string
    birthdate?: DateTimeNullableFilter<"user"> | Date | string | null
    photo_url?: StringNullableFilter<"user"> | string | null
    entry_date?: DateTimeNullableFilter<"user"> | Date | string | null
    low_date?: DateTimeNullableFilter<"user"> | Date | string | null
    active?: IntNullableFilter<"user"> | number | null
    access_web?: IntNullableFilter<"user"> | number | null
    access_movil?: IntNullableFilter<"user"> | number | null
    role_id?: IntNullableFilter<"user"> | number | null
    access?: AccessListRelationFilter
    attendance?: AttendanceListRelationFilter
    place_user?: Place_userListRelationFilter
    role?: XOR<RoleNullableRelationFilter, roleWhereInput> | null
    user_contact?: User_contactListRelationFilter
  }, "user_id">

  export type userOrderByWithAggregationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    maternal_surname?: SortOrderInput | SortOrder
    paternal_surname?: SortOrder
    birthdate?: SortOrderInput | SortOrder
    photo_url?: SortOrderInput | SortOrder
    entry_date?: SortOrderInput | SortOrder
    low_date?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    access_web?: SortOrderInput | SortOrder
    access_movil?: SortOrderInput | SortOrder
    role_id?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"user"> | number
    first_name?: StringWithAggregatesFilter<"user"> | string
    middle_name?: StringNullableWithAggregatesFilter<"user"> | string | null
    maternal_surname?: StringNullableWithAggregatesFilter<"user"> | string | null
    paternal_surname?: StringWithAggregatesFilter<"user"> | string
    birthdate?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    photo_url?: StringNullableWithAggregatesFilter<"user"> | string | null
    entry_date?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    low_date?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    active?: IntNullableWithAggregatesFilter<"user"> | number | null
    access_web?: IntNullableWithAggregatesFilter<"user"> | number | null
    access_movil?: IntNullableWithAggregatesFilter<"user"> | number | null
    role_id?: IntNullableWithAggregatesFilter<"user"> | number | null
  }

  export type user_contactWhereInput = {
    AND?: user_contactWhereInput | user_contactWhereInput[]
    OR?: user_contactWhereInput[]
    NOT?: user_contactWhereInput | user_contactWhereInput[]
    id?: IntFilter<"user_contact"> | number
    street?: StringNullableFilter<"user_contact"> | string | null
    outer_number?: StringNullableFilter<"user_contact"> | string | null
    interior_number?: StringNullableFilter<"user_contact"> | string | null
    cologne?: StringNullableFilter<"user_contact"> | string | null
    municipality?: StringNullableFilter<"user_contact"> | string | null
    cp?: IntNullableFilter<"user_contact"> | number | null
    phone_number?: StringNullableFilter<"user_contact"> | string | null
    email?: StringNullableFilter<"user_contact"> | string | null
    user_id?: IntNullableFilter<"user_contact"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type user_contactOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrderInput | SortOrder
    outer_number?: SortOrderInput | SortOrder
    interior_number?: SortOrderInput | SortOrder
    cologne?: SortOrderInput | SortOrder
    municipality?: SortOrderInput | SortOrder
    cp?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
  }

  export type user_contactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_contactWhereInput | user_contactWhereInput[]
    OR?: user_contactWhereInput[]
    NOT?: user_contactWhereInput | user_contactWhereInput[]
    street?: StringNullableFilter<"user_contact"> | string | null
    outer_number?: StringNullableFilter<"user_contact"> | string | null
    interior_number?: StringNullableFilter<"user_contact"> | string | null
    cologne?: StringNullableFilter<"user_contact"> | string | null
    municipality?: StringNullableFilter<"user_contact"> | string | null
    cp?: IntNullableFilter<"user_contact"> | number | null
    phone_number?: StringNullableFilter<"user_contact"> | string | null
    email?: StringNullableFilter<"user_contact"> | string | null
    user_id?: IntNullableFilter<"user_contact"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "id">

  export type user_contactOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrderInput | SortOrder
    outer_number?: SortOrderInput | SortOrder
    interior_number?: SortOrderInput | SortOrder
    cologne?: SortOrderInput | SortOrder
    municipality?: SortOrderInput | SortOrder
    cp?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    _count?: user_contactCountOrderByAggregateInput
    _avg?: user_contactAvgOrderByAggregateInput
    _max?: user_contactMaxOrderByAggregateInput
    _min?: user_contactMinOrderByAggregateInput
    _sum?: user_contactSumOrderByAggregateInput
  }

  export type user_contactScalarWhereWithAggregatesInput = {
    AND?: user_contactScalarWhereWithAggregatesInput | user_contactScalarWhereWithAggregatesInput[]
    OR?: user_contactScalarWhereWithAggregatesInput[]
    NOT?: user_contactScalarWhereWithAggregatesInput | user_contactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_contact"> | number
    street?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    outer_number?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    interior_number?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    cologne?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    municipality?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    cp?: IntNullableWithAggregatesFilter<"user_contact"> | number | null
    phone_number?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    email?: StringNullableWithAggregatesFilter<"user_contact"> | string | null
    user_id?: IntNullableWithAggregatesFilter<"user_contact"> | number | null
  }

  export type accessCreateInput = {
    username: string
    password: string
    active?: number | null
    user?: userCreateNestedOneWithoutAccessInput
  }

  export type accessUncheckedCreateInput = {
    access_id?: number
    username: string
    password: string
    user_id?: number | null
    active?: number | null
  }

  export type accessUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: NullableIntFieldUpdateOperationsInput | number | null
    user?: userUpdateOneWithoutAccessNestedInput
  }

  export type accessUncheckedUpdateInput = {
    access_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accessCreateManyInput = {
    username: string
    password: string
    user_id?: number | null
    active?: number | null
  }

  export type accessUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accessUncheckedUpdateManyInput = {
    access_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceCreateInput = {
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
    user?: userCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateInput = {
    attendance_id?: number
    user_id?: number | null
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
  }

  export type attendanceUpdateInput = {
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type attendanceCreateManyInput = {
    user_id?: number | null
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
  }

  export type attendanceUpdateManyMutationInput = {
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type attendanceUncheckedUpdateManyInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type fieldCreateInput = {
    name?: string | null
    type_db?: string | null
    type_field_form?: string | null
    type_form?: string | null
    options_select?: string | null
    mandatory?: number | null
    type_select?: string | null
    parent_field_id?: number | null
    order?: number | null
    form_field?: form_fieldCreateNestedManyWithoutFieldInput
  }

  export type fieldUncheckedCreateInput = {
    field_id?: number
    name?: string | null
    type_db?: string | null
    type_field_form?: string | null
    type_form?: string | null
    options_select?: string | null
    mandatory?: number | null
    type_select?: string | null
    parent_field_id?: number | null
    order?: number | null
    form_field?: form_fieldUncheckedCreateNestedManyWithoutFieldInput
  }

  export type fieldUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUpdateManyWithoutFieldNestedInput
  }

  export type fieldUncheckedUpdateInput = {
    field_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUncheckedUpdateManyWithoutFieldNestedInput
  }

  export type fieldCreateManyInput = {
    name?: string | null
    type_db?: string | null
    type_field_form?: string | null
    type_form?: string | null
    options_select?: string | null
    mandatory?: number | null
    type_select?: string | null
    parent_field_id?: number | null
    order?: number | null
  }

  export type fieldUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type fieldUncheckedUpdateManyInput = {
    field_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formCreateInput = {
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_field?: form_fieldCreateNestedManyWithoutFormInput
    form_photo_form?: form_photo_formCreateNestedManyWithoutFormInput
  }

  export type formUncheckedCreateInput = {
    form_id?: number
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_field?: form_fieldUncheckedCreateNestedManyWithoutFormInput
    form_photo_form?: form_photo_formUncheckedCreateNestedManyWithoutFormInput
  }

  export type formUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUpdateManyWithoutFormNestedInput
    form_photo_form?: form_photo_formUpdateManyWithoutFormNestedInput
  }

  export type formUncheckedUpdateInput = {
    form_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUncheckedUpdateManyWithoutFormNestedInput
    form_photo_form?: form_photo_formUncheckedUpdateManyWithoutFormNestedInput
  }

  export type formCreateManyInput = {
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
  }

  export type formUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formUncheckedUpdateManyInput = {
    form_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type form_fieldCreateInput = {
    joined_at?: Date | string | null
    field?: fieldCreateNestedOneWithoutForm_fieldInput
    form?: formCreateNestedOneWithoutForm_fieldInput
  }

  export type form_fieldUncheckedCreateInput = {
    id?: number
    form_id?: number | null
    field_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_fieldUpdateInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    field?: fieldUpdateOneWithoutForm_fieldNestedInput
    form?: formUpdateOneWithoutForm_fieldNestedInput
  }

  export type form_fieldUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    field_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_fieldCreateManyInput = {
    form_id?: number | null
    field_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_fieldUpdateManyMutationInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_fieldUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    field_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_photo_formCreateInput = {
    form?: formCreateNestedOneWithoutForm_photo_formInput
    photo_form?: photo_formCreateNestedOneWithoutForm_photo_formInput
  }

  export type form_photo_formUncheckedCreateInput = {
    id?: number
    form_id?: number | null
    photo_form_id?: number | null
  }

  export type form_photo_formUpdateInput = {
    form?: formUpdateOneWithoutForm_photo_formNestedInput
    photo_form?: photo_formUpdateOneWithoutForm_photo_formNestedInput
  }

  export type form_photo_formUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    photo_form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type form_photo_formCreateManyInput = {
    form_id?: number | null
    photo_form_id?: number | null
  }

  export type form_photo_formUpdateManyMutationInput = {

  }

  export type form_photo_formUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    photo_form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type photo_formCreateInput = {
    name?: string | null
    form_photo_form?: form_photo_formCreateNestedManyWithoutPhoto_formInput
  }

  export type photo_formUncheckedCreateInput = {
    photo_form_id?: number
    name?: string | null
    form_photo_form?: form_photo_formUncheckedCreateNestedManyWithoutPhoto_formInput
  }

  export type photo_formUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    form_photo_form?: form_photo_formUpdateManyWithoutPhoto_formNestedInput
  }

  export type photo_formUncheckedUpdateInput = {
    photo_form_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    form_photo_form?: form_photo_formUncheckedUpdateManyWithoutPhoto_formNestedInput
  }

  export type photo_formCreateManyInput = {
    name?: string | null
  }

  export type photo_formUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type photo_formUncheckedUpdateManyInput = {
    photo_form_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type placeCreateInput = {
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    place_user?: place_userCreateNestedManyWithoutPlaceInput
    register_form_dynamic?: register_form_dynamicCreateNestedManyWithoutPlaceInput
  }

  export type placeUncheckedCreateInput = {
    place_id?: number
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    place_user?: place_userUncheckedCreateNestedManyWithoutPlaceInput
    register_form_dynamic?: register_form_dynamicUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type placeUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    place_user?: place_userUpdateManyWithoutPlaceNestedInput
    register_form_dynamic?: register_form_dynamicUpdateManyWithoutPlaceNestedInput
  }

  export type placeUncheckedUpdateInput = {
    place_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    place_user?: place_userUncheckedUpdateManyWithoutPlaceNestedInput
    register_form_dynamic?: register_form_dynamicUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type placeCreateManyInput = {
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
  }

  export type placeUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type placeUncheckedUpdateManyInput = {
    place_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type place_userCreateInput = {
    joined_at?: Date | string | null
    place?: placeCreateNestedOneWithoutPlace_userInput
    user?: userCreateNestedOneWithoutPlace_userInput
  }

  export type place_userUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    place_id?: number | null
    joined_at?: Date | string | null
  }

  export type place_userUpdateInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    place?: placeUpdateOneWithoutPlace_userNestedInput
    user?: userUpdateOneWithoutPlace_userNestedInput
  }

  export type place_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type place_userCreateManyInput = {
    user_id?: number | null
    place_id?: number | null
    joined_at?: Date | string | null
  }

  export type place_userUpdateManyMutationInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type place_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicCreateInput = {
    data_json?: string | null
    registration_date?: Date | string | null
    place?: placeCreateNestedOneWithoutRegister_form_dynamicInput
  }

  export type register_form_dynamicUncheckedCreateInput = {
    id?: number
    place_id?: number | null
    data_json?: string | null
    registration_date?: Date | string | null
  }

  export type register_form_dynamicUpdateInput = {
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    place?: placeUpdateOneWithoutRegister_form_dynamicNestedInput
  }

  export type register_form_dynamicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicCreateManyInput = {
    place_id?: number | null
    data_json?: string | null
    registration_date?: Date | string | null
  }

  export type register_form_dynamicUpdateManyMutationInput = {
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type roleCreateInput = {
    name?: string | null
    active?: number | null
    created_at?: Date | string | null
    user?: userCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    role_id?: number
    name?: string | null
    active?: number | null
    created_at?: Date | string | null
    user?: userUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type roleCreateManyInput = {
    name?: string | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type roleUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type roleUncheckedUpdateManyInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userCreateInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessCreateNestedManyWithoutUserInput
    attendance?: attendanceCreateNestedManyWithoutUserInput
    place_user?: place_userCreateNestedManyWithoutUserInput
    role?: roleCreateNestedOneWithoutUserInput
    user_contact?: user_contactCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
    access?: accessUncheckedCreateNestedManyWithoutUserInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutUserInput
    place_user?: place_userUncheckedCreateNestedManyWithoutUserInput
    user_contact?: user_contactUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUpdateManyWithoutUserNestedInput
    attendance?: attendanceUpdateManyWithoutUserNestedInput
    place_user?: place_userUpdateManyWithoutUserNestedInput
    role?: roleUpdateOneWithoutUserNestedInput
    user_contact?: user_contactUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUncheckedUpdateManyWithoutUserNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutUserNestedInput
    place_user?: place_userUncheckedUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
  }

  export type userUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type userUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_contactCreateInput = {
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
    user?: userCreateNestedOneWithoutUser_contactInput
  }

  export type user_contactUncheckedCreateInput = {
    id?: number
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
    user_id?: number | null
  }

  export type user_contactUpdateInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutUser_contactNestedInput
  }

  export type user_contactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_contactCreateManyInput = {
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
    user_id?: number | null
  }

  export type user_contactUpdateManyMutationInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_contactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type accessCountOrderByAggregateInput = {
    access_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    user_id?: SortOrder
    active?: SortOrder
  }

  export type accessAvgOrderByAggregateInput = {
    access_id?: SortOrder
    user_id?: SortOrder
    active?: SortOrder
  }

  export type accessMaxOrderByAggregateInput = {
    access_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    user_id?: SortOrder
    active?: SortOrder
  }

  export type accessMinOrderByAggregateInput = {
    access_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    user_id?: SortOrder
    active?: SortOrder
  }

  export type accessSumOrderByAggregateInput = {
    access_id?: SortOrder
    user_id?: SortOrder
    active?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type attendanceCountOrderByAggregateInput = {
    attendance_id?: SortOrder
    user_id?: SortOrder
    entry_time?: SortOrder
    latitude_entry_time?: SortOrder
    longitude_entry_time?: SortOrder
    photo_entry_time?: SortOrder
    departure_time?: SortOrder
    latitude_departure_time?: SortOrder
    longitude_departure_time?: SortOrder
    photo_departure_time?: SortOrder
  }

  export type attendanceAvgOrderByAggregateInput = {
    attendance_id?: SortOrder
    user_id?: SortOrder
    latitude_entry_time?: SortOrder
    longitude_entry_time?: SortOrder
    latitude_departure_time?: SortOrder
    longitude_departure_time?: SortOrder
  }

  export type attendanceMaxOrderByAggregateInput = {
    attendance_id?: SortOrder
    user_id?: SortOrder
    entry_time?: SortOrder
    latitude_entry_time?: SortOrder
    longitude_entry_time?: SortOrder
    photo_entry_time?: SortOrder
    departure_time?: SortOrder
    latitude_departure_time?: SortOrder
    longitude_departure_time?: SortOrder
    photo_departure_time?: SortOrder
  }

  export type attendanceMinOrderByAggregateInput = {
    attendance_id?: SortOrder
    user_id?: SortOrder
    entry_time?: SortOrder
    latitude_entry_time?: SortOrder
    longitude_entry_time?: SortOrder
    photo_entry_time?: SortOrder
    departure_time?: SortOrder
    latitude_departure_time?: SortOrder
    longitude_departure_time?: SortOrder
    photo_departure_time?: SortOrder
  }

  export type attendanceSumOrderByAggregateInput = {
    attendance_id?: SortOrder
    user_id?: SortOrder
    latitude_entry_time?: SortOrder
    longitude_entry_time?: SortOrder
    latitude_departure_time?: SortOrder
    longitude_departure_time?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Form_fieldListRelationFilter = {
    every?: form_fieldWhereInput
    some?: form_fieldWhereInput
    none?: form_fieldWhereInput
  }

  export type form_fieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type fieldCountOrderByAggregateInput = {
    field_id?: SortOrder
    name?: SortOrder
    type_db?: SortOrder
    type_field_form?: SortOrder
    type_form?: SortOrder
    options_select?: SortOrder
    mandatory?: SortOrder
    type_select?: SortOrder
    parent_field_id?: SortOrder
    order?: SortOrder
  }

  export type fieldAvgOrderByAggregateInput = {
    field_id?: SortOrder
    mandatory?: SortOrder
    parent_field_id?: SortOrder
    order?: SortOrder
  }

  export type fieldMaxOrderByAggregateInput = {
    field_id?: SortOrder
    name?: SortOrder
    type_db?: SortOrder
    type_field_form?: SortOrder
    type_form?: SortOrder
    options_select?: SortOrder
    mandatory?: SortOrder
    type_select?: SortOrder
    parent_field_id?: SortOrder
    order?: SortOrder
  }

  export type fieldMinOrderByAggregateInput = {
    field_id?: SortOrder
    name?: SortOrder
    type_db?: SortOrder
    type_field_form?: SortOrder
    type_form?: SortOrder
    options_select?: SortOrder
    mandatory?: SortOrder
    type_select?: SortOrder
    parent_field_id?: SortOrder
    order?: SortOrder
  }

  export type fieldSumOrderByAggregateInput = {
    field_id?: SortOrder
    mandatory?: SortOrder
    parent_field_id?: SortOrder
    order?: SortOrder
  }

  export type Form_photo_formListRelationFilter = {
    every?: form_photo_formWhereInput
    some?: form_photo_formWhereInput
    none?: form_photo_formWhereInput
  }

  export type form_photo_formOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type formCountOrderByAggregateInput = {
    form_id?: SortOrder
    name?: SortOrder
    route_app_movil?: SortOrder
    icono_app_movil?: SortOrder
    have_signature?: SortOrder
  }

  export type formAvgOrderByAggregateInput = {
    form_id?: SortOrder
    have_signature?: SortOrder
  }

  export type formMaxOrderByAggregateInput = {
    form_id?: SortOrder
    name?: SortOrder
    route_app_movil?: SortOrder
    icono_app_movil?: SortOrder
    have_signature?: SortOrder
  }

  export type formMinOrderByAggregateInput = {
    form_id?: SortOrder
    name?: SortOrder
    route_app_movil?: SortOrder
    icono_app_movil?: SortOrder
    have_signature?: SortOrder
  }

  export type formSumOrderByAggregateInput = {
    form_id?: SortOrder
    have_signature?: SortOrder
  }

  export type FieldNullableRelationFilter = {
    is?: fieldWhereInput | null
    isNot?: fieldWhereInput | null
  }

  export type FormNullableRelationFilter = {
    is?: formWhereInput | null
    isNot?: formWhereInput | null
  }

  export type form_fieldCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    field_id?: SortOrder
    joined_at?: SortOrder
  }

  export type form_fieldAvgOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    field_id?: SortOrder
  }

  export type form_fieldMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    field_id?: SortOrder
    joined_at?: SortOrder
  }

  export type form_fieldMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    field_id?: SortOrder
    joined_at?: SortOrder
  }

  export type form_fieldSumOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    field_id?: SortOrder
  }

  export type Photo_formNullableRelationFilter = {
    is?: photo_formWhereInput | null
    isNot?: photo_formWhereInput | null
  }

  export type form_photo_formCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    photo_form_id?: SortOrder
  }

  export type form_photo_formAvgOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    photo_form_id?: SortOrder
  }

  export type form_photo_formMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    photo_form_id?: SortOrder
  }

  export type form_photo_formMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    photo_form_id?: SortOrder
  }

  export type form_photo_formSumOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    photo_form_id?: SortOrder
  }

  export type photo_formCountOrderByAggregateInput = {
    photo_form_id?: SortOrder
    name?: SortOrder
  }

  export type photo_formAvgOrderByAggregateInput = {
    photo_form_id?: SortOrder
  }

  export type photo_formMaxOrderByAggregateInput = {
    photo_form_id?: SortOrder
    name?: SortOrder
  }

  export type photo_formMinOrderByAggregateInput = {
    photo_form_id?: SortOrder
    name?: SortOrder
  }

  export type photo_formSumOrderByAggregateInput = {
    photo_form_id?: SortOrder
  }

  export type Place_userListRelationFilter = {
    every?: place_userWhereInput
    some?: place_userWhereInput
    none?: place_userWhereInput
  }

  export type Register_form_dynamicListRelationFilter = {
    every?: register_form_dynamicWhereInput
    some?: register_form_dynamicWhereInput
    none?: register_form_dynamicWhereInput
  }

  export type place_userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type register_form_dynamicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type placeCountOrderByAggregateInput = {
    place_id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    active?: SortOrder
  }

  export type placeAvgOrderByAggregateInput = {
    place_id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    active?: SortOrder
  }

  export type placeMaxOrderByAggregateInput = {
    place_id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    active?: SortOrder
  }

  export type placeMinOrderByAggregateInput = {
    place_id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    active?: SortOrder
  }

  export type placeSumOrderByAggregateInput = {
    place_id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    active?: SortOrder
  }

  export type PlaceNullableRelationFilter = {
    is?: placeWhereInput | null
    isNot?: placeWhereInput | null
  }

  export type place_userUser_idPlace_idCompoundUniqueInput = {
    user_id: number
    place_id: number
  }

  export type place_userCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    place_id?: SortOrder
    joined_at?: SortOrder
  }

  export type place_userAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    place_id?: SortOrder
  }

  export type place_userMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    place_id?: SortOrder
    joined_at?: SortOrder
  }

  export type place_userMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    place_id?: SortOrder
    joined_at?: SortOrder
  }

  export type place_userSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    place_id?: SortOrder
  }

  export type register_form_dynamicCountOrderByAggregateInput = {
    id?: SortOrder
    place_id?: SortOrder
    data_json?: SortOrder
    registration_date?: SortOrder
  }

  export type register_form_dynamicAvgOrderByAggregateInput = {
    id?: SortOrder
    place_id?: SortOrder
  }

  export type register_form_dynamicMaxOrderByAggregateInput = {
    id?: SortOrder
    place_id?: SortOrder
    data_json?: SortOrder
    registration_date?: SortOrder
  }

  export type register_form_dynamicMinOrderByAggregateInput = {
    id?: SortOrder
    place_id?: SortOrder
    data_json?: SortOrder
    registration_date?: SortOrder
  }

  export type register_form_dynamicSumOrderByAggregateInput = {
    id?: SortOrder
    place_id?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    role_id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    role_id?: SortOrder
    active?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    role_id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    role_id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    role_id?: SortOrder
    active?: SortOrder
  }

  export type AccessListRelationFilter = {
    every?: accessWhereInput
    some?: accessWhereInput
    none?: accessWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: attendanceWhereInput
    some?: attendanceWhereInput
    none?: attendanceWhereInput
  }

  export type RoleNullableRelationFilter = {
    is?: roleWhereInput | null
    isNot?: roleWhereInput | null
  }

  export type User_contactListRelationFilter = {
    every?: user_contactWhereInput
    some?: user_contactWhereInput
    none?: user_contactWhereInput
  }

  export type accessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type attendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_contactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    maternal_surname?: SortOrder
    paternal_surname?: SortOrder
    birthdate?: SortOrder
    photo_url?: SortOrder
    entry_date?: SortOrder
    low_date?: SortOrder
    active?: SortOrder
    access_web?: SortOrder
    access_movil?: SortOrder
    role_id?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    user_id?: SortOrder
    active?: SortOrder
    access_web?: SortOrder
    access_movil?: SortOrder
    role_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    maternal_surname?: SortOrder
    paternal_surname?: SortOrder
    birthdate?: SortOrder
    photo_url?: SortOrder
    entry_date?: SortOrder
    low_date?: SortOrder
    active?: SortOrder
    access_web?: SortOrder
    access_movil?: SortOrder
    role_id?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    maternal_surname?: SortOrder
    paternal_surname?: SortOrder
    birthdate?: SortOrder
    photo_url?: SortOrder
    entry_date?: SortOrder
    low_date?: SortOrder
    active?: SortOrder
    access_web?: SortOrder
    access_movil?: SortOrder
    role_id?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    user_id?: SortOrder
    active?: SortOrder
    access_web?: SortOrder
    access_movil?: SortOrder
    role_id?: SortOrder
  }

  export type user_contactCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    outer_number?: SortOrder
    interior_number?: SortOrder
    cologne?: SortOrder
    municipality?: SortOrder
    cp?: SortOrder
    phone_number?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type user_contactAvgOrderByAggregateInput = {
    id?: SortOrder
    cp?: SortOrder
    user_id?: SortOrder
  }

  export type user_contactMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    outer_number?: SortOrder
    interior_number?: SortOrder
    cologne?: SortOrder
    municipality?: SortOrder
    cp?: SortOrder
    phone_number?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type user_contactMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    outer_number?: SortOrder
    interior_number?: SortOrder
    cologne?: SortOrder
    municipality?: SortOrder
    cp?: SortOrder
    phone_number?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
  }

  export type user_contactSumOrderByAggregateInput = {
    id?: SortOrder
    cp?: SortOrder
    user_id?: SortOrder
  }

  export type userCreateNestedOneWithoutAccessInput = {
    create?: XOR<userCreateWithoutAccessInput, userUncheckedCreateWithoutAccessInput>
    connectOrCreate?: userCreateOrConnectWithoutAccessInput
    connect?: userWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userUpdateOneWithoutAccessNestedInput = {
    create?: XOR<userCreateWithoutAccessInput, userUncheckedCreateWithoutAccessInput>
    connectOrCreate?: userCreateOrConnectWithoutAccessInput
    upsert?: userUpsertWithoutAccessInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAccessInput, userUpdateWithoutAccessInput>, userUncheckedUpdateWithoutAccessInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<userCreateWithoutAttendanceInput, userUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: userCreateOrConnectWithoutAttendanceInput
    connect?: userWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type userUpdateOneWithoutAttendanceNestedInput = {
    create?: XOR<userCreateWithoutAttendanceInput, userUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: userCreateOrConnectWithoutAttendanceInput
    upsert?: userUpsertWithoutAttendanceInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAttendanceInput, userUpdateWithoutAttendanceInput>, userUncheckedUpdateWithoutAttendanceInput>
  }

  export type form_fieldCreateNestedManyWithoutFieldInput = {
    create?: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput> | form_fieldCreateWithoutFieldInput[] | form_fieldUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFieldInput | form_fieldCreateOrConnectWithoutFieldInput[]
    createMany?: form_fieldCreateManyFieldInputEnvelope
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
  }

  export type form_fieldUncheckedCreateNestedManyWithoutFieldInput = {
    create?: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput> | form_fieldCreateWithoutFieldInput[] | form_fieldUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFieldInput | form_fieldCreateOrConnectWithoutFieldInput[]
    createMany?: form_fieldCreateManyFieldInputEnvelope
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
  }

  export type form_fieldUpdateManyWithoutFieldNestedInput = {
    create?: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput> | form_fieldCreateWithoutFieldInput[] | form_fieldUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFieldInput | form_fieldCreateOrConnectWithoutFieldInput[]
    upsert?: form_fieldUpsertWithWhereUniqueWithoutFieldInput | form_fieldUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: form_fieldCreateManyFieldInputEnvelope
    set?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    disconnect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    delete?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    update?: form_fieldUpdateWithWhereUniqueWithoutFieldInput | form_fieldUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: form_fieldUpdateManyWithWhereWithoutFieldInput | form_fieldUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
  }

  export type form_fieldUncheckedUpdateManyWithoutFieldNestedInput = {
    create?: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput> | form_fieldCreateWithoutFieldInput[] | form_fieldUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFieldInput | form_fieldCreateOrConnectWithoutFieldInput[]
    upsert?: form_fieldUpsertWithWhereUniqueWithoutFieldInput | form_fieldUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: form_fieldCreateManyFieldInputEnvelope
    set?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    disconnect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    delete?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    update?: form_fieldUpdateWithWhereUniqueWithoutFieldInput | form_fieldUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: form_fieldUpdateManyWithWhereWithoutFieldInput | form_fieldUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
  }

  export type form_fieldCreateNestedManyWithoutFormInput = {
    create?: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput> | form_fieldCreateWithoutFormInput[] | form_fieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFormInput | form_fieldCreateOrConnectWithoutFormInput[]
    createMany?: form_fieldCreateManyFormInputEnvelope
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
  }

  export type form_photo_formCreateNestedManyWithoutFormInput = {
    create?: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput> | form_photo_formCreateWithoutFormInput[] | form_photo_formUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutFormInput | form_photo_formCreateOrConnectWithoutFormInput[]
    createMany?: form_photo_formCreateManyFormInputEnvelope
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
  }

  export type form_fieldUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput> | form_fieldCreateWithoutFormInput[] | form_fieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFormInput | form_fieldCreateOrConnectWithoutFormInput[]
    createMany?: form_fieldCreateManyFormInputEnvelope
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
  }

  export type form_photo_formUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput> | form_photo_formCreateWithoutFormInput[] | form_photo_formUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutFormInput | form_photo_formCreateOrConnectWithoutFormInput[]
    createMany?: form_photo_formCreateManyFormInputEnvelope
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
  }

  export type form_fieldUpdateManyWithoutFormNestedInput = {
    create?: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput> | form_fieldCreateWithoutFormInput[] | form_fieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFormInput | form_fieldCreateOrConnectWithoutFormInput[]
    upsert?: form_fieldUpsertWithWhereUniqueWithoutFormInput | form_fieldUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: form_fieldCreateManyFormInputEnvelope
    set?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    disconnect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    delete?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    update?: form_fieldUpdateWithWhereUniqueWithoutFormInput | form_fieldUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: form_fieldUpdateManyWithWhereWithoutFormInput | form_fieldUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
  }

  export type form_photo_formUpdateManyWithoutFormNestedInput = {
    create?: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput> | form_photo_formCreateWithoutFormInput[] | form_photo_formUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutFormInput | form_photo_formCreateOrConnectWithoutFormInput[]
    upsert?: form_photo_formUpsertWithWhereUniqueWithoutFormInput | form_photo_formUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: form_photo_formCreateManyFormInputEnvelope
    set?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    disconnect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    delete?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    update?: form_photo_formUpdateWithWhereUniqueWithoutFormInput | form_photo_formUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: form_photo_formUpdateManyWithWhereWithoutFormInput | form_photo_formUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
  }

  export type form_fieldUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput> | form_fieldCreateWithoutFormInput[] | form_fieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_fieldCreateOrConnectWithoutFormInput | form_fieldCreateOrConnectWithoutFormInput[]
    upsert?: form_fieldUpsertWithWhereUniqueWithoutFormInput | form_fieldUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: form_fieldCreateManyFormInputEnvelope
    set?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    disconnect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    delete?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    connect?: form_fieldWhereUniqueInput | form_fieldWhereUniqueInput[]
    update?: form_fieldUpdateWithWhereUniqueWithoutFormInput | form_fieldUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: form_fieldUpdateManyWithWhereWithoutFormInput | form_fieldUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
  }

  export type form_photo_formUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput> | form_photo_formCreateWithoutFormInput[] | form_photo_formUncheckedCreateWithoutFormInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutFormInput | form_photo_formCreateOrConnectWithoutFormInput[]
    upsert?: form_photo_formUpsertWithWhereUniqueWithoutFormInput | form_photo_formUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: form_photo_formCreateManyFormInputEnvelope
    set?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    disconnect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    delete?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    update?: form_photo_formUpdateWithWhereUniqueWithoutFormInput | form_photo_formUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: form_photo_formUpdateManyWithWhereWithoutFormInput | form_photo_formUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
  }

  export type fieldCreateNestedOneWithoutForm_fieldInput = {
    create?: XOR<fieldCreateWithoutForm_fieldInput, fieldUncheckedCreateWithoutForm_fieldInput>
    connectOrCreate?: fieldCreateOrConnectWithoutForm_fieldInput
    connect?: fieldWhereUniqueInput
  }

  export type formCreateNestedOneWithoutForm_fieldInput = {
    create?: XOR<formCreateWithoutForm_fieldInput, formUncheckedCreateWithoutForm_fieldInput>
    connectOrCreate?: formCreateOrConnectWithoutForm_fieldInput
    connect?: formWhereUniqueInput
  }

  export type fieldUpdateOneWithoutForm_fieldNestedInput = {
    create?: XOR<fieldCreateWithoutForm_fieldInput, fieldUncheckedCreateWithoutForm_fieldInput>
    connectOrCreate?: fieldCreateOrConnectWithoutForm_fieldInput
    upsert?: fieldUpsertWithoutForm_fieldInput
    disconnect?: fieldWhereInput | boolean
    delete?: fieldWhereInput | boolean
    connect?: fieldWhereUniqueInput
    update?: XOR<XOR<fieldUpdateToOneWithWhereWithoutForm_fieldInput, fieldUpdateWithoutForm_fieldInput>, fieldUncheckedUpdateWithoutForm_fieldInput>
  }

  export type formUpdateOneWithoutForm_fieldNestedInput = {
    create?: XOR<formCreateWithoutForm_fieldInput, formUncheckedCreateWithoutForm_fieldInput>
    connectOrCreate?: formCreateOrConnectWithoutForm_fieldInput
    upsert?: formUpsertWithoutForm_fieldInput
    disconnect?: formWhereInput | boolean
    delete?: formWhereInput | boolean
    connect?: formWhereUniqueInput
    update?: XOR<XOR<formUpdateToOneWithWhereWithoutForm_fieldInput, formUpdateWithoutForm_fieldInput>, formUncheckedUpdateWithoutForm_fieldInput>
  }

  export type formCreateNestedOneWithoutForm_photo_formInput = {
    create?: XOR<formCreateWithoutForm_photo_formInput, formUncheckedCreateWithoutForm_photo_formInput>
    connectOrCreate?: formCreateOrConnectWithoutForm_photo_formInput
    connect?: formWhereUniqueInput
  }

  export type photo_formCreateNestedOneWithoutForm_photo_formInput = {
    create?: XOR<photo_formCreateWithoutForm_photo_formInput, photo_formUncheckedCreateWithoutForm_photo_formInput>
    connectOrCreate?: photo_formCreateOrConnectWithoutForm_photo_formInput
    connect?: photo_formWhereUniqueInput
  }

  export type formUpdateOneWithoutForm_photo_formNestedInput = {
    create?: XOR<formCreateWithoutForm_photo_formInput, formUncheckedCreateWithoutForm_photo_formInput>
    connectOrCreate?: formCreateOrConnectWithoutForm_photo_formInput
    upsert?: formUpsertWithoutForm_photo_formInput
    disconnect?: formWhereInput | boolean
    delete?: formWhereInput | boolean
    connect?: formWhereUniqueInput
    update?: XOR<XOR<formUpdateToOneWithWhereWithoutForm_photo_formInput, formUpdateWithoutForm_photo_formInput>, formUncheckedUpdateWithoutForm_photo_formInput>
  }

  export type photo_formUpdateOneWithoutForm_photo_formNestedInput = {
    create?: XOR<photo_formCreateWithoutForm_photo_formInput, photo_formUncheckedCreateWithoutForm_photo_formInput>
    connectOrCreate?: photo_formCreateOrConnectWithoutForm_photo_formInput
    upsert?: photo_formUpsertWithoutForm_photo_formInput
    disconnect?: photo_formWhereInput | boolean
    delete?: photo_formWhereInput | boolean
    connect?: photo_formWhereUniqueInput
    update?: XOR<XOR<photo_formUpdateToOneWithWhereWithoutForm_photo_formInput, photo_formUpdateWithoutForm_photo_formInput>, photo_formUncheckedUpdateWithoutForm_photo_formInput>
  }

  export type form_photo_formCreateNestedManyWithoutPhoto_formInput = {
    create?: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput> | form_photo_formCreateWithoutPhoto_formInput[] | form_photo_formUncheckedCreateWithoutPhoto_formInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutPhoto_formInput | form_photo_formCreateOrConnectWithoutPhoto_formInput[]
    createMany?: form_photo_formCreateManyPhoto_formInputEnvelope
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
  }

  export type form_photo_formUncheckedCreateNestedManyWithoutPhoto_formInput = {
    create?: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput> | form_photo_formCreateWithoutPhoto_formInput[] | form_photo_formUncheckedCreateWithoutPhoto_formInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutPhoto_formInput | form_photo_formCreateOrConnectWithoutPhoto_formInput[]
    createMany?: form_photo_formCreateManyPhoto_formInputEnvelope
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
  }

  export type form_photo_formUpdateManyWithoutPhoto_formNestedInput = {
    create?: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput> | form_photo_formCreateWithoutPhoto_formInput[] | form_photo_formUncheckedCreateWithoutPhoto_formInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutPhoto_formInput | form_photo_formCreateOrConnectWithoutPhoto_formInput[]
    upsert?: form_photo_formUpsertWithWhereUniqueWithoutPhoto_formInput | form_photo_formUpsertWithWhereUniqueWithoutPhoto_formInput[]
    createMany?: form_photo_formCreateManyPhoto_formInputEnvelope
    set?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    disconnect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    delete?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    update?: form_photo_formUpdateWithWhereUniqueWithoutPhoto_formInput | form_photo_formUpdateWithWhereUniqueWithoutPhoto_formInput[]
    updateMany?: form_photo_formUpdateManyWithWhereWithoutPhoto_formInput | form_photo_formUpdateManyWithWhereWithoutPhoto_formInput[]
    deleteMany?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
  }

  export type form_photo_formUncheckedUpdateManyWithoutPhoto_formNestedInput = {
    create?: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput> | form_photo_formCreateWithoutPhoto_formInput[] | form_photo_formUncheckedCreateWithoutPhoto_formInput[]
    connectOrCreate?: form_photo_formCreateOrConnectWithoutPhoto_formInput | form_photo_formCreateOrConnectWithoutPhoto_formInput[]
    upsert?: form_photo_formUpsertWithWhereUniqueWithoutPhoto_formInput | form_photo_formUpsertWithWhereUniqueWithoutPhoto_formInput[]
    createMany?: form_photo_formCreateManyPhoto_formInputEnvelope
    set?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    disconnect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    delete?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    connect?: form_photo_formWhereUniqueInput | form_photo_formWhereUniqueInput[]
    update?: form_photo_formUpdateWithWhereUniqueWithoutPhoto_formInput | form_photo_formUpdateWithWhereUniqueWithoutPhoto_formInput[]
    updateMany?: form_photo_formUpdateManyWithWhereWithoutPhoto_formInput | form_photo_formUpdateManyWithWhereWithoutPhoto_formInput[]
    deleteMany?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
  }

  export type place_userCreateNestedManyWithoutPlaceInput = {
    create?: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput> | place_userCreateWithoutPlaceInput[] | place_userUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutPlaceInput | place_userCreateOrConnectWithoutPlaceInput[]
    createMany?: place_userCreateManyPlaceInputEnvelope
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
  }

  export type register_form_dynamicCreateNestedManyWithoutPlaceInput = {
    create?: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput> | register_form_dynamicCreateWithoutPlaceInput[] | register_form_dynamicUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: register_form_dynamicCreateOrConnectWithoutPlaceInput | register_form_dynamicCreateOrConnectWithoutPlaceInput[]
    createMany?: register_form_dynamicCreateManyPlaceInputEnvelope
    connect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
  }

  export type place_userUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput> | place_userCreateWithoutPlaceInput[] | place_userUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutPlaceInput | place_userCreateOrConnectWithoutPlaceInput[]
    createMany?: place_userCreateManyPlaceInputEnvelope
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
  }

  export type register_form_dynamicUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput> | register_form_dynamicCreateWithoutPlaceInput[] | register_form_dynamicUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: register_form_dynamicCreateOrConnectWithoutPlaceInput | register_form_dynamicCreateOrConnectWithoutPlaceInput[]
    createMany?: register_form_dynamicCreateManyPlaceInputEnvelope
    connect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
  }

  export type place_userUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput> | place_userCreateWithoutPlaceInput[] | place_userUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutPlaceInput | place_userCreateOrConnectWithoutPlaceInput[]
    upsert?: place_userUpsertWithWhereUniqueWithoutPlaceInput | place_userUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: place_userCreateManyPlaceInputEnvelope
    set?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    disconnect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    delete?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    update?: place_userUpdateWithWhereUniqueWithoutPlaceInput | place_userUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: place_userUpdateManyWithWhereWithoutPlaceInput | place_userUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: place_userScalarWhereInput | place_userScalarWhereInput[]
  }

  export type register_form_dynamicUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput> | register_form_dynamicCreateWithoutPlaceInput[] | register_form_dynamicUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: register_form_dynamicCreateOrConnectWithoutPlaceInput | register_form_dynamicCreateOrConnectWithoutPlaceInput[]
    upsert?: register_form_dynamicUpsertWithWhereUniqueWithoutPlaceInput | register_form_dynamicUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: register_form_dynamicCreateManyPlaceInputEnvelope
    set?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    disconnect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    delete?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    connect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    update?: register_form_dynamicUpdateWithWhereUniqueWithoutPlaceInput | register_form_dynamicUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: register_form_dynamicUpdateManyWithWhereWithoutPlaceInput | register_form_dynamicUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: register_form_dynamicScalarWhereInput | register_form_dynamicScalarWhereInput[]
  }

  export type place_userUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput> | place_userCreateWithoutPlaceInput[] | place_userUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutPlaceInput | place_userCreateOrConnectWithoutPlaceInput[]
    upsert?: place_userUpsertWithWhereUniqueWithoutPlaceInput | place_userUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: place_userCreateManyPlaceInputEnvelope
    set?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    disconnect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    delete?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    update?: place_userUpdateWithWhereUniqueWithoutPlaceInput | place_userUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: place_userUpdateManyWithWhereWithoutPlaceInput | place_userUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: place_userScalarWhereInput | place_userScalarWhereInput[]
  }

  export type register_form_dynamicUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput> | register_form_dynamicCreateWithoutPlaceInput[] | register_form_dynamicUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: register_form_dynamicCreateOrConnectWithoutPlaceInput | register_form_dynamicCreateOrConnectWithoutPlaceInput[]
    upsert?: register_form_dynamicUpsertWithWhereUniqueWithoutPlaceInput | register_form_dynamicUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: register_form_dynamicCreateManyPlaceInputEnvelope
    set?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    disconnect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    delete?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    connect?: register_form_dynamicWhereUniqueInput | register_form_dynamicWhereUniqueInput[]
    update?: register_form_dynamicUpdateWithWhereUniqueWithoutPlaceInput | register_form_dynamicUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: register_form_dynamicUpdateManyWithWhereWithoutPlaceInput | register_form_dynamicUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: register_form_dynamicScalarWhereInput | register_form_dynamicScalarWhereInput[]
  }

  export type placeCreateNestedOneWithoutPlace_userInput = {
    create?: XOR<placeCreateWithoutPlace_userInput, placeUncheckedCreateWithoutPlace_userInput>
    connectOrCreate?: placeCreateOrConnectWithoutPlace_userInput
    connect?: placeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutPlace_userInput = {
    create?: XOR<userCreateWithoutPlace_userInput, userUncheckedCreateWithoutPlace_userInput>
    connectOrCreate?: userCreateOrConnectWithoutPlace_userInput
    connect?: userWhereUniqueInput
  }

  export type placeUpdateOneWithoutPlace_userNestedInput = {
    create?: XOR<placeCreateWithoutPlace_userInput, placeUncheckedCreateWithoutPlace_userInput>
    connectOrCreate?: placeCreateOrConnectWithoutPlace_userInput
    upsert?: placeUpsertWithoutPlace_userInput
    disconnect?: placeWhereInput | boolean
    delete?: placeWhereInput | boolean
    connect?: placeWhereUniqueInput
    update?: XOR<XOR<placeUpdateToOneWithWhereWithoutPlace_userInput, placeUpdateWithoutPlace_userInput>, placeUncheckedUpdateWithoutPlace_userInput>
  }

  export type userUpdateOneWithoutPlace_userNestedInput = {
    create?: XOR<userCreateWithoutPlace_userInput, userUncheckedCreateWithoutPlace_userInput>
    connectOrCreate?: userCreateOrConnectWithoutPlace_userInput
    upsert?: userUpsertWithoutPlace_userInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPlace_userInput, userUpdateWithoutPlace_userInput>, userUncheckedUpdateWithoutPlace_userInput>
  }

  export type placeCreateNestedOneWithoutRegister_form_dynamicInput = {
    create?: XOR<placeCreateWithoutRegister_form_dynamicInput, placeUncheckedCreateWithoutRegister_form_dynamicInput>
    connectOrCreate?: placeCreateOrConnectWithoutRegister_form_dynamicInput
    connect?: placeWhereUniqueInput
  }

  export type placeUpdateOneWithoutRegister_form_dynamicNestedInput = {
    create?: XOR<placeCreateWithoutRegister_form_dynamicInput, placeUncheckedCreateWithoutRegister_form_dynamicInput>
    connectOrCreate?: placeCreateOrConnectWithoutRegister_form_dynamicInput
    upsert?: placeUpsertWithoutRegister_form_dynamicInput
    disconnect?: placeWhereInput | boolean
    delete?: placeWhereInput | boolean
    connect?: placeWhereUniqueInput
    update?: XOR<XOR<placeUpdateToOneWithWhereWithoutRegister_form_dynamicInput, placeUpdateWithoutRegister_form_dynamicInput>, placeUncheckedUpdateWithoutRegister_form_dynamicInput>
  }

  export type userCreateNestedManyWithoutRoleInput = {
    create?: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput> | userCreateWithoutRoleInput[] | userUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: userCreateOrConnectWithoutRoleInput | userCreateOrConnectWithoutRoleInput[]
    createMany?: userCreateManyRoleInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput> | userCreateWithoutRoleInput[] | userUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: userCreateOrConnectWithoutRoleInput | userCreateOrConnectWithoutRoleInput[]
    createMany?: userCreateManyRoleInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type userUpdateManyWithoutRoleNestedInput = {
    create?: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput> | userCreateWithoutRoleInput[] | userUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: userCreateOrConnectWithoutRoleInput | userCreateOrConnectWithoutRoleInput[]
    upsert?: userUpsertWithWhereUniqueWithoutRoleInput | userUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: userCreateManyRoleInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutRoleInput | userUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: userUpdateManyWithWhereWithoutRoleInput | userUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput> | userCreateWithoutRoleInput[] | userUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: userCreateOrConnectWithoutRoleInput | userCreateOrConnectWithoutRoleInput[]
    upsert?: userUpsertWithWhereUniqueWithoutRoleInput | userUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: userCreateManyRoleInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutRoleInput | userUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: userUpdateManyWithWhereWithoutRoleInput | userUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type accessCreateNestedManyWithoutUserInput = {
    create?: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput> | accessCreateWithoutUserInput[] | accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accessCreateOrConnectWithoutUserInput | accessCreateOrConnectWithoutUserInput[]
    createMany?: accessCreateManyUserInputEnvelope
    connect?: accessWhereUniqueInput | accessWhereUniqueInput[]
  }

  export type attendanceCreateNestedManyWithoutUserInput = {
    create?: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput> | attendanceCreateWithoutUserInput[] | attendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUserInput | attendanceCreateOrConnectWithoutUserInput[]
    createMany?: attendanceCreateManyUserInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type place_userCreateNestedManyWithoutUserInput = {
    create?: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput> | place_userCreateWithoutUserInput[] | place_userUncheckedCreateWithoutUserInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutUserInput | place_userCreateOrConnectWithoutUserInput[]
    createMany?: place_userCreateManyUserInputEnvelope
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
  }

  export type roleCreateNestedOneWithoutUserInput = {
    create?: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
    connectOrCreate?: roleCreateOrConnectWithoutUserInput
    connect?: roleWhereUniqueInput
  }

  export type user_contactCreateNestedManyWithoutUserInput = {
    create?: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput> | user_contactCreateWithoutUserInput[] | user_contactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_contactCreateOrConnectWithoutUserInput | user_contactCreateOrConnectWithoutUserInput[]
    createMany?: user_contactCreateManyUserInputEnvelope
    connect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
  }

  export type accessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput> | accessCreateWithoutUserInput[] | accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accessCreateOrConnectWithoutUserInput | accessCreateOrConnectWithoutUserInput[]
    createMany?: accessCreateManyUserInputEnvelope
    connect?: accessWhereUniqueInput | accessWhereUniqueInput[]
  }

  export type attendanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput> | attendanceCreateWithoutUserInput[] | attendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUserInput | attendanceCreateOrConnectWithoutUserInput[]
    createMany?: attendanceCreateManyUserInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type place_userUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput> | place_userCreateWithoutUserInput[] | place_userUncheckedCreateWithoutUserInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutUserInput | place_userCreateOrConnectWithoutUserInput[]
    createMany?: place_userCreateManyUserInputEnvelope
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
  }

  export type user_contactUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput> | user_contactCreateWithoutUserInput[] | user_contactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_contactCreateOrConnectWithoutUserInput | user_contactCreateOrConnectWithoutUserInput[]
    createMany?: user_contactCreateManyUserInputEnvelope
    connect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
  }

  export type accessUpdateManyWithoutUserNestedInput = {
    create?: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput> | accessCreateWithoutUserInput[] | accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accessCreateOrConnectWithoutUserInput | accessCreateOrConnectWithoutUserInput[]
    upsert?: accessUpsertWithWhereUniqueWithoutUserInput | accessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: accessCreateManyUserInputEnvelope
    set?: accessWhereUniqueInput | accessWhereUniqueInput[]
    disconnect?: accessWhereUniqueInput | accessWhereUniqueInput[]
    delete?: accessWhereUniqueInput | accessWhereUniqueInput[]
    connect?: accessWhereUniqueInput | accessWhereUniqueInput[]
    update?: accessUpdateWithWhereUniqueWithoutUserInput | accessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: accessUpdateManyWithWhereWithoutUserInput | accessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: accessScalarWhereInput | accessScalarWhereInput[]
  }

  export type attendanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput> | attendanceCreateWithoutUserInput[] | attendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUserInput | attendanceCreateOrConnectWithoutUserInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutUserInput | attendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: attendanceCreateManyUserInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutUserInput | attendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutUserInput | attendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type place_userUpdateManyWithoutUserNestedInput = {
    create?: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput> | place_userCreateWithoutUserInput[] | place_userUncheckedCreateWithoutUserInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutUserInput | place_userCreateOrConnectWithoutUserInput[]
    upsert?: place_userUpsertWithWhereUniqueWithoutUserInput | place_userUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: place_userCreateManyUserInputEnvelope
    set?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    disconnect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    delete?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    update?: place_userUpdateWithWhereUniqueWithoutUserInput | place_userUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: place_userUpdateManyWithWhereWithoutUserInput | place_userUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: place_userScalarWhereInput | place_userScalarWhereInput[]
  }

  export type roleUpdateOneWithoutUserNestedInput = {
    create?: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
    connectOrCreate?: roleCreateOrConnectWithoutUserInput
    upsert?: roleUpsertWithoutUserInput
    disconnect?: roleWhereInput | boolean
    delete?: roleWhereInput | boolean
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutUserInput, roleUpdateWithoutUserInput>, roleUncheckedUpdateWithoutUserInput>
  }

  export type user_contactUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput> | user_contactCreateWithoutUserInput[] | user_contactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_contactCreateOrConnectWithoutUserInput | user_contactCreateOrConnectWithoutUserInput[]
    upsert?: user_contactUpsertWithWhereUniqueWithoutUserInput | user_contactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_contactCreateManyUserInputEnvelope
    set?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    disconnect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    delete?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    connect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    update?: user_contactUpdateWithWhereUniqueWithoutUserInput | user_contactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_contactUpdateManyWithWhereWithoutUserInput | user_contactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_contactScalarWhereInput | user_contactScalarWhereInput[]
  }

  export type accessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput> | accessCreateWithoutUserInput[] | accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: accessCreateOrConnectWithoutUserInput | accessCreateOrConnectWithoutUserInput[]
    upsert?: accessUpsertWithWhereUniqueWithoutUserInput | accessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: accessCreateManyUserInputEnvelope
    set?: accessWhereUniqueInput | accessWhereUniqueInput[]
    disconnect?: accessWhereUniqueInput | accessWhereUniqueInput[]
    delete?: accessWhereUniqueInput | accessWhereUniqueInput[]
    connect?: accessWhereUniqueInput | accessWhereUniqueInput[]
    update?: accessUpdateWithWhereUniqueWithoutUserInput | accessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: accessUpdateManyWithWhereWithoutUserInput | accessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: accessScalarWhereInput | accessScalarWhereInput[]
  }

  export type attendanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput> | attendanceCreateWithoutUserInput[] | attendanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutUserInput | attendanceCreateOrConnectWithoutUserInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutUserInput | attendanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: attendanceCreateManyUserInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutUserInput | attendanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutUserInput | attendanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type place_userUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput> | place_userCreateWithoutUserInput[] | place_userUncheckedCreateWithoutUserInput[]
    connectOrCreate?: place_userCreateOrConnectWithoutUserInput | place_userCreateOrConnectWithoutUserInput[]
    upsert?: place_userUpsertWithWhereUniqueWithoutUserInput | place_userUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: place_userCreateManyUserInputEnvelope
    set?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    disconnect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    delete?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    connect?: place_userWhereUniqueInput | place_userWhereUniqueInput[]
    update?: place_userUpdateWithWhereUniqueWithoutUserInput | place_userUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: place_userUpdateManyWithWhereWithoutUserInput | place_userUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: place_userScalarWhereInput | place_userScalarWhereInput[]
  }

  export type user_contactUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput> | user_contactCreateWithoutUserInput[] | user_contactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_contactCreateOrConnectWithoutUserInput | user_contactCreateOrConnectWithoutUserInput[]
    upsert?: user_contactUpsertWithWhereUniqueWithoutUserInput | user_contactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_contactCreateManyUserInputEnvelope
    set?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    disconnect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    delete?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    connect?: user_contactWhereUniqueInput | user_contactWhereUniqueInput[]
    update?: user_contactUpdateWithWhereUniqueWithoutUserInput | user_contactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_contactUpdateManyWithWhereWithoutUserInput | user_contactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_contactScalarWhereInput | user_contactScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutUser_contactInput = {
    create?: XOR<userCreateWithoutUser_contactInput, userUncheckedCreateWithoutUser_contactInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_contactInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneWithoutUser_contactNestedInput = {
    create?: XOR<userCreateWithoutUser_contactInput, userUncheckedCreateWithoutUser_contactInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_contactInput
    upsert?: userUpsertWithoutUser_contactInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutUser_contactInput, userUpdateWithoutUser_contactInput>, userUncheckedUpdateWithoutUser_contactInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type userCreateWithoutAccessInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    attendance?: attendanceCreateNestedManyWithoutUserInput
    place_user?: place_userCreateNestedManyWithoutUserInput
    role?: roleCreateNestedOneWithoutUserInput
    user_contact?: user_contactCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAccessInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
    attendance?: attendanceUncheckedCreateNestedManyWithoutUserInput
    place_user?: place_userUncheckedCreateNestedManyWithoutUserInput
    user_contact?: user_contactUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAccessInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAccessInput, userUncheckedCreateWithoutAccessInput>
  }

  export type userUpsertWithoutAccessInput = {
    update: XOR<userUpdateWithoutAccessInput, userUncheckedUpdateWithoutAccessInput>
    create: XOR<userCreateWithoutAccessInput, userUncheckedCreateWithoutAccessInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAccessInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAccessInput, userUncheckedUpdateWithoutAccessInput>
  }

  export type userUpdateWithoutAccessInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    attendance?: attendanceUpdateManyWithoutUserNestedInput
    place_user?: place_userUpdateManyWithoutUserNestedInput
    role?: roleUpdateOneWithoutUserNestedInput
    user_contact?: user_contactUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAccessInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    attendance?: attendanceUncheckedUpdateManyWithoutUserNestedInput
    place_user?: place_userUncheckedUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutAttendanceInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessCreateNestedManyWithoutUserInput
    place_user?: place_userCreateNestedManyWithoutUserInput
    role?: roleCreateNestedOneWithoutUserInput
    user_contact?: user_contactCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAttendanceInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
    access?: accessUncheckedCreateNestedManyWithoutUserInput
    place_user?: place_userUncheckedCreateNestedManyWithoutUserInput
    user_contact?: user_contactUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAttendanceInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAttendanceInput, userUncheckedCreateWithoutAttendanceInput>
  }

  export type userUpsertWithoutAttendanceInput = {
    update: XOR<userUpdateWithoutAttendanceInput, userUncheckedUpdateWithoutAttendanceInput>
    create: XOR<userCreateWithoutAttendanceInput, userUncheckedCreateWithoutAttendanceInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAttendanceInput, userUncheckedUpdateWithoutAttendanceInput>
  }

  export type userUpdateWithoutAttendanceInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUpdateManyWithoutUserNestedInput
    place_user?: place_userUpdateManyWithoutUserNestedInput
    role?: roleUpdateOneWithoutUserNestedInput
    user_contact?: user_contactUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAttendanceInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUncheckedUpdateManyWithoutUserNestedInput
    place_user?: place_userUncheckedUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type form_fieldCreateWithoutFieldInput = {
    joined_at?: Date | string | null
    form?: formCreateNestedOneWithoutForm_fieldInput
  }

  export type form_fieldUncheckedCreateWithoutFieldInput = {
    id?: number
    form_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_fieldCreateOrConnectWithoutFieldInput = {
    where: form_fieldWhereUniqueInput
    create: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput>
  }

  export type form_fieldCreateManyFieldInputEnvelope = {
    data: form_fieldCreateManyFieldInput | form_fieldCreateManyFieldInput[]
  }

  export type form_fieldUpsertWithWhereUniqueWithoutFieldInput = {
    where: form_fieldWhereUniqueInput
    update: XOR<form_fieldUpdateWithoutFieldInput, form_fieldUncheckedUpdateWithoutFieldInput>
    create: XOR<form_fieldCreateWithoutFieldInput, form_fieldUncheckedCreateWithoutFieldInput>
  }

  export type form_fieldUpdateWithWhereUniqueWithoutFieldInput = {
    where: form_fieldWhereUniqueInput
    data: XOR<form_fieldUpdateWithoutFieldInput, form_fieldUncheckedUpdateWithoutFieldInput>
  }

  export type form_fieldUpdateManyWithWhereWithoutFieldInput = {
    where: form_fieldScalarWhereInput
    data: XOR<form_fieldUpdateManyMutationInput, form_fieldUncheckedUpdateManyWithoutFieldInput>
  }

  export type form_fieldScalarWhereInput = {
    AND?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
    OR?: form_fieldScalarWhereInput[]
    NOT?: form_fieldScalarWhereInput | form_fieldScalarWhereInput[]
    id?: IntFilter<"form_field"> | number
    form_id?: IntNullableFilter<"form_field"> | number | null
    field_id?: IntNullableFilter<"form_field"> | number | null
    joined_at?: DateTimeNullableFilter<"form_field"> | Date | string | null
  }

  export type form_fieldCreateWithoutFormInput = {
    joined_at?: Date | string | null
    field?: fieldCreateNestedOneWithoutForm_fieldInput
  }

  export type form_fieldUncheckedCreateWithoutFormInput = {
    id?: number
    field_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_fieldCreateOrConnectWithoutFormInput = {
    where: form_fieldWhereUniqueInput
    create: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput>
  }

  export type form_fieldCreateManyFormInputEnvelope = {
    data: form_fieldCreateManyFormInput | form_fieldCreateManyFormInput[]
  }

  export type form_photo_formCreateWithoutFormInput = {
    photo_form?: photo_formCreateNestedOneWithoutForm_photo_formInput
  }

  export type form_photo_formUncheckedCreateWithoutFormInput = {
    id?: number
    photo_form_id?: number | null
  }

  export type form_photo_formCreateOrConnectWithoutFormInput = {
    where: form_photo_formWhereUniqueInput
    create: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput>
  }

  export type form_photo_formCreateManyFormInputEnvelope = {
    data: form_photo_formCreateManyFormInput | form_photo_formCreateManyFormInput[]
  }

  export type form_fieldUpsertWithWhereUniqueWithoutFormInput = {
    where: form_fieldWhereUniqueInput
    update: XOR<form_fieldUpdateWithoutFormInput, form_fieldUncheckedUpdateWithoutFormInput>
    create: XOR<form_fieldCreateWithoutFormInput, form_fieldUncheckedCreateWithoutFormInput>
  }

  export type form_fieldUpdateWithWhereUniqueWithoutFormInput = {
    where: form_fieldWhereUniqueInput
    data: XOR<form_fieldUpdateWithoutFormInput, form_fieldUncheckedUpdateWithoutFormInput>
  }

  export type form_fieldUpdateManyWithWhereWithoutFormInput = {
    where: form_fieldScalarWhereInput
    data: XOR<form_fieldUpdateManyMutationInput, form_fieldUncheckedUpdateManyWithoutFormInput>
  }

  export type form_photo_formUpsertWithWhereUniqueWithoutFormInput = {
    where: form_photo_formWhereUniqueInput
    update: XOR<form_photo_formUpdateWithoutFormInput, form_photo_formUncheckedUpdateWithoutFormInput>
    create: XOR<form_photo_formCreateWithoutFormInput, form_photo_formUncheckedCreateWithoutFormInput>
  }

  export type form_photo_formUpdateWithWhereUniqueWithoutFormInput = {
    where: form_photo_formWhereUniqueInput
    data: XOR<form_photo_formUpdateWithoutFormInput, form_photo_formUncheckedUpdateWithoutFormInput>
  }

  export type form_photo_formUpdateManyWithWhereWithoutFormInput = {
    where: form_photo_formScalarWhereInput
    data: XOR<form_photo_formUpdateManyMutationInput, form_photo_formUncheckedUpdateManyWithoutFormInput>
  }

  export type form_photo_formScalarWhereInput = {
    AND?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
    OR?: form_photo_formScalarWhereInput[]
    NOT?: form_photo_formScalarWhereInput | form_photo_formScalarWhereInput[]
    id?: IntFilter<"form_photo_form"> | number
    form_id?: IntNullableFilter<"form_photo_form"> | number | null
    photo_form_id?: IntNullableFilter<"form_photo_form"> | number | null
  }

  export type fieldCreateWithoutForm_fieldInput = {
    name?: string | null
    type_db?: string | null
    type_field_form?: string | null
    type_form?: string | null
    options_select?: string | null
    mandatory?: number | null
    type_select?: string | null
    parent_field_id?: number | null
    order?: number | null
  }

  export type fieldUncheckedCreateWithoutForm_fieldInput = {
    field_id?: number
    name?: string | null
    type_db?: string | null
    type_field_form?: string | null
    type_form?: string | null
    options_select?: string | null
    mandatory?: number | null
    type_select?: string | null
    parent_field_id?: number | null
    order?: number | null
  }

  export type fieldCreateOrConnectWithoutForm_fieldInput = {
    where: fieldWhereUniqueInput
    create: XOR<fieldCreateWithoutForm_fieldInput, fieldUncheckedCreateWithoutForm_fieldInput>
  }

  export type formCreateWithoutForm_fieldInput = {
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_photo_form?: form_photo_formCreateNestedManyWithoutFormInput
  }

  export type formUncheckedCreateWithoutForm_fieldInput = {
    form_id?: number
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_photo_form?: form_photo_formUncheckedCreateNestedManyWithoutFormInput
  }

  export type formCreateOrConnectWithoutForm_fieldInput = {
    where: formWhereUniqueInput
    create: XOR<formCreateWithoutForm_fieldInput, formUncheckedCreateWithoutForm_fieldInput>
  }

  export type fieldUpsertWithoutForm_fieldInput = {
    update: XOR<fieldUpdateWithoutForm_fieldInput, fieldUncheckedUpdateWithoutForm_fieldInput>
    create: XOR<fieldCreateWithoutForm_fieldInput, fieldUncheckedCreateWithoutForm_fieldInput>
    where?: fieldWhereInput
  }

  export type fieldUpdateToOneWithWhereWithoutForm_fieldInput = {
    where?: fieldWhereInput
    data: XOR<fieldUpdateWithoutForm_fieldInput, fieldUncheckedUpdateWithoutForm_fieldInput>
  }

  export type fieldUpdateWithoutForm_fieldInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type fieldUncheckedUpdateWithoutForm_fieldInput = {
    field_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type_db?: NullableStringFieldUpdateOperationsInput | string | null
    type_field_form?: NullableStringFieldUpdateOperationsInput | string | null
    type_form?: NullableStringFieldUpdateOperationsInput | string | null
    options_select?: NullableStringFieldUpdateOperationsInput | string | null
    mandatory?: NullableIntFieldUpdateOperationsInput | number | null
    type_select?: NullableStringFieldUpdateOperationsInput | string | null
    parent_field_id?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type formUpsertWithoutForm_fieldInput = {
    update: XOR<formUpdateWithoutForm_fieldInput, formUncheckedUpdateWithoutForm_fieldInput>
    create: XOR<formCreateWithoutForm_fieldInput, formUncheckedCreateWithoutForm_fieldInput>
    where?: formWhereInput
  }

  export type formUpdateToOneWithWhereWithoutForm_fieldInput = {
    where?: formWhereInput
    data: XOR<formUpdateWithoutForm_fieldInput, formUncheckedUpdateWithoutForm_fieldInput>
  }

  export type formUpdateWithoutForm_fieldInput = {
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_photo_form?: form_photo_formUpdateManyWithoutFormNestedInput
  }

  export type formUncheckedUpdateWithoutForm_fieldInput = {
    form_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_photo_form?: form_photo_formUncheckedUpdateManyWithoutFormNestedInput
  }

  export type formCreateWithoutForm_photo_formInput = {
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_field?: form_fieldCreateNestedManyWithoutFormInput
  }

  export type formUncheckedCreateWithoutForm_photo_formInput = {
    form_id?: number
    name: string
    route_app_movil?: string | null
    icono_app_movil?: string | null
    have_signature?: number | null
    form_field?: form_fieldUncheckedCreateNestedManyWithoutFormInput
  }

  export type formCreateOrConnectWithoutForm_photo_formInput = {
    where: formWhereUniqueInput
    create: XOR<formCreateWithoutForm_photo_formInput, formUncheckedCreateWithoutForm_photo_formInput>
  }

  export type photo_formCreateWithoutForm_photo_formInput = {
    name?: string | null
  }

  export type photo_formUncheckedCreateWithoutForm_photo_formInput = {
    photo_form_id?: number
    name?: string | null
  }

  export type photo_formCreateOrConnectWithoutForm_photo_formInput = {
    where: photo_formWhereUniqueInput
    create: XOR<photo_formCreateWithoutForm_photo_formInput, photo_formUncheckedCreateWithoutForm_photo_formInput>
  }

  export type formUpsertWithoutForm_photo_formInput = {
    update: XOR<formUpdateWithoutForm_photo_formInput, formUncheckedUpdateWithoutForm_photo_formInput>
    create: XOR<formCreateWithoutForm_photo_formInput, formUncheckedCreateWithoutForm_photo_formInput>
    where?: formWhereInput
  }

  export type formUpdateToOneWithWhereWithoutForm_photo_formInput = {
    where?: formWhereInput
    data: XOR<formUpdateWithoutForm_photo_formInput, formUncheckedUpdateWithoutForm_photo_formInput>
  }

  export type formUpdateWithoutForm_photo_formInput = {
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUpdateManyWithoutFormNestedInput
  }

  export type formUncheckedUpdateWithoutForm_photo_formInput = {
    form_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    route_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    icono_app_movil?: NullableStringFieldUpdateOperationsInput | string | null
    have_signature?: NullableIntFieldUpdateOperationsInput | number | null
    form_field?: form_fieldUncheckedUpdateManyWithoutFormNestedInput
  }

  export type photo_formUpsertWithoutForm_photo_formInput = {
    update: XOR<photo_formUpdateWithoutForm_photo_formInput, photo_formUncheckedUpdateWithoutForm_photo_formInput>
    create: XOR<photo_formCreateWithoutForm_photo_formInput, photo_formUncheckedCreateWithoutForm_photo_formInput>
    where?: photo_formWhereInput
  }

  export type photo_formUpdateToOneWithWhereWithoutForm_photo_formInput = {
    where?: photo_formWhereInput
    data: XOR<photo_formUpdateWithoutForm_photo_formInput, photo_formUncheckedUpdateWithoutForm_photo_formInput>
  }

  export type photo_formUpdateWithoutForm_photo_formInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type photo_formUncheckedUpdateWithoutForm_photo_formInput = {
    photo_form_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type form_photo_formCreateWithoutPhoto_formInput = {
    form?: formCreateNestedOneWithoutForm_photo_formInput
  }

  export type form_photo_formUncheckedCreateWithoutPhoto_formInput = {
    id?: number
    form_id?: number | null
  }

  export type form_photo_formCreateOrConnectWithoutPhoto_formInput = {
    where: form_photo_formWhereUniqueInput
    create: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput>
  }

  export type form_photo_formCreateManyPhoto_formInputEnvelope = {
    data: form_photo_formCreateManyPhoto_formInput | form_photo_formCreateManyPhoto_formInput[]
  }

  export type form_photo_formUpsertWithWhereUniqueWithoutPhoto_formInput = {
    where: form_photo_formWhereUniqueInput
    update: XOR<form_photo_formUpdateWithoutPhoto_formInput, form_photo_formUncheckedUpdateWithoutPhoto_formInput>
    create: XOR<form_photo_formCreateWithoutPhoto_formInput, form_photo_formUncheckedCreateWithoutPhoto_formInput>
  }

  export type form_photo_formUpdateWithWhereUniqueWithoutPhoto_formInput = {
    where: form_photo_formWhereUniqueInput
    data: XOR<form_photo_formUpdateWithoutPhoto_formInput, form_photo_formUncheckedUpdateWithoutPhoto_formInput>
  }

  export type form_photo_formUpdateManyWithWhereWithoutPhoto_formInput = {
    where: form_photo_formScalarWhereInput
    data: XOR<form_photo_formUpdateManyMutationInput, form_photo_formUncheckedUpdateManyWithoutPhoto_formInput>
  }

  export type place_userCreateWithoutPlaceInput = {
    joined_at?: Date | string | null
    user?: userCreateNestedOneWithoutPlace_userInput
  }

  export type place_userUncheckedCreateWithoutPlaceInput = {
    id?: number
    user_id?: number | null
    joined_at?: Date | string | null
  }

  export type place_userCreateOrConnectWithoutPlaceInput = {
    where: place_userWhereUniqueInput
    create: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput>
  }

  export type place_userCreateManyPlaceInputEnvelope = {
    data: place_userCreateManyPlaceInput | place_userCreateManyPlaceInput[]
  }

  export type register_form_dynamicCreateWithoutPlaceInput = {
    data_json?: string | null
    registration_date?: Date | string | null
  }

  export type register_form_dynamicUncheckedCreateWithoutPlaceInput = {
    id?: number
    data_json?: string | null
    registration_date?: Date | string | null
  }

  export type register_form_dynamicCreateOrConnectWithoutPlaceInput = {
    where: register_form_dynamicWhereUniqueInput
    create: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput>
  }

  export type register_form_dynamicCreateManyPlaceInputEnvelope = {
    data: register_form_dynamicCreateManyPlaceInput | register_form_dynamicCreateManyPlaceInput[]
  }

  export type place_userUpsertWithWhereUniqueWithoutPlaceInput = {
    where: place_userWhereUniqueInput
    update: XOR<place_userUpdateWithoutPlaceInput, place_userUncheckedUpdateWithoutPlaceInput>
    create: XOR<place_userCreateWithoutPlaceInput, place_userUncheckedCreateWithoutPlaceInput>
  }

  export type place_userUpdateWithWhereUniqueWithoutPlaceInput = {
    where: place_userWhereUniqueInput
    data: XOR<place_userUpdateWithoutPlaceInput, place_userUncheckedUpdateWithoutPlaceInput>
  }

  export type place_userUpdateManyWithWhereWithoutPlaceInput = {
    where: place_userScalarWhereInput
    data: XOR<place_userUpdateManyMutationInput, place_userUncheckedUpdateManyWithoutPlaceInput>
  }

  export type place_userScalarWhereInput = {
    AND?: place_userScalarWhereInput | place_userScalarWhereInput[]
    OR?: place_userScalarWhereInput[]
    NOT?: place_userScalarWhereInput | place_userScalarWhereInput[]
    id?: IntFilter<"place_user"> | number
    user_id?: IntNullableFilter<"place_user"> | number | null
    place_id?: IntNullableFilter<"place_user"> | number | null
    joined_at?: DateTimeNullableFilter<"place_user"> | Date | string | null
  }

  export type register_form_dynamicUpsertWithWhereUniqueWithoutPlaceInput = {
    where: register_form_dynamicWhereUniqueInput
    update: XOR<register_form_dynamicUpdateWithoutPlaceInput, register_form_dynamicUncheckedUpdateWithoutPlaceInput>
    create: XOR<register_form_dynamicCreateWithoutPlaceInput, register_form_dynamicUncheckedCreateWithoutPlaceInput>
  }

  export type register_form_dynamicUpdateWithWhereUniqueWithoutPlaceInput = {
    where: register_form_dynamicWhereUniqueInput
    data: XOR<register_form_dynamicUpdateWithoutPlaceInput, register_form_dynamicUncheckedUpdateWithoutPlaceInput>
  }

  export type register_form_dynamicUpdateManyWithWhereWithoutPlaceInput = {
    where: register_form_dynamicScalarWhereInput
    data: XOR<register_form_dynamicUpdateManyMutationInput, register_form_dynamicUncheckedUpdateManyWithoutPlaceInput>
  }

  export type register_form_dynamicScalarWhereInput = {
    AND?: register_form_dynamicScalarWhereInput | register_form_dynamicScalarWhereInput[]
    OR?: register_form_dynamicScalarWhereInput[]
    NOT?: register_form_dynamicScalarWhereInput | register_form_dynamicScalarWhereInput[]
    id?: IntFilter<"register_form_dynamic"> | number
    place_id?: IntNullableFilter<"register_form_dynamic"> | number | null
    data_json?: StringNullableFilter<"register_form_dynamic"> | string | null
    registration_date?: DateTimeNullableFilter<"register_form_dynamic"> | Date | string | null
  }

  export type placeCreateWithoutPlace_userInput = {
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    register_form_dynamic?: register_form_dynamicCreateNestedManyWithoutPlaceInput
  }

  export type placeUncheckedCreateWithoutPlace_userInput = {
    place_id?: number
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    register_form_dynamic?: register_form_dynamicUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type placeCreateOrConnectWithoutPlace_userInput = {
    where: placeWhereUniqueInput
    create: XOR<placeCreateWithoutPlace_userInput, placeUncheckedCreateWithoutPlace_userInput>
  }

  export type userCreateWithoutPlace_userInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessCreateNestedManyWithoutUserInput
    attendance?: attendanceCreateNestedManyWithoutUserInput
    role?: roleCreateNestedOneWithoutUserInput
    user_contact?: user_contactCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutPlace_userInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
    access?: accessUncheckedCreateNestedManyWithoutUserInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutUserInput
    user_contact?: user_contactUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutPlace_userInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPlace_userInput, userUncheckedCreateWithoutPlace_userInput>
  }

  export type placeUpsertWithoutPlace_userInput = {
    update: XOR<placeUpdateWithoutPlace_userInput, placeUncheckedUpdateWithoutPlace_userInput>
    create: XOR<placeCreateWithoutPlace_userInput, placeUncheckedCreateWithoutPlace_userInput>
    where?: placeWhereInput
  }

  export type placeUpdateToOneWithWhereWithoutPlace_userInput = {
    where?: placeWhereInput
    data: XOR<placeUpdateWithoutPlace_userInput, placeUncheckedUpdateWithoutPlace_userInput>
  }

  export type placeUpdateWithoutPlace_userInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    register_form_dynamic?: register_form_dynamicUpdateManyWithoutPlaceNestedInput
  }

  export type placeUncheckedUpdateWithoutPlace_userInput = {
    place_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    register_form_dynamic?: register_form_dynamicUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type userUpsertWithoutPlace_userInput = {
    update: XOR<userUpdateWithoutPlace_userInput, userUncheckedUpdateWithoutPlace_userInput>
    create: XOR<userCreateWithoutPlace_userInput, userUncheckedCreateWithoutPlace_userInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPlace_userInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPlace_userInput, userUncheckedUpdateWithoutPlace_userInput>
  }

  export type userUpdateWithoutPlace_userInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUpdateManyWithoutUserNestedInput
    attendance?: attendanceUpdateManyWithoutUserNestedInput
    role?: roleUpdateOneWithoutUserNestedInput
    user_contact?: user_contactUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutPlace_userInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUncheckedUpdateManyWithoutUserNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type placeCreateWithoutRegister_form_dynamicInput = {
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    place_user?: place_userCreateNestedManyWithoutPlaceInput
  }

  export type placeUncheckedCreateWithoutRegister_form_dynamicInput = {
    place_id?: number
    name?: string | null
    logo?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    active?: number | null
    place_user?: place_userUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type placeCreateOrConnectWithoutRegister_form_dynamicInput = {
    where: placeWhereUniqueInput
    create: XOR<placeCreateWithoutRegister_form_dynamicInput, placeUncheckedCreateWithoutRegister_form_dynamicInput>
  }

  export type placeUpsertWithoutRegister_form_dynamicInput = {
    update: XOR<placeUpdateWithoutRegister_form_dynamicInput, placeUncheckedUpdateWithoutRegister_form_dynamicInput>
    create: XOR<placeCreateWithoutRegister_form_dynamicInput, placeUncheckedCreateWithoutRegister_form_dynamicInput>
    where?: placeWhereInput
  }

  export type placeUpdateToOneWithWhereWithoutRegister_form_dynamicInput = {
    where?: placeWhereInput
    data: XOR<placeUpdateWithoutRegister_form_dynamicInput, placeUncheckedUpdateWithoutRegister_form_dynamicInput>
  }

  export type placeUpdateWithoutRegister_form_dynamicInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    place_user?: place_userUpdateManyWithoutPlaceNestedInput
  }

  export type placeUncheckedUpdateWithoutRegister_form_dynamicInput = {
    place_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    place_user?: place_userUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type userCreateWithoutRoleInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessCreateNestedManyWithoutUserInput
    attendance?: attendanceCreateNestedManyWithoutUserInput
    place_user?: place_userCreateNestedManyWithoutUserInput
    user_contact?: user_contactCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutRoleInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessUncheckedCreateNestedManyWithoutUserInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutUserInput
    place_user?: place_userUncheckedCreateNestedManyWithoutUserInput
    user_contact?: user_contactUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutRoleInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput>
  }

  export type userCreateManyRoleInputEnvelope = {
    data: userCreateManyRoleInput | userCreateManyRoleInput[]
  }

  export type userUpsertWithWhereUniqueWithoutRoleInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutRoleInput, userUncheckedUpdateWithoutRoleInput>
    create: XOR<userCreateWithoutRoleInput, userUncheckedCreateWithoutRoleInput>
  }

  export type userUpdateWithWhereUniqueWithoutRoleInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutRoleInput, userUncheckedUpdateWithoutRoleInput>
  }

  export type userUpdateManyWithWhereWithoutRoleInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutRoleInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    user_id?: IntFilter<"user"> | number
    first_name?: StringFilter<"user"> | string
    middle_name?: StringNullableFilter<"user"> | string | null
    maternal_surname?: StringNullableFilter<"user"> | string | null
    paternal_surname?: StringFilter<"user"> | string
    birthdate?: DateTimeNullableFilter<"user"> | Date | string | null
    photo_url?: StringNullableFilter<"user"> | string | null
    entry_date?: DateTimeNullableFilter<"user"> | Date | string | null
    low_date?: DateTimeNullableFilter<"user"> | Date | string | null
    active?: IntNullableFilter<"user"> | number | null
    access_web?: IntNullableFilter<"user"> | number | null
    access_movil?: IntNullableFilter<"user"> | number | null
    role_id?: IntNullableFilter<"user"> | number | null
  }

  export type accessCreateWithoutUserInput = {
    username: string
    password: string
    active?: number | null
  }

  export type accessUncheckedCreateWithoutUserInput = {
    access_id?: number
    username: string
    password: string
    active?: number | null
  }

  export type accessCreateOrConnectWithoutUserInput = {
    where: accessWhereUniqueInput
    create: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput>
  }

  export type accessCreateManyUserInputEnvelope = {
    data: accessCreateManyUserInput | accessCreateManyUserInput[]
  }

  export type attendanceCreateWithoutUserInput = {
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
  }

  export type attendanceUncheckedCreateWithoutUserInput = {
    attendance_id?: number
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
  }

  export type attendanceCreateOrConnectWithoutUserInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput>
  }

  export type attendanceCreateManyUserInputEnvelope = {
    data: attendanceCreateManyUserInput | attendanceCreateManyUserInput[]
  }

  export type place_userCreateWithoutUserInput = {
    joined_at?: Date | string | null
    place?: placeCreateNestedOneWithoutPlace_userInput
  }

  export type place_userUncheckedCreateWithoutUserInput = {
    id?: number
    place_id?: number | null
    joined_at?: Date | string | null
  }

  export type place_userCreateOrConnectWithoutUserInput = {
    where: place_userWhereUniqueInput
    create: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput>
  }

  export type place_userCreateManyUserInputEnvelope = {
    data: place_userCreateManyUserInput | place_userCreateManyUserInput[]
  }

  export type roleCreateWithoutUserInput = {
    name?: string | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type roleUncheckedCreateWithoutUserInput = {
    role_id?: number
    name?: string | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type roleCreateOrConnectWithoutUserInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
  }

  export type user_contactCreateWithoutUserInput = {
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
  }

  export type user_contactUncheckedCreateWithoutUserInput = {
    id?: number
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
  }

  export type user_contactCreateOrConnectWithoutUserInput = {
    where: user_contactWhereUniqueInput
    create: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput>
  }

  export type user_contactCreateManyUserInputEnvelope = {
    data: user_contactCreateManyUserInput | user_contactCreateManyUserInput[]
  }

  export type accessUpsertWithWhereUniqueWithoutUserInput = {
    where: accessWhereUniqueInput
    update: XOR<accessUpdateWithoutUserInput, accessUncheckedUpdateWithoutUserInput>
    create: XOR<accessCreateWithoutUserInput, accessUncheckedCreateWithoutUserInput>
  }

  export type accessUpdateWithWhereUniqueWithoutUserInput = {
    where: accessWhereUniqueInput
    data: XOR<accessUpdateWithoutUserInput, accessUncheckedUpdateWithoutUserInput>
  }

  export type accessUpdateManyWithWhereWithoutUserInput = {
    where: accessScalarWhereInput
    data: XOR<accessUpdateManyMutationInput, accessUncheckedUpdateManyWithoutUserInput>
  }

  export type accessScalarWhereInput = {
    AND?: accessScalarWhereInput | accessScalarWhereInput[]
    OR?: accessScalarWhereInput[]
    NOT?: accessScalarWhereInput | accessScalarWhereInput[]
    access_id?: IntFilter<"access"> | number
    username?: StringFilter<"access"> | string
    password?: StringFilter<"access"> | string
    user_id?: IntNullableFilter<"access"> | number | null
    active?: IntNullableFilter<"access"> | number | null
  }

  export type attendanceUpsertWithWhereUniqueWithoutUserInput = {
    where: attendanceWhereUniqueInput
    update: XOR<attendanceUpdateWithoutUserInput, attendanceUncheckedUpdateWithoutUserInput>
    create: XOR<attendanceCreateWithoutUserInput, attendanceUncheckedCreateWithoutUserInput>
  }

  export type attendanceUpdateWithWhereUniqueWithoutUserInput = {
    where: attendanceWhereUniqueInput
    data: XOR<attendanceUpdateWithoutUserInput, attendanceUncheckedUpdateWithoutUserInput>
  }

  export type attendanceUpdateManyWithWhereWithoutUserInput = {
    where: attendanceScalarWhereInput
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyWithoutUserInput>
  }

  export type attendanceScalarWhereInput = {
    AND?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    OR?: attendanceScalarWhereInput[]
    NOT?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    attendance_id?: IntFilter<"attendance"> | number
    user_id?: IntNullableFilter<"attendance"> | number | null
    entry_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: StringNullableFilter<"attendance"> | string | null
    departure_time?: DateTimeNullableFilter<"attendance"> | Date | string | null
    latitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: DecimalNullableFilter<"attendance"> | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: StringNullableFilter<"attendance"> | string | null
  }

  export type place_userUpsertWithWhereUniqueWithoutUserInput = {
    where: place_userWhereUniqueInput
    update: XOR<place_userUpdateWithoutUserInput, place_userUncheckedUpdateWithoutUserInput>
    create: XOR<place_userCreateWithoutUserInput, place_userUncheckedCreateWithoutUserInput>
  }

  export type place_userUpdateWithWhereUniqueWithoutUserInput = {
    where: place_userWhereUniqueInput
    data: XOR<place_userUpdateWithoutUserInput, place_userUncheckedUpdateWithoutUserInput>
  }

  export type place_userUpdateManyWithWhereWithoutUserInput = {
    where: place_userScalarWhereInput
    data: XOR<place_userUpdateManyMutationInput, place_userUncheckedUpdateManyWithoutUserInput>
  }

  export type roleUpsertWithoutUserInput = {
    update: XOR<roleUpdateWithoutUserInput, roleUncheckedUpdateWithoutUserInput>
    create: XOR<roleCreateWithoutUserInput, roleUncheckedCreateWithoutUserInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutUserInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutUserInput, roleUncheckedUpdateWithoutUserInput>
  }

  export type roleUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type roleUncheckedUpdateWithoutUserInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_contactUpsertWithWhereUniqueWithoutUserInput = {
    where: user_contactWhereUniqueInput
    update: XOR<user_contactUpdateWithoutUserInput, user_contactUncheckedUpdateWithoutUserInput>
    create: XOR<user_contactCreateWithoutUserInput, user_contactUncheckedCreateWithoutUserInput>
  }

  export type user_contactUpdateWithWhereUniqueWithoutUserInput = {
    where: user_contactWhereUniqueInput
    data: XOR<user_contactUpdateWithoutUserInput, user_contactUncheckedUpdateWithoutUserInput>
  }

  export type user_contactUpdateManyWithWhereWithoutUserInput = {
    where: user_contactScalarWhereInput
    data: XOR<user_contactUpdateManyMutationInput, user_contactUncheckedUpdateManyWithoutUserInput>
  }

  export type user_contactScalarWhereInput = {
    AND?: user_contactScalarWhereInput | user_contactScalarWhereInput[]
    OR?: user_contactScalarWhereInput[]
    NOT?: user_contactScalarWhereInput | user_contactScalarWhereInput[]
    id?: IntFilter<"user_contact"> | number
    street?: StringNullableFilter<"user_contact"> | string | null
    outer_number?: StringNullableFilter<"user_contact"> | string | null
    interior_number?: StringNullableFilter<"user_contact"> | string | null
    cologne?: StringNullableFilter<"user_contact"> | string | null
    municipality?: StringNullableFilter<"user_contact"> | string | null
    cp?: IntNullableFilter<"user_contact"> | number | null
    phone_number?: StringNullableFilter<"user_contact"> | string | null
    email?: StringNullableFilter<"user_contact"> | string | null
    user_id?: IntNullableFilter<"user_contact"> | number | null
  }

  export type userCreateWithoutUser_contactInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    access?: accessCreateNestedManyWithoutUserInput
    attendance?: attendanceCreateNestedManyWithoutUserInput
    place_user?: place_userCreateNestedManyWithoutUserInput
    role?: roleCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutUser_contactInput = {
    user_id?: number
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
    role_id?: number | null
    access?: accessUncheckedCreateNestedManyWithoutUserInput
    attendance?: attendanceUncheckedCreateNestedManyWithoutUserInput
    place_user?: place_userUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUser_contactInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_contactInput, userUncheckedCreateWithoutUser_contactInput>
  }

  export type userUpsertWithoutUser_contactInput = {
    update: XOR<userUpdateWithoutUser_contactInput, userUncheckedUpdateWithoutUser_contactInput>
    create: XOR<userCreateWithoutUser_contactInput, userUncheckedCreateWithoutUser_contactInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutUser_contactInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutUser_contactInput, userUncheckedUpdateWithoutUser_contactInput>
  }

  export type userUpdateWithoutUser_contactInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUpdateManyWithoutUserNestedInput
    attendance?: attendanceUpdateManyWithoutUserNestedInput
    place_user?: place_userUpdateManyWithoutUserNestedInput
    role?: roleUpdateOneWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutUser_contactInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUncheckedUpdateManyWithoutUserNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutUserNestedInput
    place_user?: place_userUncheckedUpdateManyWithoutUserNestedInput
  }

  export type form_fieldCreateManyFieldInput = {
    form_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_fieldUpdateWithoutFieldInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    form?: formUpdateOneWithoutForm_fieldNestedInput
  }

  export type form_fieldUncheckedUpdateWithoutFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_fieldUncheckedUpdateManyWithoutFieldInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_fieldCreateManyFormInput = {
    field_id?: number | null
    joined_at?: Date | string | null
  }

  export type form_photo_formCreateManyFormInput = {
    photo_form_id?: number | null
  }

  export type form_fieldUpdateWithoutFormInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    field?: fieldUpdateOneWithoutForm_fieldNestedInput
  }

  export type form_fieldUncheckedUpdateWithoutFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    field_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_fieldUncheckedUpdateManyWithoutFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    field_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type form_photo_formUpdateWithoutFormInput = {
    photo_form?: photo_formUpdateOneWithoutForm_photo_formNestedInput
  }

  export type form_photo_formUncheckedUpdateWithoutFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo_form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type form_photo_formUncheckedUpdateManyWithoutFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo_form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type form_photo_formCreateManyPhoto_formInput = {
    form_id?: number | null
  }

  export type form_photo_formUpdateWithoutPhoto_formInput = {
    form?: formUpdateOneWithoutForm_photo_formNestedInput
  }

  export type form_photo_formUncheckedUpdateWithoutPhoto_formInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type form_photo_formUncheckedUpdateManyWithoutPhoto_formInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type place_userCreateManyPlaceInput = {
    user_id?: number | null
    joined_at?: Date | string | null
  }

  export type register_form_dynamicCreateManyPlaceInput = {
    data_json?: string | null
    registration_date?: Date | string | null
  }

  export type place_userUpdateWithoutPlaceInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: userUpdateOneWithoutPlace_userNestedInput
  }

  export type place_userUncheckedUpdateWithoutPlaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type place_userUncheckedUpdateManyWithoutPlaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicUpdateWithoutPlaceInput = {
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicUncheckedUpdateWithoutPlaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type register_form_dynamicUncheckedUpdateManyWithoutPlaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    data_json?: NullableStringFieldUpdateOperationsInput | string | null
    registration_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userCreateManyRoleInput = {
    first_name: string
    middle_name?: string | null
    maternal_surname?: string | null
    paternal_surname: string
    birthdate?: Date | string | null
    photo_url?: string | null
    entry_date?: Date | string | null
    low_date?: Date | string | null
    active?: number | null
    access_web?: number | null
    access_movil?: number | null
  }

  export type userUpdateWithoutRoleInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUpdateManyWithoutUserNestedInput
    attendance?: attendanceUpdateManyWithoutUserNestedInput
    place_user?: place_userUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutRoleInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
    access?: accessUncheckedUpdateManyWithoutUserNestedInput
    attendance?: attendanceUncheckedUpdateManyWithoutUserNestedInput
    place_user?: place_userUncheckedUpdateManyWithoutUserNestedInput
    user_contact?: user_contactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateManyWithoutRoleInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    maternal_surname?: NullableStringFieldUpdateOperationsInput | string | null
    paternal_surname?: StringFieldUpdateOperationsInput | string
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    photo_url?: NullableStringFieldUpdateOperationsInput | string | null
    entry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    low_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    access_web?: NullableIntFieldUpdateOperationsInput | number | null
    access_movil?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accessCreateManyUserInput = {
    username: string
    password: string
    active?: number | null
  }

  export type attendanceCreateManyUserInput = {
    entry_time?: Date | string | null
    latitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: string | null
    departure_time?: Date | string | null
    latitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: string | null
  }

  export type place_userCreateManyUserInput = {
    place_id?: number | null
    joined_at?: Date | string | null
  }

  export type user_contactCreateManyUserInput = {
    street?: string | null
    outer_number?: string | null
    interior_number?: string | null
    cologne?: string | null
    municipality?: string | null
    cp?: number | null
    phone_number?: string | null
    email?: string | null
  }

  export type accessUpdateWithoutUserInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accessUncheckedUpdateWithoutUserInput = {
    access_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accessUncheckedUpdateManyWithoutUserInput = {
    access_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceUpdateWithoutUserInput = {
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type attendanceUncheckedUpdateWithoutUserInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type attendanceUncheckedUpdateManyWithoutUserInput = {
    attendance_id?: IntFieldUpdateOperationsInput | number
    entry_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_entry_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_entry_time?: NullableStringFieldUpdateOperationsInput | string | null
    departure_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude_departure_time?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    photo_departure_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type place_userUpdateWithoutUserInput = {
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    place?: placeUpdateOneWithoutPlace_userNestedInput
  }

  export type place_userUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type place_userUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    place_id?: NullableIntFieldUpdateOperationsInput | number | null
    joined_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_contactUpdateWithoutUserInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_contactUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_contactUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    outer_number?: NullableStringFieldUpdateOperationsInput | string | null
    interior_number?: NullableStringFieldUpdateOperationsInput | string | null
    cologne?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    cp?: NullableIntFieldUpdateOperationsInput | number | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FieldCountOutputTypeDefaultArgs instead
     */
    export type FieldCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormCountOutputTypeDefaultArgs instead
     */
    export type FormCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Photo_formCountOutputTypeDefaultArgs instead
     */
    export type Photo_formCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Photo_formCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaceCountOutputTypeDefaultArgs instead
     */
    export type PlaceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use accessDefaultArgs instead
     */
    export type accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = accessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use attendanceDefaultArgs instead
     */
    export type attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = attendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use fieldDefaultArgs instead
     */
    export type fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = fieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use formDefaultArgs instead
     */
    export type formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = formDefaultArgs<ExtArgs>
    /**
     * @deprecated Use form_fieldDefaultArgs instead
     */
    export type form_fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = form_fieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use form_photo_formDefaultArgs instead
     */
    export type form_photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = form_photo_formDefaultArgs<ExtArgs>
    /**
     * @deprecated Use photo_formDefaultArgs instead
     */
    export type photo_formArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = photo_formDefaultArgs<ExtArgs>
    /**
     * @deprecated Use placeDefaultArgs instead
     */
    export type placeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = placeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use place_userDefaultArgs instead
     */
    export type place_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = place_userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use register_form_dynamicDefaultArgs instead
     */
    export type register_form_dynamicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = register_form_dynamicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roleDefaultArgs instead
     */
    export type roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_contactDefaultArgs instead
     */
    export type user_contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_contactDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}